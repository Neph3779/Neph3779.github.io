<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neph's Blog</title>
    <description>Write code with my soul.</description>
    <link>https://neph3779.github.io/</link>
    <atom:link href="https://neph3779.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 19 Aug 2022 08:35:55 +0900</pubDate>
    <lastBuildDate>Fri, 19 Aug 2022 08:35:55 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>[번역, 작성중] Preparing Your UI to Run in the Foreground</title>
        <description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;앱의 UI가 화면에 띄워지는 것을 준비하기 위해 foreground 전환을 사용합니다. foreground로의 상태변환은 일반적으로 유저의 액션에 대한 응답입니다. 예를 들어 유저가 앱의 아이콘을 터치하면 시스템은 앱을 실행하고 foreground 상태로 만듭니다. 앱의 UI 업데이트, 리소스 요청, 유저의 요청을 핸들링하는 서비스의 시작을 위해 foreground로의 상태변환을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;모든 상태 전환시에는 UIKit이 알맞은 delegate 객체에 notification을 보내게 됩니다. (appDelegate, sceneDelegate)&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Aug 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/prepareForeground/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/prepareForeground/</guid>
        
        <category>foreground</category>
        
        <category>app life cycle</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[번역] Managing Your App's Life Cycle</title>
        <description>&lt;p&gt;이번 글에서는 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle&quot;&gt;Managing Your App’s Life Cycle&lt;/a&gt; 를 번역해보았습니다.&lt;/p&gt;

&lt;p&gt;사실상 글의 정독이 목적이고 중요도가 떨어진다 생각되는 부분은 번역하지 않았으니 정확한 내용은 공식문서를 참조해주세요&lt;/p&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;앱의 현재 상태는 현재 무엇을 할 수 있고 없는지를 결정하는 요소입니다. foreground 상태의 앱은 유저가 사용중인 앱이므로 시스템 리소스의 우선권을 갖습니다. 반대로 background에 있는 앱은 적은 일을 해야 하기에 리소스를 거의 할당받지 못합니다. 앱의 상태변화가 일어나면 그에 맞는 대응을 해줘야 합니다.&lt;/p&gt;

&lt;p&gt;앱의 상태 변화가 일어나면 UIKit은 appDelegate이나 sceneDelegate의 메서드들을 호출함으로써 상태 변화 사실을 알려옵니다.&lt;/p&gt;

&lt;p&gt;이때 iOS13 이전/이후로 UISceneDelegate이 호출될지 UIApplicationDelegate가 호출될지가 나뉩니다. (더 정확히는SceneDelegate 지원 여부에 따라 달라집니다.)&lt;/p&gt;

&lt;h2 id=&quot;respond-to-scene-based-life-cycle-events&quot;&gt;Respond to Scene-Based Life-Cycle Events&lt;/h2&gt;

&lt;p&gt;앱이 scene을 지원한다면 UIKit은 각각의 scene마다 개별적으로 life cycle event를 전달합니다. 유저는 하나의 앱을 여러개 띄울 수 있으며 각각을 보이거나 숨길 수 있습니다. 각각의 scene이 독립적인 life cycle을 갖기 때문에 각각의 scene은 서로 다른 상태에 있을 수 있습니다. 어떤 scene은 foreground에 있는 동안 다른 scene들은 background나 suspend상태에 있는 것처럼 말이죠.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220817150220.png&quot; alt=&quot;An illustration showing the state transitions for a scene-based app. Scenes start in the unattached state and move to the foreground-active or background state. The foreground-inactive state acts as a transition state.&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 사진은 scene의 상태변화도입니다. 유저나 시스템이 앱의 새로운 scene을 요청하면 UIKit은 unattached 상태의 scene을 만들어줍니다. 유저가 요청한 경우에는 빠르게 foreground 상태에 진입시켜 화면에 띄워줍니다. 시스템 요청의 경우에는 일반적으로 background 상태로 진입시켜 작업을 진행할 수 있도록 합니다. (location 이벤트 등으로 앱을 백그라운드에서 작동되도록 띄우는 경우 등이 예시) 유저가 앱을 dismiss하면 UIKit은 해당 scene을 background 상태로 변경하고 이는 곧 suspended 상태로 바뀌게 됩니다. UIKit은 background나 suspended 상태에 있는 scene을 언제든 disconnect 하여 unattached 상태로 가도록 할 수 있습니다. (리소스 회수의 목적)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; scene 변경은 다음과 같은 작업을 할 때 사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UIKit이 scene을 앱과 연결시킬때 개발자의 초기 UI를 구성하고 scene에 필요한 데이터를 로드할 때&lt;/li&gt;
  &lt;li&gt;foreground-active 상태로 상태변화가 일어날때 UI를 구서하고 유저와의 상호작용을 준비할 때&lt;/li&gt;
  &lt;li&gt;background 상태로 갈 때 중요한 작업을 끝마치고 확보할 수 있는 메모리를 최대한 확보하고 app의 snapshot에 대비할 때&lt;/li&gt;
  &lt;li&gt;scene disconnection 시에 shared resoure를 정리할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;respond-to-app-based-life-cycle-events&quot;&gt;Respond to App-Based Life-Cycle Events&lt;/h2&gt;

&lt;p&gt;iOS 12 이전 혹은 scene을 지원하지 않는 경우에는 UIKit이 모든 life-cycle 이벤트를 UIApplicationDelegate을 통해 전달했습니다. app delegate은 앱의 모든 window를  관리합니다. 결과적으로 앱의 상태 변화는 UI에 영향을 끼칩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220817222803.png&quot; alt=&quot;An illustration showing the state transitions for an app without scenes. The app launches into the active or background state. An app transitions through the inactive state. &quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림은 app delegate 객체를 포함한 상태 변화도를 나타낸 것입니다. 앱 실행 이후에 시스템은 UI를 화면에 띄울지의 여부를 바탕으로 앱을 inactive나 background 상태로 보냅니다. foreground 상태에서 실행중인 경우에는 자동으로 앱을 active 상태로 보냅니다. 이후 앱이 terminate 될 때까지 상태변화를 반복합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 앱의 상태변화는 다음과 같은 경우에 사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱의 실행시에 데이터 구조와 UI를 초기화할 때&lt;/li&gt;
  &lt;li&gt;실행중에 UI 구성을 마무리하고 유저와의 상호작용을 준비할 때&lt;/li&gt;
  &lt;li&gt;종료시에 데이터를 저장하고 앱의 behavior를 quiet 시킬때 (앱 마무리 한다는 뜻 같습니다.)&lt;/li&gt;
  &lt;li&gt;background 상태로 진입할때 중요한 작업을 끝마치고 메모리를 최대한 확보하고 앱의 snapshot을 준비합니다.&lt;/li&gt;
  &lt;li&gt;앱의 종료시에 모든 작업을 중단하고 공유 리소스를 release합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;respond-to-other-significant-events&quot;&gt;Respond to Other Significant Events&lt;/h2&gt;

&lt;p&gt;life-cycle 이벤트를 handling하는 것에 추가로 앱은 아래의 목록에 대해서도 준비해야 합니다. 대부분 UIApplicationDelegate 객체를 사용해 관리하며 몇몇 경우에는 notification을 통해 관리해야 할수도 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Memory warnings
    &lt;ul&gt;
      &lt;li&gt;앱이 메모리 사용이 너무 과다할때 받는 이벤트(경고)입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protected data becomes available/unavailable
    &lt;ul&gt;
      &lt;li&gt;유저가 디바이스를 lock, unlock할때 발생하는 이벤트입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Handoff tasks
    &lt;ul&gt;
      &lt;li&gt;NSUserActivity 객체가 생성되어야 할 때 받는 이벤트입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Time changes
    &lt;ul&gt;
      &lt;li&gt;시간 변경등의 이유로 발생하는 이벤트입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open URLs
    &lt;ul&gt;
      &lt;li&gt;앱이 resource를 오픈할때 발생하는 이벤트입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Aug 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/AppLifeCycle/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/AppLifeCycle/</guid>
        
        <category>life cycle</category>
        
        <category>foreground</category>
        
        <category>background</category>
        
        <category>inactive</category>
        
        <category>unattached</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>AppDelegate란?</title>
        <description>&lt;p&gt;이번 글에서는 appDelegate에 어떤 메서드들이 존재하고 어떤 것들을 담당하는지에 대해 다뤄보겠습니다.&lt;/p&gt;

&lt;p&gt;다음 글에서 appDelegate과 sceneDelegate이 분리된 이유에 대해 다뤄보도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;uiapplicationdelegate&quot;&gt;UIApplicationDelegate&lt;/h2&gt;

&lt;p&gt;appDelegate는 앱을 구동할때 공유되는 행위를 관리하는 객체입니다.&lt;/p&gt;

&lt;p&gt;appDelegate가 하는 일은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앱의 자료구조의 초기화&lt;/li&gt;
  &lt;li&gt;앱의 Scene 구성&lt;/li&gt;
  &lt;li&gt;앱 외부로부터 오는 notification (배터리 부족, 다운로드 완료 등) 들에 대한 responding&lt;/li&gt;
  &lt;li&gt;push notification을 통한 접속시 알맞은 서비스로 이동할 수 있도록 해줌&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SceneDelegate의 경우 iOS13 이후 한 앱을 화면을 나누어 띄우는게 가능해지면서 Scene이란 개념이 추가되었고 이에 따라 기존에 UIAppDelegate에서 관리하던 몇몇 기능이 SceneDelegate으로 넘어간 것이므로 이번 글에서는 패스하도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;initializing-the-app&quot;&gt;Initializing the App&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;willFinishLaunchingWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didFinishLaunchingNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;willFinishLaunch 와 didFinishLaunch는 앱이 구동하기 직전, 직후에 호출되는 메서드입니다.&lt;/p&gt;

&lt;p&gt;이때 어떤 방법으로 앱이 켜졌는지를 LaunchOptionsKey 인자로 받아오므로 확인이 가능합니다.&lt;/p&gt;

&lt;p&gt;LaunchOptionsKey에는 블루투스를 통한 이벤트, url을 통한 접속 등 다양한 값들이 존재합니다.&lt;/p&gt;

&lt;p&gt;또한 notification으로도 앱이 켜졌음을 확인받을 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;configuring-and-discarding-scenes&quot;&gt;Configuring and Discarding Scenes&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configurationForConnecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISceneSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConnectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISceneConfiguration&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didDiscardSceneSessions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UISceneSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iOS 13 이후 Scene이 추가되면서 Scene의 생성, 삭제와 관련한 일을 appDelegate에서 맡게 되었습니다.&lt;/p&gt;

&lt;p&gt;자세한 내용은 SceneDelegate을 다룰 때 추가하도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;responding-to-app-life-cycle-events&quot;&gt;Responding to App Life-Cycle Events&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationDidBecomeActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationWillResignActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationDidEnterBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationWillEnterForeground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationWillTerminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didBecomeActiveNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didEnterBackgroundNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;willEnterForegroundNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;willResignActiveNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;willTerminateNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앱의 state가 변환될때 호출되는 메서드, notification들이다. 상당히 직관적인 이름들이라 특별한 설명은 필요하지 않을 것 같습니다.&lt;/p&gt;

&lt;p&gt;SceneDelegate으로 기능이 넘어간 메서드로는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;willEnterForeground&lt;/li&gt;
  &lt;li&gt;didEnterBackGround&lt;/li&gt;
  &lt;li&gt;willResignActive&lt;/li&gt;
  &lt;li&gt;didBecomeActive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;responding-to-environment-changes&quot;&gt;Responding to Environment Changes&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationProtectedDataDidBecomeAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationProtectedDataWillBecomeUnavailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationDidReceiveMemoryWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applicationSignificantTimeChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;protectedDataDidBecomeAvailableNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;protectedDataWillBecomeUnavailableNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didReceiveMemoryWarningNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;significantTimeChangeNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 파트에서는 앱의 여러 환경 변화에 따라 호출되는 메서드들이 존재합니다.&lt;/p&gt;

&lt;p&gt;protected data (아마 앱 내의 데이터베이스 등이 아닌가 싶습니다.)에 접근할 수 있게 되었을때,&lt;/p&gt;

&lt;p&gt;앱 메모리 관련 warning이 발생했을 때에 notification이나 메서드를 통해 조작해줄 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;downloading-data-in-background&quot;&gt;Downloading Data in Background&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handleEventsForBackgroundURLSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBackgroundFetchResult&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;백그라운드를 통해 데이터를 받아오는 작업도 appDelegate에서 진행합니다.&lt;/p&gt;

&lt;p&gt;이때 handleEvent… 파라미터는 identifier로 사용되면 URLSessionConfiguration의 init시에 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;백그라운드 작업과 관련된 내용은 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622941-application&quot;&gt;위 메서드의 공식문서&lt;/a&gt;에 상세히 설명되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;handling-remote-notification-registration&quot;&gt;Handling Remote Notification Registration&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didRegisterForRemoteNotificationsWithDeviceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didFailToRegisterForRemoteNotificationsWithError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didReceiveRemoteNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyHashable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchCompletionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIBackgroundFetchResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버에서 보내는 푸시(remote notification)에 대한 응답도 appDelegate에서 처리합니다.&lt;/p&gt;

&lt;h2 id=&quot;providing-a-window-for-storyboarding&quot;&gt;Providing a Window for Storyboarding&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sceneDelegate을 사용하지 않는다면 앱의 윈도우 인스턴스도 appDelegate에서 만들어주어야 합니다.&lt;/p&gt;

&lt;p&gt;일반적으로는 didFinishwithLaunchOption 메서드에서 window의 초기화, window.rootViewController의 지정을 해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;providing-the-main-entry-point&quot;&gt;Providing the Main Entry Point&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;절대 건드릴 일은 없겠지만 main 메서드도 appDelegate에 존재합니다.&lt;/p&gt;

&lt;p&gt;정말 앱이 시작되면 가장 먼저 호출되는 함수입니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;appDelegate는 글에 정리한 것 이외에도 헬스킷, user activity 등 여러 다양한 기능을 담당하고 있었습니다.&lt;/p&gt;

&lt;p&gt;이번 공부로 app life cycle의 변화에 따른 대처, 백그라운드 작업, push notification, remote notification 등 여러 처리를 appDelegate에서 한다는 것을 알 수 있었습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Aug 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatIsAppDelegate/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatIsAppDelegate/</guid>
        
        <category>AppDelegate</category>
        
        <category>SceneDelegate</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>차기 개인앱 구상 및 해야할 일 정리</title>
        <description>&lt;h2 id=&quot;살까말까지난-개인앱를-통해-얻은-교훈&quot;&gt;살까말까(지난 개인앱)를 통해 얻은 교훈&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;제공할 컨텐츠를 손쉽게 api로 제공받을 수 있는지를 확인하자
    &lt;ul&gt;
      &lt;li&gt;지난번 개인앱에서는 “상품의 랭킹정보”를 바탕으로 “해당 상품의 리뷰”를 제공하는것이 목적이었다.
이 과정에서 리뷰를 찾아주는 것은 검색 api를 통해 비교적 간단히 해결할 수 있었는데 (유튜브 api 할당량 관련 이슈 제외)
상품의 랭킹정보를 얻어오는 과정이 생각보다 매우 복잡함을 알게 되었다. 그 어디서도 api로 제공해주지 않았으며
기업들이 자신들의 제품 판매량을 공개하는것도 아니었기에 랭킹정보 사이트 크롤링이라는 무식한 방법으로 앱의 컨텐츠를 받아오게 되었다.&lt;/li&gt;
      &lt;li&gt;다음 앱에서는 절대로 이런 일로 인한 시간낭비를 하지 않는 것이 목표&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;디자인을 어느정도는 정해놓고 시작하자
    &lt;ul&gt;
      &lt;li&gt;핀터레스트를 열심히 뒤지면서 이쁜 디자인의 앱을 만드는것도 물론 즐겁고 의미있는 일이겠지만
지난 앱에서는 이게 주객전도되어 너무 오랜 시간을 디자인을 뜯어고치는데 할애했다.
최대한 이런 일을 줄여보자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공수 산정표를 작성하고 이에 맞게 움직이자
    &lt;ul&gt;
      &lt;li&gt;지금 내가 제일 못하고 있는게 시간과 관련된 것들이 아닐까 싶다.
일과 휴식시간의 경계가 없고 코드를 짤때도 내가 만족할때까지 고치면서 짠다.
지금까지는 막연하게 난 어차피 코드 빨리 짜니까 시간은 어떻게든 되겠지 하는 마음을 가지고 있었는데
이번 앱을 통해 공수 산정표를 작성해서 내가 어떤 부분을 못하고 어떤 부분을 잘하는지를 파악하는 것이 목표이다.
뷰가 생각보다 복잡해서 시간이 더 걸렸는지, 미숙한 라이브러리 사용으로 인해 시간이 더 걸렸는지 등을 파악함으로써
나중에 회사에 가서도 같은 시행착오를 겪지 않는 것을 목표로..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해야할-일-정리&quot;&gt;해야할 일 정리&lt;/h2&gt;

&lt;p&gt;해야하는 일들을 무작위로 나열해보자면 이정도가 될 것 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;졸업 프로젝트 &amp;amp; 개인앱 제작&lt;/li&gt;
  &lt;li&gt;코테 준비
    &lt;ul&gt;
      &lt;li&gt;백준을 많이 풀었으니 이만하면 충분하지 않을까 싶은 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ios 면접 대비 공부
    &lt;ul&gt;
      &lt;li&gt;이전에 제르시님 깃허브에 있는 내용들을 공부했었는데, 이번엔 좀 더 자세하게 공부하는걸 목표로 글을 정리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공부하다 모르거나 헷갈리는 각종 지식 정리&lt;/li&gt;
  &lt;li&gt;전공 주요과목 복습
    &lt;ul&gt;
      &lt;li&gt;운영체제, 컴퓨터 네트워크, 알고리즘&amp;amp;자료구조 정도를 복습할 수 있을 것 같다.&lt;/li&gt;
      &lt;li&gt;운영체제는 글로 정리를 장기간 프로젝트로 잡고 일주일에 한편을 목표로 작성해보는게 좋을 것 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이력서 &amp;amp; 포트폴리오 작성
    &lt;ul&gt;
      &lt;li&gt;제일 어떻게 해야될지 잘 모르겠는 영역.. 일단 구색을 갖춰서 작성한 다음 다른 사람에게 피드백을 들어보자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;차기-개인앱-아이디어-및-기타-등등&quot;&gt;차기 개인앱 아이디어 및 기타 등등&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;들어가야 할 요소&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;네트워크 통신&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;MVVM과 RxSwift&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 03 Aug 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EC%9D%BC%EC%83%81/nextAppAndFutureStuff/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EC%9D%BC%EC%83%81/nextAppAndFutureStuff/</guid>
        
        
        <category>일상</category>
        
      </item>
    
      <item>
        <title>Swift weak, strong, unowned 정리</title>
        <description>&lt;p&gt;제가 Swift에서 weak이란 단어를 처음 본 것은 스토리보드에서 UI를 코드로 끌어왔을때였습니다.&lt;/p&gt;

&lt;p&gt;자동으로 weak var 선언이 되는 것을 보며 그 이유가 궁금했었는데 이번글에서는 weak을 사용하는 이유, ARC 등에 대해 다루고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;arc란&quot;&gt;ARC란&lt;/h2&gt;

&lt;p&gt;인스턴스의 수명주기가 끝나는 시점(Reference Count가 0이 되는 시점)에 Swift는 해당 인스턴스를 nil로 바꿔주는 코드를 실행하며(deallocate 작업) 이것을 Automatic Reference Counting이라 칭합니다.&lt;/p&gt;

&lt;p&gt;ARC를 공부하기 앞서 반드시 알아두어야 하는 것은 인스턴스의 “수명”입니다.&lt;/p&gt;

&lt;p&gt;코딩을 처음 공부할때&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;전역변수, 지역변수를 이야기하며 지역변수는 해당 블록 내에서만 살아있고, 전역변수는 프로그램이 동작하는 동안 살아있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;와 같은 문장을 보신적이 있으실겁니다. Swift도 마찬가지로 인스턴스는 특정 블록 내에서 살아있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 특정 블록이 끝났다고해서 무조건 해당 인스턴스(A)를 deallocate해버리면 문제가 발생합니다.&lt;/p&gt;

&lt;p&gt;다른 곳에서 A를 사용하고 있었다면 A가 갑자기 nil로 변경되었을때 이에 대처할 수 없기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Swift는 이런 경우를 방지하고자 “Reference Count”라는 장치를 두었습니다.&lt;/p&gt;

&lt;p&gt;만약 A를 B가 사용하고 있다면 Reference Count를 사용하는 사람(인스턴스)의 숫자만큼 증가시켜주는 것입니다.&lt;/p&gt;

&lt;p&gt;A가 존재하던 블록이 끝나서 Reference Count가 하나 줄어들더라도 B가 사용함으로 인해 증가된 Reference Count 덕분에&lt;/p&gt;

&lt;p&gt;A의 Reference Count는 0이 되지 않고 따라서 nil로 바뀌지도 않습니다 (Reference Count가 0이되면 ARC에 의해 nil로 바뀝니다.)&lt;/p&gt;

&lt;p&gt;과거 objective-c 시절에는 프로그래머가 직접 deallocate 작업을 해주어야하는 수고가 있었지만 Swift는 ARC 덕에 그런 수고를 덜었습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 하나 궁금해지는건 그럼 A는 언제 Reference Count가 0이 되어 메모리에서 없어질까? 인데&lt;/p&gt;

&lt;p&gt;이는 B의 수명이 다하는 시점에 Reference Count가 0이 될 것이며 이때 A도 메모리에서 사라지게 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 이 단락에서 적은 것이 ARC와 weak을 사용하는 이유의 전부입니다.&lt;/p&gt;

&lt;p&gt;weak을 잘못 사용했을때 자꾸 인스턴스에 nil이 들어있다든가,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220728173103.png&quot; alt=&quot;image-20220728173103913&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 오류를 마주하게 된다면 인스턴스의 수명에 대해 다시 생각해볼 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;아래서 다시 한번 설명하도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;reference-count&quot;&gt;Reference Count&lt;/h2&gt;

&lt;p&gt;Reference, 즉 참조를 할 때 참조 당하는 쪽의 RC가 늘어납니다.&lt;/p&gt;

&lt;p&gt;이때 강한참조(Strong)의 경우에만 RC가 늘어나게 됩니다.&lt;/p&gt;

&lt;p&gt;만약 a라는 변수에 A라는 클래스의 인스턴스를 담는 아래와 같은 코드가 있다고 하면&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a의 RC는 1 증가한 상태입니다.&lt;/p&gt;

&lt;p&gt;여기서 아래처럼 a1이라는 변수가 a의 주소값을 가져간다면&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a의 RC는 2가 된 상태인거죠.&lt;/p&gt;

&lt;p&gt;이처럼 아무런 키워드를 적지 않고 참조를 하게 되면 Strong 참조를 사용한 것입니다.&lt;/p&gt;

&lt;p&gt;a는 자신의 수명이 다하더라도 RC가 0이 아니니 계속 메모리에 살아있게 되는 것이죠&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;단순히 a1이 생존해있는동안 a가 조금 더 살아있는 경우에는 큰 문제가 되지 않습니다.&lt;/p&gt;

&lt;p&gt;하지만 아래와 같은 경우라면 조금 이야기가 달라집니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is being deinitialized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Apartment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tenant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Apartment &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is being deinitialized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unit4A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John Appleseed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unit4A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Apartment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Person 객체는 Apartment의 인스턴스를 프로퍼티로 가지고&lt;/p&gt;

&lt;p&gt;Apartment 객체는 Person의 인스턴스를 프로퍼티로 가집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.swift.org/swift-book/_images/referenceCycle02_2x.png&quot; alt=&quot;../_images/referenceCycle02_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이때 Person의 객체와 Apartment 객체가 각각 apartment, tennant라는 프로퍼티에 서로의 인스턴스를 저장해서 사용하다&lt;/p&gt;

&lt;p&gt;수명이 다해서 메모리에서 사라져야 하는 시점이 왔어도 메모리에서 사라질 수 없습니다.&lt;/p&gt;

&lt;p&gt;왜냐하면 Person의 인스턴스(john)는 Apartment 인스턴스(unit4A)가 가지고 있는 tennant라는 프로퍼티로 인해 RC가 1 올라가있는 상태이고&lt;/p&gt;

&lt;p&gt;Apartment의 인스턴스(unit4A)는 Person의 인스턴스(john)이 가지고 있는 apartment라는 프로퍼티로 인해 RC가 1 올라가있는 상태이기 때문입니다.&lt;/p&gt;

&lt;p&gt;따라서 ARC는 이들을 자동으로 nil로 전환해주지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 그럼 john과 unit4A를 직접 nil로 할당해주면 안되느냐와 같은 질문을 할 수 있겠지만&lt;/p&gt;

&lt;p&gt;현재 strong reference cycle이 생긴 상태이기 때문에 이 방법으로도 메모리에서 내릴수는 없습니다.&lt;/p&gt;

&lt;p&gt;john.apartment와 unit4A.tennant에 각각 nil을 할당해준다면 메모리에서 내릴 수 있겠지만요.&lt;/p&gt;

&lt;h2 id=&quot;weak&quot;&gt;Weak&lt;/h2&gt;

&lt;p&gt;우리는 이러한 상황을 방지하기 위해 weak이란 키워드를 사용합니다&lt;/p&gt;

&lt;p&gt;weak은  RC를 증가시키지 않습니다. 따라서 현재 해당 인스턴스가 메모리에 올라와있는지 아닌지 알 수 없으니&lt;/p&gt;

&lt;p&gt;optional값을 풀어봤을때 nil값이 들어있다면 현재 메모리에서 내려갔거나 아직 해당 weak 변수에 아무것도 들어오지 않은 경우,&lt;/p&gt;

&lt;p&gt;값이 있다면 현재 메모리에 올라와있는 경우로 판단할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 이게 strong, weak의 전부입니다.&lt;/p&gt;

&lt;p&gt;하지만 제대로된 이해없이 “결국 결론은 weak을 쓰면 메모리 누수를 막을 수 있다는거군” 라고 생각한다면&lt;/p&gt;

&lt;p&gt;필연적으로 아래의 오류를 만나게 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220728173103.png&quot; alt=&quot;image-20220728173103913&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예시에서 b라는 weak var에 B의 인스턴스를 넣어주었습니다.&lt;/p&gt;

&lt;p&gt;겉으로 보면 이게 왜 문제지 싶겠지만 weak var는 RC가 증가하지 않는다는 점을 눈여겨봐야 합니다.&lt;/p&gt;

&lt;p&gt;이해를 돕기 위해 아래의 사진을 첨부합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220728175542.png&quot; alt=&quot;../_images/weakReference02_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림을 보면 john은 weak 변수, unit4A는 strong 참조를 사용하고 있는것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;Person의 인스턴스는 RC가 증가하지 않았고 Apartment의 인스턴스는 RC가 증가했겠네요&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 A, B 클래스의 예시로 돌아와서 이야기하자면&lt;/p&gt;

&lt;p&gt;weak var b는 RC를 증가시켜주지 않는 weak reference이므로&lt;/p&gt;

&lt;p&gt;B()라는 B의 인스턴스를 할당해주더라도 RC가 0이므로 ARC에 의해 자동으로 nil로 바뀌는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 weak var에는 어떤 인스턴스를 넣어야하는 걸까요?&lt;/p&gt;

&lt;p&gt;정답은 “이미 RC가 증가되어있는 인스턴스”입니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예시처럼 코드를 작성하면 아까 만났던 warning은 피할 수 있습니다.&lt;/p&gt;

&lt;p&gt;temp라는 상수에 B()라는 인스턴스를 집어넣어서 temp의 RC가 이미 1이기 때문에&lt;/p&gt;

&lt;p&gt;b에다 집어넣어도 문제가 없는 것이죠&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론! 여기서 temp는 init이 끝나는 시점에 수명이 다해서 RC가 내려갈 것이며&lt;/p&gt;

&lt;p&gt;b는 다시 nil값이 저장될 것임을 알 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;unowned&quot;&gt;Unowned&lt;/h2&gt;

&lt;p&gt;Unowned를 자주 사용할 일은 없겠지만 개념에 대해 정리해보겠습니다.&lt;/p&gt;

&lt;p&gt;Unowned는 RC를 증가시키지 않지만, 값이 반드시 존재하는 것을 보장합니다. (즉, optional이 아닙니다.)&lt;/p&gt;

&lt;p&gt;Unowned는 어떤 인스턴스의 수명이 자신보다 길거나 같은 경우에 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CreditCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is being deinitialized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CreditCard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt64&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Customer&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Card #&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is being deinitialized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Customer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John Appleseed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CreditCard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234_5678_9012_3456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CreditCard는 Customer가 살아있는 동안에만 존재가치가 있습니다.&lt;/p&gt;

&lt;p&gt;따라서 이를 unowned로 선언하여 strong reference cycle을 방지합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.swift.org/swift-book/_images/unownedReference01_2x.png&quot; alt=&quot;../_images/unownedReference01_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같은 상태에서  john이 nil이 되었을때&lt;/p&gt;

&lt;p&gt;weak의 예시에서와 같이 strong reference이 생기지 않고 메모리에서 내려갑니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 글에서는 조금 헷갈렸던 strong, weak, unowned에 대해 정리해봤습니다.&lt;/p&gt;

&lt;p&gt;스토리보드에서 끌어온 UI가 weak var로 선언되던 것은 스토리보드가 만든 인스턴스를 뷰컨트롤러의 변수가 가리킴으로써 뷰컨트롤러가 사라져도&lt;/p&gt;

&lt;p&gt;해당 인스턴스가 죽지 않는 메모리 누수가 발생할 수 있기 때문에 자동으로 weak var로 선언되던 것이었습니다.&lt;/p&gt;

&lt;p&gt;이와 더불어 escaping closure도 수명주기와 연관지어 내부 구조를 생각해보면 escaping 명시의 여부가 왜 필요한지에 대해서도 알 수 있었습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jul 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/swift/SwiftARCWeakStrongUnowned/</link>
        <guid isPermaLink="true">https://neph3779.github.io/swift/SwiftARCWeakStrongUnowned/</guid>
        
        <category>ARC</category>
        
        <category>weak</category>
        
        <category>strong</category>
        
        <category>unowned</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Swift 딕셔너리 값이 존재하는지 확인하는 법</title>
        <description>&lt;h2 id=&quot;dictionary에-특정-key값이-존재하는지-확인하는-법&quot;&gt;Dictionary에 특정 Key값이 존재하는지 확인하는 법&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메서드가 하나쯤 있을법 한데, 특별히 메서드를 지원하지는 않는다.&lt;/p&gt;

&lt;p&gt;그냥 키값을 넣었을때 nil이 나오면 값이 없다고 판단할 수 있다.&lt;/p&gt;

&lt;p&gt;가끔씩 이상하게 생각이 안나서 글 하나 업로드..&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jul 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/swift/SwiftDictionaryKeyCheck/</link>
        <guid isPermaLink="true">https://neph3779.github.io/swift/SwiftDictionaryKeyCheck/</guid>
        
        <category>Dictionary</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Swift initializer 총정리</title>
        <description>&lt;p&gt;이번 글에서는 &lt;a href=&quot;[Initialization — The Swift Programming Language (Swift 5.7)](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html)&quot;&gt;Swift.org 문서&lt;/a&gt;를 바탕으로 Swift에서 사용되는 다양한 initializer의 종류와 그 사용처에 대해 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;initializers&quot;&gt;Initializers&lt;/h2&gt;

&lt;p&gt;initialize에 관한 기초적인 설명 파트는 제외하고 눈여겨 볼만한 내용들만 정리해보았습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deinit은 class type의 경우에만 구현할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;클래스와 구조체는 인스턴스 생성 시점에 반드시 모든 저장 프로퍼티에 값을 저장해야합니다.&lt;/li&gt;
  &lt;li&gt;optional type의 값은 값 지정이 이루어지지 않는다면 nil값으로 초기화됩니다.&lt;/li&gt;
  &lt;li&gt;초기값은 init을 통해서 할당할수도 있고 정의부에서 default 값을 할당할수도 있습니다. (이때 전자와 후자의 경우 모두 프로퍼티 옵저버는 동작하지 않습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;default-value&quot;&gt;Default value&lt;/h3&gt;

&lt;p&gt;만약 항상 같은 값으로 프로퍼티를 초기화해야 한다면 initializer를 통해서가 아닌 default value를 통해서 지정하길 권고하고 있습니다. 이 방법이 보다 명확하고 default initializer와 initializer inheritance의 이점을 챙길 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;customizing-init&quot;&gt;Customizing Init&lt;/h3&gt;

&lt;p&gt;init은 파라미터의 개수와 각각의 이름으로 구분됩니다.&lt;/p&gt;

&lt;p&gt;받는 파라미터의 수, 각각의 자료형이 모두 같더라도 파라미터의 이름을 다르게 해준다면 서로 다른 initializer로 동작합니다.&lt;/p&gt;

&lt;h3 id=&quot;default-init-memberwise-init&quot;&gt;default init, memberwise init&lt;/h3&gt;

&lt;p&gt;init을 구현하지 않아도 모든 값에 default 값이 있으면 default init을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;구조체의 경우 default 값이 없어도 memberwise init을 통해 값을 지정하며 초기화할 수 있습니다.&lt;/p&gt;

&lt;p&gt;class에 memberwise init이 없는 이유는 상속 때문입니다. (어떤 클래스를 상속하여 거기에 저장 프로퍼티를 추가한다면? memberwise init을 통해 초기화되어야 했던 여러 프로퍼티들이 초기화되지 않으면서 문제 발생 가능)&lt;/p&gt;

&lt;h2 id=&quot;initializer-delegation&quot;&gt;Initializer Delegation&lt;/h2&gt;

&lt;p&gt;initializer는 또 다른 initializer를 호출할 수 있으며, 이를 통해 중복코드를 줄이거나 간결성을 높일 수 있습니다.&lt;/p&gt;

&lt;p&gt;initializer delegation은 값타입과 클래스타입(참조타입)이 서로 다르게 동작합니다.&lt;/p&gt;

&lt;p&gt;구조체같은 값타입은 상속을 지원하지 않고 자기 자신의 initializer만 호출할 수 있기 때문에 과정이 단순합니다.&lt;/p&gt;

&lt;p&gt;(상속받은 부모 클래스의 initializer를 호출하는 등의 행위가 없음)&lt;/p&gt;

&lt;p&gt;하지만 클래스 타입의 경우 상속이 가능하기 때문에 모든 저장 프로퍼티가 initialize 시점에 초기화되는 것을 보장해야합니다.&lt;/p&gt;

&lt;p&gt;구조체에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.init()&lt;/code&gt;과 같이 적어 다른 init을 호출할 수 있습니다. 이때 initializer 안에서만 init 호출이 가능합니다.&lt;/p&gt;

&lt;h4 id=&quot;활용-예시&quot;&gt;활용 예시&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;originX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;originY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;class-inheritance-and-initialization&quot;&gt;Class Inheritance and Initialization&lt;/h2&gt;

&lt;p&gt;부모 클래스로부터 상속받은 저장 프로퍼티를 포함한 모든 저장 프로퍼티는 initialization 과정에서 값이 할당되어야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;initializer-delegation-규칙-클래스-타입&quot;&gt;Initializer Delegation 규칙 (클래스 타입)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Designated init은 반드시 직전 부모 클래스의 designated init을 호출해야 한다. (자신이 가장 부모인 클래스면 예외)&lt;/li&gt;
  &lt;li&gt;convenience init은 반드시 같은 클래스의 init을 호출해야 한다.&lt;/li&gt;
  &lt;li&gt;convenience init은 최종적으로 반드시 designated init을 호출해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.swift.org/swift-book/_images/initializerDelegation02_2x.png&quot; alt=&quot;initializerDelegation02_2x&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 호출이 진행되며, 이러한 계층 구조를 띄고있기에 designated init을 “funnel” 포인트라고 합니다. (funnel: 굴뚝, 깔때기)&lt;/p&gt;

&lt;h2 id=&quot;two-phase-initialization&quot;&gt;Two-Phase Initialization&lt;/h2&gt;

&lt;p&gt;클래스의 초기화는 두 단계로 이루어집니다.&lt;/p&gt;

&lt;p&gt;1단계에서는 각 저장 프로퍼티에 초기 값이 할당됩니다.&lt;/p&gt;

&lt;p&gt;모든 저장 프로퍼티의 초기 상태가 결정되었다면, 두번째 단계로 진입합니다.&lt;/p&gt;

&lt;p&gt;두번째 단계에서는 인스턴스가 “준비”상태로 간주되기 전에 저장 프로퍼티를 customize할 수 있는 기회가 주어집니다.&lt;/p&gt;

&lt;p&gt;two-phase 초기화는 초기화 과정을 안전하게 해줌과 동시에 클래스 계층에 있는 각 클래스에게 완전한 유연성을 제공합니다.&lt;/p&gt;

&lt;p&gt;two-phase 초기화는 저장 프로퍼티가 초기화되기 전에 접근되는 것을 막을 수 있고, 또 다른 initializer로 인해 저장 프로퍼티에 의도와 다른 값이 세팅되는 것을 방지할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;compiler가-진행하는-safety-check&quot;&gt;compiler가 진행하는 Safety check&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Designated init은 반드시 모든 저장 프로퍼티를 super class의 init을 호출하기 전에 초기화 해야 합니다.
(object의 메모리 공간은 모든 저장 프로퍼티가 초기화된 상태에서 딱 한번만 측정되기 때문에)&lt;/li&gt;
  &lt;li&gt;Designated init은 상속받은 저장 프로퍼티의 값을 변경하기 전에 super class의 init을 호출해야 합니다. 만약 이 순서대로 하지 않으면 원하는 값을 designated init에서 할당하더라도 super class의 init이 뒤에 호출되므로 그 값이 다시 변경될 수 있습니다.&lt;/li&gt;
  &lt;li&gt;2번과 마찬가지의 이유로 convenience init은 어떤 값을 저장 프로퍼티에 할당하기 전에 designated init을 호출해야 합니다.&lt;/li&gt;
  &lt;li&gt;initializer는 1단계(two-phase 중 첫 단계)가 끝나기 전에 인스턴스 메서드를 호출할 수 없고, 인스턴스 프로퍼티의 값을 읽을 수  없습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;two-phase-진행-과정&quot;&gt;Two phase 진행 과정&lt;/h3&gt;

&lt;h4 id=&quot;phase-1&quot;&gt;Phase 1&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.swift.org/swift-book/_images/twoPhaseInitialization01_2x.png&quot; alt=&quot;../_images/twoPhaseInitialization01_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;designated/convenience init이 클래스에서 호출됩니다.&lt;/li&gt;
  &lt;li&gt;클래스의 새 인스턴스를 위한 메모리 공간이 할당됩니다. (아직 메모리 공간이 초기화된 것은 아닙니다.)&lt;/li&gt;
  &lt;li&gt;Designated initializer가 모든 저장 프로퍼티가 값을 가진 것을 확인하고 (해당 클래스의 것만, 부모 클래스의 것은 신경 X) 저장 프로퍼티의 메모리 공간을 initialize 합니다.&lt;/li&gt;
  &lt;li&gt;Designated initializer가 상위 클래스에게 hands off 하고 상위 클래스의 init을 호출하여 같은 작업을 진행합니다.&lt;/li&gt;
  &lt;li&gt;이 작업은 체인의 top에 도달할때까지 진행됩니다.&lt;/li&gt;
  &lt;li&gt;top 체인까지 도달했다면 마지막 클래스(최상위 부모 클래스)는 모든 저장 프로퍼티에 값이 들어간 것을 확인합니다. 인스턴스의 메모리 초기화 작업이 끝났다면 phase 1이 끝난 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;phase-2&quot;&gt;Phase 2&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.swift.org/swift-book/_images/twoPhaseInitialization02_2x.png&quot; alt=&quot;../_images/twoPhaseInitialization02_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;체인을 다시 타고 내려오면서 각 designated initializer는 인스턴스를 customize할 수 있는 기회를 부여받습니다. 이제 인스턴스는 self에 접근할 수 있으며 인스턴스 메서드를 호출할수도 있습니다.&lt;/li&gt;
  &lt;li&gt;최종적으로 convenience init이 customize의 기회를 부여받습니다. 이때 convenience init도 self를 사용할 수 있습니다. (당연하게도 convenience init을 통해 init하지 않았다면 이 과정은 생략됩니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;initializer-상속과-오버라이딩&quot;&gt;Initializer 상속과 오버라이딩&lt;/h2&gt;

&lt;p&gt;Swift는 상위클래스의 initializer를 default로 상속받지 않습니다. 이는 상위 클래스로부터 받은 간략한 init이 사용되는 것을 막습니다. (subclass가 복잡한 처리과정을 통해 init되어야 하는데 이를 위해 만든 init이 아닌 상위클래스로부터 상속받은 init을 사용해버리면 의도와 다른 무의미한 instance가 생성될 가능성이 있고, 이를 방지하는 차원)&lt;/p&gt;

&lt;p&gt;만약 서브클래스가 상위클래스와 같은 인터페이스의 init을 가지길 원한다면 Designated init의 경우 overriding을 통해 구현할 수 있습니다. 반면 상위 클래스의 Convenience init은 서브클래스가 직접 호출할 수 없으므로 overriding을 통해 구현하지 않습니다.&lt;/p&gt;

&lt;p&gt;공식문서에서는 asynchronous하게 동작하는 super class의 init에 대해서도 다루고 있습니다. phase2에 subclass가 superclass의 프로퍼티를 customize하지 않는다면 이제 super.init()을 호출할 수 있는데, 이때 superclass의 init이 asynchronous하게 동작한다면 super.init() 앞에 await 키워드를 명시적으로 써주기를 요구하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;automatic-initializer-inheritance&quot;&gt;Automatic Initializer Inheritance&lt;/h2&gt;

&lt;p&gt;서브클래스는 슈퍼클래스의 이니셜라이저를 디폴트로 상속받지 않지만 특정 상황이 맞아떨어진다면 automatic하게 상속받는 경우가 있습니다. 즉 서브클래스가 여러가지 시나리오에 대비하여 만들어진 이니셜라이저들을 모두 오버라이딩 할 필요가 없다는 것입니다.&lt;/p&gt;

&lt;p&gt;아래의 두가지 규칙을 만족시키면서 서브클래스에 추가된 새 프로퍼티들에 디폴트 값을 부여했다고 가정해봅시다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;만약 서브클래스가 designated initializer를 정의하지 않았다면, 슈퍼클래스의 designated initializer를 자동으로 상속받습니다.&lt;/li&gt;
  &lt;li&gt;만약 서브클래스가 모든 슈퍼클래스의 designated initializer를 구현 한다면 (super class의 모든 designated init을 오버라이딩 한다는 뜻, 규칙 1에 의해 상속받는 것도 구현으로 취급) 슈퍼클래스의 convenience init을 자동으로 상속받습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;자동-상속-예제-코드&quot;&gt;자동 상속 예제 코드&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Unnamed]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RecipeIngredient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Food&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 Food라는 클래스와 이를 상속받는 RecipeIngredient라는 클래스가 구현되어있습니다.&lt;/p&gt;

&lt;p&gt;여기서 눈여겨 봐야 할 부분은 RecipeIngredient의 override convenience init(name: String) 부분인데&lt;/p&gt;

&lt;p&gt;Food의 convenience init(unnamed: String)을 오버라이딩하는게 아닌것을 알아두어야 합니다.&lt;/p&gt;

&lt;p&gt;super class(Food)의 designated init인 init(name: String)을 override하고 있으며 단지 이것을 convenience init으로 사용하고 있기에 convenience init이라고 적혀있는 것입니다.&lt;/p&gt;

&lt;p&gt;designated init을 오버라이딩함과 동시에 이를 convenience init으로도 활용할 수 있다는 점이 인상 깊네요.&lt;/p&gt;

&lt;p&gt;이제 위에서 설명한 convenience init의 자동 상속에 대해 아래의 두 예시를 통해 살펴보겠습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220720162637.png&quot; alt=&quot;image-20220720162637957&quot; /&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220720162631.png&quot; alt=&quot;image-20220720162631734&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자동상속이 이루어진 예&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자동상속이 이루어지지 않은 예&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Convenience init의 자동상속이 이루어진 경우를 보면 모든 designated init이 오버라이딩되어 구현된 것을 확인할 수 있습니다. 반면 오른쪽의 경우에는 init(some: Int)가 오버라이딩 되지 않았으므로 convenience init이 자동 상속되지 않은 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;상속받은 convenience init은 슈퍼클래스의 convenience init과 똑같이 동작합니다. 하지만 delegate을 RecipeIngredien의 designated init에 한다는 것이 중요합니다. 이를 그림으로 나타내면 아래와 같게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.swift.org/swift-book/_images/initializersExample02_2x.png&quot; alt=&quot;../_images/initializersExample02_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;delegate을 어디에 한다는 말의 뜻이 이해하기 어려울 것 같아 아래의 코드 실행화면도 첨부합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220720170048.png&quot; alt=&quot;image-20220720170048957&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;a라는 인스턴스를 Food로부터 자동상속 받은 Food의 convenience init으로 초기화 하였음에도&lt;/p&gt;

&lt;p&gt;RecipeIngredient 클래스의 convenience init이 실행되면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;가 찍혀있음을 확인할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;required-initializers&quot;&gt;Required Initializers&lt;/h2&gt;

&lt;p&gt;Required Initializer는 모든 서브 클래스가 해당 init을 구현할 것을 강제합니다.&lt;/p&gt;

&lt;p&gt;만약 override를 하는 경우라도 override 키워드를 적지 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;클로저나-함수를-통한-프로퍼티-초기화&quot;&gt;클로저나 함수를 통한 프로퍼티 초기화&lt;/h2&gt;

&lt;p&gt;view 요소를 초기화하는 과정에서 정말 자주 쓰이는 부분입니다.&lt;/p&gt;

&lt;p&gt;자세한 설명보다는 예제 코드를 통해 살펴보시는것이 좋을 것 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Chessboard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;boardColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;temporaryBoard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isBlack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temporaryBoard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBlack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isBlack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBlack&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isBlack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBlack&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporaryBoard&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;squareIsBlackAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boardColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;boardColors 프로퍼티를 보면 Boolean 배열인데 이를 초기화하는 과정이 마치 클로저처럼 적혀있는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;클로저 반환값 유추가 아직 지원되고 있지 않기 때문에 (곧 지원 예정이라는 사실을 들은 적이 있네요)&lt;/p&gt;

&lt;p&gt;반드시 해당 타입을 명시한 뒤에 클로저를 통해 초기화해주어야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;Failable Initializer에 대한 설명의 경우 일반적으로 유추할 수 있는 내용이 많고 거의 사용되지 않으므로 필요한 경우 직접 공식문서를 참고해보시는게 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;이번 공부를 통해서 initializer가 어떤식으로 체인되어 올라가고, 또 왜 super.init()을 호출하기 전에 반드시 자신이 추가한 프로퍼티에 초기값을 꼭 넣어야 컴파일이 되는 것인지에 대해서도 이해할 수 있게 되었습니다.&lt;/p&gt;

&lt;p&gt;override convenience init을 보아도 super class의 convenience init을 override한 것이 아닌 designate init을 override 하였지만 convenience init으로 사용한다는 것도 알게 되었습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jul 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/swift/SwiftInits/</link>
        <guid isPermaLink="true">https://neph3779.github.io/swift/SwiftInits/</guid>
        
        <category>init</category>
        
        <category>required init</category>
        
        <category>convinience init</category>
        
        <category>override init</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>BFS 몇번에 걸쳐 이동했는지 count하는법</title>
        <description>&lt;h2 id=&quot;bfs-코드&quot;&gt;BFS 코드&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dayCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;addNeighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dayCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dayCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dayCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 &lt;a href=&quot;https://www.acmicpc.net/problem/7576&quot;&gt;백준 7576번 토마토 문제&lt;/a&gt;의 정답 코드 중 일부이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Neph3779/SwiftBOJ/blob/main/Class3/7576.swift&quot;&gt;정답코드 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;가장 핵심은 4번째 줄에서 while의 검사문으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!queue.isEmpty&lt;/code&gt; 가 아닌&lt;/p&gt;

&lt;p&gt;for문을 사용해서 &lt;strong&gt;현재 큐에 들어있는 원소의 수만큼만&lt;/strong&gt; 반복해주는 것이다.&lt;/p&gt;

&lt;p&gt;종종 쓸 일이 있는데 가끔 방법이 생각이 안날때가 있어서 블로그에 작성했다.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jul 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/swift/howToCountDaysInBFS/</link>
        <guid isPermaLink="true">https://neph3779.github.io/swift/howToCountDaysInBFS/</guid>
        
        <category>BFS</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Realm 트러블슈팅 (Realm accessed from incorrect thread)</title>
        <description>&lt;h2 id=&quot;트러블-발생-지점&quot;&gt;트러블 발생 지점&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20220711155613.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;65번째 줄에서 Realm에 접근하였고&lt;/p&gt;

&lt;p&gt;이 줄의 실행까지는 문제가 없는데&lt;/p&gt;

&lt;p&gt;66번째 줄부터 시작하는 main thread의 UI 업데이트 작업에서 오류가 발생했다.&lt;/p&gt;

&lt;p&gt;이유는 Realm accessed from incorrect thread인데 의문인 것은&lt;/p&gt;

&lt;p&gt;이 블록에서는 Realm에 접근하지 않는다는것.. (products라는 인스턴스가 보유한 내부 배열을 가지고 collectionView를 채웠기 때문에 Realm에는 다시 접근하지 않는 중)&lt;/p&gt;

&lt;p&gt;&lt;del&gt;문제 해결시에 다시 해결방법 및 문제였던 부분 작성예정&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제해결&quot;&gt;문제해결&lt;/h2&gt;

&lt;p&gt;가장 핵심은&lt;/p&gt;

&lt;p&gt;“같은 큐에 넣는다고 같은 쓰레드에 보내는 것이 아니다!” 였다.&lt;/p&gt;

&lt;p&gt;내가 맞닥뜨린 오류는 “서로 다른 쓰레드에서 같은 자원(Realm DB)에 접근했습니다.”라는 오류였는데&lt;/p&gt;

&lt;p&gt;이전에 잘못 생각한 부분은 rank update를 맡긴 큐도 global 큐이고&lt;/p&gt;

&lt;p&gt;products를 현재 자료에 맞게 업데이트 하는 부분도 global 큐에 보내서 했으니까 ok 아닌가? 였다.&lt;/p&gt;

&lt;p&gt;위에도 적었듯 같은 큐(글로벌 큐)에 넣는다고 해결되는 것이 아닌 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;쓰레드&lt;/code&gt;에 넣어야 했는데&lt;/p&gt;

&lt;p&gt;이건 같은 큐에 뒤이어 넣는다고 되는 것이 아니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;65번째 줄이 정상적으로 넘어가고 66번째 줄 실행시에 오류가 나던 것은&lt;/p&gt;

&lt;p&gt;reloadData때문이 아닌 Realm가 뒤늦게 DB로의 중복접근을 캐치하고 오류를 뿜어주었기 때문에&lt;/p&gt;

&lt;p&gt;reloadData를 하면 Realm 오류가 나는 것처럼 보였던 것이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오랜만에 다시 GCD, global Queue등에 대해 복습해볼 수 있는 좋은 기회가 되었다.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jul 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/swift/RealmTroubleShooting/</link>
        <guid isPermaLink="true">https://neph3779.github.io/swift/RealmTroubleShooting/</guid>
        
        <category>Realm</category>
        
        <category>Thread</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>[iOS] query에 띄어쓰기가 있을때 처리하는 방법</title>
        <description>&lt;p&gt;보내야 하는 Query에 띄어쓰기가 있는 경우 이를 해석하지 못해 오류가 발생하곤 합니다.&lt;/p&gt;

&lt;p&gt;이때는 percentEncodedQuery로 바꿔주어야 합니다. (인터넷 링크를 복사해 붙여넣으면 한글은 영어로, 띄어쓰기는 %로 바뀌는 것을 떠올리면 됩니다.)&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YoutubeCrawler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;urlComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;urlComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;youtube.com&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;urlComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/results&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlComponents&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    
     &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchYoutubeReviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;searchQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;percentEncodedQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchQuery&lt;/span&gt;
       				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addingPercentEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withAllowedCharacters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlQueryAllowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;urlComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentEncodedQueryItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;URLQueryItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;search_query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                               &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentEncodedQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 URLComponents를 통해 url의 요소들을 정의해주고&lt;/p&gt;

&lt;p&gt;query를 기존에 urlComponents.queryItems가 아닌 urlComponents.percentEncodedQueryItems에&lt;/p&gt;

&lt;p&gt;query를 percentEncoding하여 담아줍니다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addingPercentEncoding(withAllowedCharacters: CharacterSet)&lt;/code&gt;은 String의 인스턴스 메서드입니다.&lt;/p&gt;

</description>
        <pubDate>Sat, 09 Jul 2022 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/URLWithPercentage/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/URLWithPercentage/</guid>
        
        <category>percentEncodedQueryItems</category>
        
        <category>URLComponents</category>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
