<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neph's Blog</title>
    <description>Write code with my soul.</description>
    <link>https://neph3779.github.io/</link>
    <atom:link href="https://neph3779.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 04 Jul 2021 17:49:49 +0900</pubDate>
    <lastBuildDate>Sun, 04 Jul 2021 17:49:49 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>UIWindow의 역할</title>
        <description>&lt;h2 id=&quot;uiwindow란&quot;&gt;UIWindow란?&lt;/h2&gt;

&lt;p&gt;UIWindow는 UIView의 하위 클래스로 앱의 배경과 이벤트를 View로 전달하는 객체이다.&lt;/p&gt;

&lt;p&gt;눈에 보이는 내용은 없지만 앱의 View에 기본 컨테이너를 제공하여 하며 rootViewController에서 관리하는 하나 이상의 View를 보여주는 역할을 한다.&lt;/p&gt;

&lt;p&gt;또한 터치 이벤트를 View와 다른 어플리케이션 객체들에게 전달하는데, 터치 이벤트는 발생한 window로 전달되지만, 좌표값이 없는 이벤트는 키보드 이벤트, 터치와 관련되지 않은 이벤트를 받는 window인 key window로 전달된다.&lt;/p&gt;

&lt;p&gt;key window는 하나의 window로만 구성되며, isKeyWindow 프로퍼티를 이용해 key window인지 아닌지를 알 수 있다. 대부분 app의 메인 windonw가 key window이다.&lt;/p&gt;

&lt;p&gt;iOS 12 까지는 하나의 window만 사용할 수 있었지만 iOS 13부터는 Scene Delegate을 활용해 여러개의 window들을 사용할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;Window는 foreground일 때뿐만 아니라 background일 때도 사용해야한다. foreground일때는 makeKeyAndVisible() 메서드를 통해 window를 보여주고 해당 window를 key window로 만들어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210704150620.png&quot; alt=&quot;?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FGqjjH%2FbtqNF9btI9V%2FOnIOQkbfrEwDZEEu7m80Gk%2Fimg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;window-객체를-만드는-경우--방법&quot;&gt;window 객체를 만드는 경우 &amp;amp; 방법&lt;/h2&gt;

&lt;h3 id=&quot;만드는-경우&quot;&gt;만드는 경우&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스토리보드를 사용하지 않는 경우에 main window를 직접 생성해야 한다.&lt;/li&gt;
  &lt;li&gt;외부 디스플레이를 사용하는 경우 새로운 window를 만들어서 보여줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;만드는-방법&quot;&gt;만드는 방법&lt;/h3&gt;

&lt;p&gt;메인 window 객체는 코드와 인터페이스 빌더 중 하나로 생성할 수 있다. 이 때 lazily create을 통해 필요할 때 생성되도록 해야한다.&lt;/p&gt;

&lt;p&gt;AppDelegate나 SceneDelegate에서 UIWindow의 instance(window)를 프로퍼티로 넣어준 뒤 window의 rootViewController를 설정해주면 된다.&lt;/p&gt;

&lt;h2 id=&quot;uiwindow를-상속받아-사용하는-경우&quot;&gt;UIWindow를 상속받아 사용하는 경우&lt;/h2&gt;

&lt;p&gt;매우 드문일이지만 위의 메서드를 재정의해서 사용하고 싶은 경우 UIWindow의 subclass를 제작할 수 있다. becomeKey()나 resignKey()에 추가적인 동작을 명시하는 것이 대부분이다.&lt;/p&gt;

&lt;h4 id=&quot;참고한-링크&quot;&gt;참고한 링크&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;https://wnstkdyu.github.io/2017/12/29/uiwindow/&lt;/li&gt;
  &lt;li&gt;https://zeddios.tistory.com/283&lt;/li&gt;
  &lt;li&gt;https://developer.apple.com/documentation/uikit/uiwindow&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/WhatIsUIWindow/</link>
        <guid isPermaLink="true">https://neph3779.github.io/WhatIsUIWindow/</guid>
        
        
      </item>
    
      <item>
        <title>하나의 ViewController에 여러개의 TableView 쓰기</title>
        <description>&lt;h2 id=&quot;table-view&quot;&gt;Table View&lt;/h2&gt;

&lt;p&gt;우선 테이블뷰를 사용하기 위해서는 아래의 작업들이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cell 등록 (register)&lt;/li&gt;
  &lt;li&gt;datasource, delegate 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cell register는 각각의 tableView 마다 register를 해주면 되기에 문제가 되지 않는다. (스토리보드를 사용한다면 cell을 자동으로 등록해주기 때문에 register cell을 직접적으로 해주지 않아도 된다.)&lt;/p&gt;

&lt;p&gt;하나의 뷰 컨트롤러에서 여러개의 tableView를 쓸 때 가장 문제인건 datasource와 delegate 메서드를 공유한다는 점이다. 이를 해결하기 위해선 아래와 같이 메서드 내에서의 분기를 통해 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 04 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/UseMultipleTableViewInOneViewController/</link>
        <guid isPermaLink="true">https://neph3779.github.io/UseMultipleTableViewInOneViewController/</guid>
        
        
      </item>
    
      <item>
        <title>스토리보드의 장단점</title>
        <description>&lt;h2 id=&quot;스토리보드의-장점&quot;&gt;스토리보드의 장점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빠른 초기화&lt;/li&gt;
  &lt;li&gt;시각화&lt;/li&gt;
  &lt;li&gt;낮은 진입장벽&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개발 환경에서 화면이 직접 눈에 보인다는게 최대 장점이다. 아무리 가독성 좋은 코드로 UI를 만든다한들 직접 실행해보지 않고도 화면을 정확하게 떠올리는 것은 쉽지않다. 하지만 스토리보드를 통해서는 이것이 가능하다.&lt;/p&gt;

&lt;p&gt;또한 View를 만드는 시간이 적게 걸린다고 한다. (사실 이건 잘 모르겠다. 큰 차이는 안날 것 같은데..)&lt;/p&gt;

&lt;p&gt;그리고 마지막 장점은 진입장벽이 낮다는 점이다! 사실 나도 iOS 개발을 처음 시작하게 된 계기가 스토리보드를 보고서였다. 저런 것도 있구나 싶었다. (C만 해봤던 나에겐 신세계였다..)&lt;/p&gt;

&lt;h2 id=&quot;스토리보드의-단점&quot;&gt;스토리보드의 단점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;긴 로딩시간&lt;/li&gt;
  &lt;li&gt;유지보수, 재사용의 어려움&lt;/li&gt;
  &lt;li&gt;Merge Conflict 해결 매우 어려움&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앱이 커지다보면 스토리보드의 로딩시간이 매우~ 길어진다. 단순히 로딩시간을 기다리면 해결되는 문제라고 하기엔 개발자에게 있어서 작업효율과 시간이란 중요한 것이기 때문에 무시할 수 없는 부분 중 하나이다.&lt;/p&gt;

&lt;p&gt;또한 유지보수, 재사용이 매우 어렵다. 눈에 보이지 않는 수많은 constraint들과 코드가 아닌 스토리보드에서 지정해준 속성값들을 수정하기란 매우 어려운 일이다.&lt;/p&gt;

&lt;p&gt;게다가 한 스토리보드 파일을 두 명 이상이 작업하다 conflict가 발생하면 xml파일로 이루어진 스토리보드 파일을 손봐야하는데 이보다 끔찍한건 있을 수 없다.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/StoryboardProsAndCons/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/StoryboardProsAndCons/</guid>
        
        <category>storyboard</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Cocoa Framework</title>
        <description>&lt;h2 id=&quot;프레임워크는-vs-라이브러리&quot;&gt;프레임워크는 vs 라이브러리&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;“소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 일련의 협업화된 형태로 클래스들을 제공하는 것”&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;by Ralph Johnson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프레임워크는는 어떤 틀이 결정되어있고 그 틀에 따라 개발을 진행하게 되지만 라이브러리는 원하는 부분을 선택해서 사용한다는 느낌이 강하다.&lt;/p&gt;

&lt;p&gt;라이브러리는 필요한 상황에서 메서드를 뽑아쓸 수 있도록 구성되어있지만 프레임워크는는 개발자가 자신의 어플리케이션을 작성할 수 있도록 미완성인 형태로도 정의되어있다.&lt;/p&gt;

&lt;p&gt;프레임워크는 뼈대, 라이브러리는 살 정도로 정리할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;cocoa-framework&quot;&gt;Cocoa Framework&lt;/h2&gt;

&lt;p&gt;코코아 프레임워크는 다음과 같이 구성되어있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210704115012.png&quot; alt=&quot;?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FYM2lL%2Fbtqt848k34Z%2FsTK8MVB0fa6YMpeKzYovc1%2Fimg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하위 계층으로 갈수록 하드웨어에 가깝고 상위 계층으로 갈수록 유저에게 가깝다.&lt;/p&gt;

&lt;h4 id=&quot;cocoa&quot;&gt;Cocoa&lt;/h4&gt;

&lt;p&gt;자신보다 하위 계층의 프레임워크를 사용하여 어플리케이션을 직접 구현하는 프레임워크&lt;/p&gt;

&lt;p&gt;UIKit, GameKit, MapKit 등이 속해있다.&lt;/p&gt;

&lt;h4 id=&quot;media&quot;&gt;Media&lt;/h4&gt;

&lt;p&gt;상위 계층이 코코아 터치에 그래픽, 멀티미디어 관련 서비스를 제공한다.&lt;/p&gt;

&lt;p&gt;Core Graphics, Core Text, Core Audio, Core Animation, AVFoundation 등이 속해있다.&lt;/p&gt;

&lt;h4 id=&quot;core-services&quot;&gt;Core Services&lt;/h4&gt;

&lt;p&gt;문자열 처리, 데이터 집합 관리, 네트워크 통신, 주소록 관리, 환경 설정 등 핵심적인 서비스들을 제공한다. 또한 GPS, 나침반, 가속도 센서, 자이로스코프 센서와 같이 디바이스의 하드웨어적 특성에 기반한 서비스도 제공한다.&lt;/p&gt;

&lt;p&gt;Foundation, Core Foundation, Core Location, Core Motion, Core Animation, Core Data 등이 속해있다.&lt;/p&gt;

&lt;h4 id=&quot;core-os&quot;&gt;Core OS&lt;/h4&gt;

&lt;p&gt;커널, 파일 시스템, 네트워크, 보안, 전원 관리, 디바이스 드라이버 등이 포함되어있다.&lt;/p&gt;

&lt;p&gt;iOS 운영체제의 핵심이 되는 부분이다.&lt;/p&gt;

&lt;h2 id=&quot;cocoa-touch-framework-cocoa-framework&quot;&gt;Cocoa Touch Framework (Cocoa Framework)&lt;/h2&gt;

&lt;p&gt;코코아 터치 프레임워크은 다음과 같이 구성되어있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210704110700.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코코아 터치 프레임워크는 앱 개발을 위해 사용하는 통합적인 것들을 칭하는 말이다. 여기에는 흔히 사용되는 UIKit과 Foundation이 포함되어있다.&lt;/p&gt;

&lt;p&gt;Cocoa Framework의 경우에는 UIKit이 아닌 Appkit이 들어가있는데, 이는 MacOS에서 구동되는 앱을 개발하기위한 프레임워크이다.&lt;/p&gt;

&lt;h2 id=&quot;foundation-framework&quot;&gt;Foundation Framework&lt;/h2&gt;

&lt;p&gt;Foundation Framework에는 원시 자료형인 String / Int, 자료구조, 네트워크 통신, 파일 관리 등 기본적인 프로그램의 중심이 되는 것들이 들어있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Objective-C의 자료형과는 별개로 Swift의 기본 자료형이 존재하기 때문에 Foundation을 Import하지 않더라도 Int, String등을 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;NS는 NextStep의 약자이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;uikit-framework&quot;&gt;UIKit Framework&lt;/h2&gt;

&lt;p&gt;UIKit은 화면에 표시되는 내용들, 사용자와의 인터렉션, 화면의 구조의 관리 등을 담당한다. 스크린에 View를 출력하는 Window, 화면을 그리는 View, Window와 View를 연결하는 ViewController 등이 속해있다.&lt;/p&gt;

&lt;p&gt;추가로 UIKit은 Foundation Framework를 내부적으로 import하고 있기 때문에 UIKit만 import해줘도 Foundation은 자동으로 딸려온다.&lt;/p&gt;

&lt;h5 id=&quot;uikit-계층도&quot;&gt;UIKit 계층도&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210704112245.png&quot; alt=&quot;UIKit&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cocoa-이름의-유래&quot;&gt;Cocoa.. 이름의 유래&lt;/h2&gt;

&lt;p&gt;유명한 언어인 Java는 커피 원산지에서 이름을 따왔다. 이와 유사한 이미지를 줌과 동시에 어린아이도 할 수 있다는 뉘앙스를 풍기기 위해 “코코아”라는 단어를 사용하게 되었다고 한다.&lt;/p&gt;

&lt;h4 id=&quot;참고한-링크&quot;&gt;참고한 링크&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://babbab2.tistory.com/51&quot;&gt;믿고보는 소들이의 Cocoa 정리글&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://etst.tistory.com/78&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jokergt.tistory.com/89&quot;&gt;Framework vs Library 정리(강추)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://velog.io/@wan088/iOS-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-CocoaTouch-Foundation-UIkit-sjjzdqmte4&lt;/li&gt;
  &lt;li&gt;https://apple.fandom.com/wiki/Cocoa_(API)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 04 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/CocoaFramework/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/CocoaFramework/</guid>
        
        <category>Cocoa</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Strong, Weak에 대해 알아보자</title>
        <description>&lt;h2 id=&quot;reference-count&quot;&gt;Reference Count&lt;/h2&gt;

&lt;p&gt;Strong과 Weak에 대해 알아보려면 우선 Reference Count에 대한 지식이 있어야한다.&lt;/p&gt;

&lt;p&gt;Swift에서는 Reference Counting을 통해 인스턴스가 살아있음을 보장한다. Reference Count가 올라가 있다는 것은 이것을 사용하고 있는 다른 인스턴스가 있다는 것이고, 이런 경우에 메모리에서 해제하면 안된다.&lt;/p&gt;

&lt;p&gt;이는 ARC를 통해 자동으로 관리되며 프로그래머는 Retain Cycle (데드락)이 생기지 않도록 주의해서 코드를 작성해야한다.&lt;/p&gt;

&lt;h2 id=&quot;strong-참조&quot;&gt;Strong 참조&lt;/h2&gt;

&lt;p&gt;일반적으로 참조하는 방식이 strong 참조방식이다.&lt;/p&gt;

&lt;p&gt;해당 인스턴스의 소유권을 가지며, reference count를 증가시키는 방식으로 값을 지정하는 시점에 retain되고 참조가 종료되는 시점에 release 된다.&lt;/p&gt;

&lt;p&gt;참조를 종료하지 않은채로 놔둔다면 메모리 누수가 발생하게 되는데 이를 영원히 해제할 수 없는 경우도 발생한다.&lt;/p&gt;

&lt;h2 id=&quot;weak-참조&quot;&gt;Weak 참조&lt;/h2&gt;

&lt;p&gt;해당 인스턴스의 소유권을 가지지 않고 주소값만을 가지고 있다. 참조하는 인스턴스의 retain count를 증가시키지 않으며 release를 하지도 않는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210704154353.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림처럼 서로가 서로를 약하게 참조하는 것들만 남아있다면 메모리에서 해제될 것이다. (retain count가 0이 되면 메모리에서 해제된다는 말을 풀어서 쓴 것)&lt;/p&gt;

&lt;p&gt;이렇게 retain count의 걱정 없이 안전하게 참조를 할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/AboutWeakAndStrong/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/AboutWeakAndStrong/</guid>
        
        <category>strong</category>
        
        <category>weak</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>inActive 상태란 무엇일까?</title>
        <description>&lt;h2 id=&quot;inactive-상태란&quot;&gt;inActive 상태란?&lt;/h2&gt;

&lt;p&gt;앱의 생명주기는 크게 아래와 같이 나뉜다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;not running (unattached)&lt;/li&gt;
  &lt;li&gt;foreground
    &lt;ol&gt;
      &lt;li&gt;inActive&lt;/li&gt;
      &lt;li&gt;active&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;background&lt;/li&gt;
  &lt;li&gt;Suspended&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;not running은 말 그대로 앱이 실행중이지 않은 상태이며&lt;/p&gt;

&lt;p&gt;앱 실행시 foreground 상태로 진입한다 (background 상태에서도 진입 가능)&lt;/p&gt;

&lt;p&gt;이 때 active 상태로 가기 전 inActive상태를 거치게 된다.&lt;/p&gt;

&lt;p&gt;Suspended 상태는 메모리의 공간확보 문제로 iOS가 임의로 메모리에서 해제시키는 상태를 말한다.&lt;/p&gt;

&lt;p&gt;이 때 앱은 not running 상태로 돌아간다.&lt;/p&gt;

&lt;p&gt;run loop를 돌고 있으면 active&lt;/p&gt;

&lt;p&gt;그냥 아무것도 안하고 있으면 inactive&lt;/p&gt;

&lt;p&gt;background로 가는 경우가 여러가지 있음 (실행되던 앱이 …)&lt;/p&gt;

&lt;p&gt;이런 경우들이 바로&lt;/p&gt;

&lt;p&gt;status bar 내리거나&lt;/p&gt;

&lt;p&gt;전화오거나.. interrupt, launch screen 에서 inactive가 될 수 있다.&lt;/p&gt;

&lt;p&gt;화면 끄면 inActive 거쳐서 background로 감&lt;/p&gt;

&lt;p&gt;app switcher상태일때는 inActive&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatIsInActive/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatIsInActive/</guid>
        
        <category>app life cycle</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>ARC는 무엇일까?</title>
        <description>&lt;h2 id=&quot;arc의-뜻&quot;&gt;ARC의 뜻&lt;/h2&gt;

&lt;p&gt;Automatic Retain Count의 약자인 ARC는 자동으로 참조카운트를 계산해주는 swift의 기능을 뜻한다.&lt;/p&gt;

&lt;p&gt;이름을 통해 유추할 수 있듯 기존에는 자동으로 참조 카운트를 계산하여 메모리로부터 해제해주지 않았기에 프로그래머가 직접 사용을 끝마친 포인터를 메모리에서 해제시켜줘야 했었다.&lt;/p&gt;

&lt;p&gt;하지만 ARC를 통해 이제는 참조를 획득하는 과정과 메모리에서 해제하는 과정이 자동으로 이루어진다. (뒷단에서 벌어지는 일이기에 눈에는 보이지 않지만 필요이상의 작업이 이루어지고 있을수도 있다. 이를 방지하기 위해 참조에 대한 이해를 바탕으로 코드를 작성해야 한다.)&lt;/p&gt;

&lt;h2 id=&quot;retain-count-왜-필요할까&quot;&gt;Retain Count 왜 필요할까?&lt;/h2&gt;

&lt;p&gt;포인터는 흔히 주소에 비유한다. 어떤 음식점의 주소를 미리 알고 있던 사람이 음식점에 가기 위해선 음식점의 주소로 이동하면 된다. 근데 만약 음식점이 사라져있다면 곤란할 것이다.&lt;/p&gt;

&lt;p&gt;프로그래밍에서도 마찬가지이다 주소값을 통해 접근한 위치에 쓰레기값이 존재하면 언어에 따라 오류를 내는 언어도 있고 쓰레기값을 그대로 가져오는 언어도 있을 것이다. 두 경우 모두 프로그래머의 의도에 벗어난 결과라는 것을 쉽게 알 수 있다.&lt;/p&gt;

&lt;p&gt;이런 상황을 방지하기 위해서 Retain Count라는 것이 필요하다. 음식점의 주소를 알고있는 사람이 있다면 그 사람의 수를 세어서 음식점이 보관한다. 만약 음식점의 주소를 알고있는 사람의 수가 0보다 크면 음식점을 계속 유지시키는 개념이다.&lt;/p&gt;

&lt;p&gt;힙 영역에 존재하는 값이 필요한 동안에 반드시 사라지지 않는 것을 보장해준다고 생각하면 이해가 쉬울 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;retain-cycle은-뭘까&quot;&gt;Retain Cycle은 뭘까?&lt;/h2&gt;

&lt;p&gt;Retain Count를 통해 “필요한 동안 반드시” 값이 살아있음을 보장받을 수 있단 사실을 알게되었다. 하지만 그 반대의 경우는 어떠할까? “(메모리 공간확보를 위해서) 이제 없어져야 하는” 값이 반드시 적절한 시점에 메모리에서 해제될 것이라는 보장은 하지 못했다. 이런 상황을 메모리 누수가 발생했다 말하며 프로그래머로서 이런 상황을 피해야하는 것이 당연하다.&lt;/p&gt;

&lt;p&gt;Retain Cycle을 발생시키는 경우에 대해서 더 자세히 알고싶다면 &lt;a href=&quot;https://github.com/godrm/RetainCycleApp&quot;&gt;이 레포지토리&lt;/a&gt;를 참고해보면 좋을 것 같다.&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatIsARC/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatIsARC/</guid>
        
        <category>ARC</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[Auto Layout] Hugging vs Resistance</title>
        <description>&lt;h2 id=&quot;hugging-vs-resistance&quot;&gt;Hugging vs Resistance&lt;/h2&gt;

&lt;p&gt;hugging은 말 그대로 안고있으려는 힘이다. 조금 덧붙이자면 더이상 늘어나지 않으려는 힘을 hugging이라고 한다. stackView의 distrbution 속성이 fill일 경우 내부의 요소들은 stackView 안에서 멋대로 늘어난다. 이 때 hugging priority가 높다면 늘어나지 않고 intrinsic size를 유지하려하고, 낮다면 늘어난다.&lt;/p&gt;

&lt;p&gt;resistance는 눌리지 않으려는 힘이다. 화면에 담을 수 없는 크기의 요소들을 우겨넣으면 어떤 요소는 필연적으로 줄어들거나 가려져야한다. 이 때 resistance priority가 낮은 요소부터 줄어들거나 가려지기 시작한다.&lt;/p&gt;

</description>
        <pubDate>Tue, 22 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/HuggingVsResistance/</link>
        <guid isPermaLink="true">https://neph3779.github.io/HuggingVsResistance/</guid>
        
        
      </item>
    
      <item>
        <title>Delegates와 Notification 방식의 차이</title>
        <description>&lt;h2 id=&quot;delegate-vs-notification&quot;&gt;Delegate vs Notification&lt;/h2&gt;

&lt;p&gt;앱에서 발생한 이벤트가 현재 화면이 아닌 다른 화면까지 영향을 주어야할 때 Delegate과 Notification 중 선택해서 사용하는 것이 대부분이다. (외부 라이브러리의 도움은 받지 않는다고 가정)&lt;/p&gt;

&lt;p&gt;Delegate와 Notification 방식은 결과는 같지만 그 과정이 조금 다르다. 오늘은 이 두가지 방법의 공통점과 차이점에 대해 공부해보았다.&lt;/p&gt;

&lt;h2 id=&quot;공통점&quot;&gt;공통점&lt;/h2&gt;

&lt;p&gt;Delegate, Notification 모두 어떤 이벤트를 다른 화면에 전달할 수 있다는 기능을 가진다. Delegate 패턴은 다른 객체의 인스턴스를 내부적으로 보유하여 그 인스턴스를 활용하는 방식으로 운용되며, Notification은 어떤 객체를 Observing하여 그 객체의 변화에 따라 Observer들이 이벤트를 받아 처리할 수 있는 방식으로 운용된다.&lt;/p&gt;

&lt;p&gt;일반적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeDelegate&lt;/code&gt;과 같은 꼴로 쓰이는 delegate은 전자의 경우라면 SomeDelegate을 가진 객체는 Some의 이벤트를 전달받아 이벤트를 처리하는 역할을 한다. 외부에 있는 Some 객체에서 접근할 수 없는 내부 요소의 수정, 이벤트의 시작이 이루어지는 경우 보통 사용한다.&lt;/p&gt;

&lt;p&gt;Notification의 경우에는 어떤 값의 변화에 따라 어떤 이벤트 (프로퍼티의 변화, 함수의 trigger)가 발생해야할 때 이를 observe 하고 있다가 실행하는 구조이다.&lt;/p&gt;

&lt;p&gt;두 방식 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;값의 변화&lt;/code&gt;를 포착하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이벤트&lt;/code&gt;를 발생시킨다는 공통점을 가지고 있다.&lt;/p&gt;

&lt;h2 id=&quot;차이점&quot;&gt;차이점&lt;/h2&gt;

&lt;p&gt;가장 큰 차이점은 Notification과 다르게 Delegate의 경우에는 수신자가 발신자의 정보를 알고 있어야한다는 것이다.&lt;/p&gt;

&lt;p&gt;SomeDelegate에서 SomeDelegate을 가진 객체는 SomeDelegate protocol의 메서드로 이벤트가 발생했을 때 처리해줄 수 있는 메서드를 요구함으로써 SomeDelegate을 가진 객체가 이벤트를 처리할 수 있도록 해준다.&lt;/p&gt;

&lt;p&gt;즉, SomeDelegate protocol을 제작할 때 메서드의 틀을 미리 잡아놓아야하며 SomeDelegate이라는 변수를 이벤트 처리 담당 객체가 들고 있어야 한다. 하지만 Notification의 경우에는 이 과정이 무의미하다. 단순히 어떤 값의 변화를 포착하여 그에 맞는 이벤트를 발생시켜주면 된다.&lt;/p&gt;

&lt;p&gt;장점으로도 보이는 이 특징은 양날의 검과 같다. Delegate을 사용하여 설계하지 않고 Notification만 가지고 설계를 했다면 다른 사람이 코드를 유지보수할 때 이 Notification을 누가 Subscribe하고 있는지 알기가 어렵다. 반면 Delegate으로 설계를 했다면 해당 Delegate의 이름, 프로토콜의 메서드 등을 통해 어떤 과정에 의해 이벤트 처리 로직이 돌아가는지 파악하기 한결 수월하다.&lt;/p&gt;

</description>
        <pubDate>Tue, 22 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/DelegateVsNotification/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/DelegateVsNotification/</guid>
        
        <category>Delegate</category>
        
        <category>Notification</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[#16] File System-2</title>
        <description>&lt;h2 id=&quot;페이지-캐시-버퍼-캐시&quot;&gt;페이지 캐시, 버퍼 캐시&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606195907.png&quot; alt=&quot;image-20210606195905344&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606195939.png&quot; alt=&quot;image-20210606195936242&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지-캐시&quot;&gt;페이지 캐시&lt;/h3&gt;

&lt;p&gt;스왑 영역에 있는가? 아닌가? 를 기준으로 캐싱 됨/안됨을 구분하는 방식&lt;/p&gt;

&lt;p&gt;페이지 캐시의 단위: 페이지의 크기 (4Kb)&lt;/p&gt;

&lt;h3 id=&quot;버퍼-캐시&quot;&gt;버퍼 캐시&lt;/h3&gt;

&lt;p&gt;파일 데이터가 파일 저장소에 저장되어있는가? 아니면 운영체제의 버퍼 캐시에 올라와 있는가? 를 기준으로 캐싱 됨/안됨을 구분하는 방식&lt;/p&gt;

&lt;p&gt;버퍼 캐시의 단위: 논리적인 블록 (섹터)의 크기 (512b, disk I/O 단위)&lt;/p&gt;

&lt;h3 id=&quot;유니파이드-버퍼-캐시&quot;&gt;유니파이드 버퍼 캐시&lt;/h3&gt;

&lt;p&gt;페이지 캐시와 버퍼 캐시의 구분 없이 똑같이 페이지 단위로 관리하면서&lt;/p&gt;

&lt;p&gt;필요에 따라 페이지 캐시의 용도, 버퍼 캐시의 용도로 바꿔가며 사용하는 방식&lt;/p&gt;

&lt;h3 id=&quot;memory-mapped-io&quot;&gt;Memory-Mapped I/O&lt;/h3&gt;

&lt;p&gt;프로세스의 주소 공간 중 일부를 파일에 mapping 해두어서 파일 입출력을 메모리 접근 연산을 통해 실행할 수 있는 방식&lt;/p&gt;

&lt;h2 id=&quot;unified-buffer-cache-전과-후&quot;&gt;Unified Buffer Cache 전과 후&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606200600.png&quot; alt=&quot;image-20210606200557293&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기존-방식&quot;&gt;기존 방식&lt;/h3&gt;

&lt;p&gt;버퍼 캐시에 요청한 파일이 있으면 복사를 통해 전달, 없으면 read/write 시스템 콜을 이용해 디스크 파일 시스템으로부터 읽어와서 사용자 프로그램에 전달&lt;/p&gt;

&lt;p&gt;memory mapped&lt;/p&gt;

&lt;p&gt;자신의 주소공간 중 일부를 파일에 mapping해놓음&lt;/p&gt;

&lt;p&gt;디스크에 있는 파일을 버퍼 캐시에 읽어오고 그 내용을 페이지 캐시(메모리 영역)에 복사함&lt;/p&gt;

&lt;p&gt;이 이후에는 운영체제 간섭 없이 메모리 접근만을 통해 읽고 쓰기가 가능해짐&lt;/p&gt;

&lt;h3 id=&quot;유니파이드-버퍼캐시&quot;&gt;유니파이드 버퍼캐시&lt;/h3&gt;

&lt;p&gt;read write 시스템 콜을 하는 것은 기존과 같음&lt;/p&gt;

&lt;p&gt;요청한게 이미 메모리에 있으면 그냥 전달해주고 없으면 읽어와서 전달함&lt;/p&gt;

&lt;p&gt;주소 영역 중 일부를 파일에다 매핑하는 것 이후로는 사용자 프로그램의 주소 영역에 페이지 캐시가 매핑이 됨&lt;/p&gt;

&lt;p&gt;(페이지 캐시 자체가 사용자 프로세스의 주소 영역에 있음)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606201758.png&quot; alt=&quot;image-20210606201755182&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코드 부분은 read only이기 때문에 메모리에 올라갔다가 쫓겨날때는 swap 영역에 가지 않고 파일 시스템에 파일 형태로만 존재함&lt;/p&gt;

&lt;p&gt;code영역에 접근하다 page fault 발생시 swap area로 내려가는게 아니라 file system에 가서 가져와야 함&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606202650.png&quot; alt=&quot;image-20210606202647047&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 데이터를 자신의 주소공간 중 일부에 mapping하여 운영체제의 도움없이 바로바로 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;여기서 memory mapped I/O를 사용하면 메모리 상에서 읽고 쓰는 것도 가능해진다.&lt;/p&gt;

&lt;h2 id=&quot;disk-structure--management&quot;&gt;Disk Structure &amp;amp; Management&lt;/h2&gt;

&lt;h3 id=&quot;logical-block&quot;&gt;logical block&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;디스크의 외부에서 보는 디스크의 단위 정보 공간&lt;/li&gt;
  &lt;li&gt;주소를 가진 1차원 배열처럼 취급&lt;/li&gt;
  &lt;li&gt;정보를 전송하는 최소 단위&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sector&quot;&gt;Sector&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Logical block이 물리적 디스크에 매핑된 위치&lt;/li&gt;
  &lt;li&gt;Sector 0은 최외곽 실린더의 첫 트랙에 있는 첫 번째 sector (부팅 정보가 들어있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disk-management&quot;&gt;Disk Management&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606203117.png&quot; alt=&quot;image-20210606203114765&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;physical formatting&lt;/strong&gt; : 디스크를 섹터 단위로 나누는 과정&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;header, trailer&lt;/strong&gt; : error correction code, 주소 매핑을 위한 sector번호 등의 metadata의 역할을 하는 것들이 저장되는 곳&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partitioning&lt;/strong&gt; : 물리적 디스크를 논리적 디스크 여러개로 나누는 작업&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;logical formatting&lt;/strong&gt; : 파일 시스템을 만드는 과정&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;booting&lt;/strong&gt; : 메모리 영역 중 전원이 나가도 내용이 유지되는 ROM에 loader라는 부팅을 위한 내용이 저장해놓음, 이후 boot block을 이용해 boot&lt;/p&gt;

&lt;h2 id=&quot;disk-scheduling&quot;&gt;Disk Scheduling&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606203651.png&quot; alt=&quot;image-20210606203638344&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;접근시간의-구성&quot;&gt;접근시간의 구성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;탐색시간 (이것을 최소화 하는 것이 목적. 회전지연시간, 전송시간은 작을뿐더러 운영체제가 개입하기 어려움)&lt;/li&gt;
  &lt;li&gt;회전지연시간&lt;/li&gt;
  &lt;li&gt;전송시간&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disk bandwidth&lt;/strong&gt; : 단위 시간 당 전송되는 데이터의 양&lt;/p&gt;

&lt;h3 id=&quot;알고리즘의-종류&quot;&gt;알고리즘의 종류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FCFS&lt;/p&gt;

    &lt;p&gt;말그대로 First come first served&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSTF&lt;/p&gt;

    &lt;p&gt;Shortest seek time first로 가장 빨리 갈 수 있는 위치부터 차례대로 탐색&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SCAN&lt;/p&gt;

    &lt;p&gt;한쪽 끝까지 탐색 후 다른쪽 끝까지 탐색하는 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C-SCAN&lt;/p&gt;

    &lt;p&gt;한쪽 끝까지 탐색 후 아무 탐색 없이 다시 원점으로 돌아온 뒤 다시 탐색을 시작하는 방법 (탐색시간의 편차를 줄여줌)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;N-SCAN&lt;/p&gt;

    &lt;p&gt;기본적으로는 scan 방식, arm이 움직이기 시작하면 그 이후에 도착한 일들은 나중에 처리하는 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LOOK&lt;/p&gt;

    &lt;p&gt;한쪽으로 쭉 가다가 더 가도 탐색할게 없으면 유턴해오는 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C-LOOK&lt;/p&gt;

    &lt;p&gt;LOOK 방식인데 C-SCAN 처럼 마지막 스캔 위치까지 갔다가 다시 원점으로 와서 다시 반복하는 방식&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디스크-스케쥴링-알고리즘의-결정&quot;&gt;디스크 스케쥴링 알고리즘의 결정&lt;/h3&gt;

&lt;p&gt;현대에는 스캔 기반의 알고리즘을 많이 쓰고 있음&lt;/p&gt;

&lt;p&gt;file을 어떻게 할당하느냐에 따라 디스크 스케쥴링 성능에 영향을 끼침&lt;/p&gt;

&lt;p&gt;디스크 스케쥴링 알고리즘은 필요할 경우 변경하기 편하도록 OS와 별도의 모듈로 작성되는 것이 좋음&lt;/p&gt;

&lt;h2 id=&quot;swap-space-management&quot;&gt;Swap Space Management&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606204602.png&quot; alt=&quot;image-20210606204600001&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;디스크를-사용하는-이유&quot;&gt;디스크를 사용하는 이유&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;메모리의 휘발성&lt;/li&gt;
  &lt;li&gt;메모리 공간의 부족&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스왑-영역&quot;&gt;스왑 영역&lt;/h3&gt;

&lt;p&gt;스왑 영역은 공간 효율성보다 시간 효율성이 중요한데&lt;/p&gt;

&lt;p&gt;큰 단위로 데이터를 올리고 내리고 반복해줌&lt;/p&gt;

&lt;h3 id=&quot;raid&quot;&gt;RAID&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210606205107.png&quot; alt=&quot;image-20210606205104641&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;p&gt;디스크 여러개를 묶어서 같이 사용하는 방식&lt;/p&gt;

&lt;p&gt;여러개의 디스크에 데이터를 얼마나 중복저장, 분산저장할 것인가를 결정해야함&lt;/p&gt;

&lt;p&gt;**장점 **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디스크 처리 속도가 향상됨&lt;/li&gt;
  &lt;li&gt;중복 저장으로 인해 신뢰성이 향상됨(failure 발생해도 다른 디스크에서 읽어올 수 있음)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/16-File-System-2/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/16-File-System-2/</guid>
        
        <category>운영체제</category>
        
        <category>OS</category>
        
        
        <category>운영체제</category>
        
      </item>
    
  </channel>
</rss>
