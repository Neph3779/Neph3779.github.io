<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neph's Blog</title>
    <description>Write code with my soul.</description>
    <link>https://neph3779.github.io/</link>
    <atom:link href="https://neph3779.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 30 Nov 2021 17:55:01 +0900</pubDate>
    <lastBuildDate>Tue, 30 Nov 2021 17:55:01 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>살까 말까 앱 개인정보 처리방침</title>
        <description>&lt;p&gt;(‘https://neph3779.github.io/’이하 ‘살까 말까’)은(는) 「개인정보 보호법」 제30조에 따라 정보주체의 개인정보를 보호하고 이와 관련한 고충을 신속하고 원활하게 처리할 수 있도록 하기 위하여 다음과 같이 개인정보 처리방침을 수립·공개합니다.&lt;/p&gt;

&lt;p&gt;이 개인정보처리방침은 2021년 1월 1일부터 적용됩니다.&lt;/p&gt;

&lt;h3 id=&quot;제1조개인정보의-처리-목적&quot;&gt;제1조(개인정보의 처리 목적)&lt;/h3&gt;

&lt;p&gt;Neph(‘https://neph3779.github.io/’이하 ‘살까 말까’)은(는) 다음의 목적을 위하여 개인정보를 처리합니다. 처리하고 있는 개인정보는 다음의 목적 이외의 용도로는 이용되지 않으며 이용 목적이 변경되는 경우에는 「개인정보 보호법」 제18조에 따라 별도의 동의를 받는 등 필요한 조치를 이행할 예정입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;재화 또는 서비스 제공&lt;/li&gt;
  &lt;li&gt;서비스 제공, 콘텐츠 제공, 맞춤서비스 제공을 목적으로 개인정보를 처리합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;제2조(개인정보의 처리 및 보유 기간)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Neph 은(는) 법령에 따른 개인정보 보유·이용기간 또는 정보주체로부터 개인정보를 수집 시에 동의받은 개인정보 보유·이용기간 내에서 개인정보를 처리·보유합니다.&lt;/li&gt;
  &lt;li&gt;각각의 개인정보 처리 및 보유 기간은 다음과 같습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;재화 또는 서비스 제공&lt;/li&gt;
  &lt;li&gt;재화 또는 서비스 제공과 관련한 개인정보는 수집.이용에 관한 동의일로부터&amp;lt;1년&amp;gt;까지 위 이용목적을 위하여 보유.이용됩니다.&lt;/li&gt;
  &lt;li&gt;보유근거 : 맞춤 서비스 제공&lt;/li&gt;
  &lt;li&gt;관련법령 :&lt;/li&gt;
  &lt;li&gt;예외사유 :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;제3조(정보주체와 법정대리인의 권리·의무 및 그 행사방법)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;정보주체는 Neph에 대해 언제든지 개인정보 열람·정정·삭제·처리정지 요구 등의 권리를 행사할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;제1항에 따른 권리 행사는Neph에 대해 「개인정보 보호법」 시행령 제41조제1항에 따라 서면, 전자우편, 모사전송(FAX) 등을 통하여 하실 수 있으며 Neph은(는) 이에 대해 지체 없이 조치하겠습니다.&lt;/li&gt;
  &lt;li&gt;제1항에 따른 권리 행사는 정보주체의 법정대리인이나 위임을 받은 자 등 대리인을 통하여 하실 수 있습니다.이 경우 “개인정보 처리 방법에 관한 고시(제2020-7호)” 별지 제11호 서식에 따른 위임장을 제출하셔야 합니다.&lt;/li&gt;
  &lt;li&gt;개인정보 열람 및 처리정지 요구는 「개인정보 보호법」 제35조 제4항, 제37조 제2항에 의하여 정보주체의 권리가 제한 될 수 있습니다.&lt;/li&gt;
  &lt;li&gt;개인정보의 정정 및 삭제 요구는 다른 법령에서 그 개인정보가 수집 대상으로 명시되어 있는 경우에는 그 삭제를 요구할 수 없습니다.&lt;/li&gt;
  &lt;li&gt;Neph은(는) 정보주체 권리에 따른 열람의 요구, 정정·삭제의 요구, 처리정지의 요구 시 열람 등 요구를 한 자가 본인이거나 정당한 대리인인지를 확인합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;제4조(처리하는 개인정보의 항목 작성)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Neph 은(는) 다음의 개인정보 항목을 처리하고 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;재화 또는 서비스 제공&lt;/li&gt;
  &lt;li&gt;필수항목 : 앱 사용 로그 내역&lt;/li&gt;
  &lt;li&gt;선택항목 :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;제5조(개인정보의 파기)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Neph 은(는) 개인정보 보유기간의 경과, 처리목적 달성 등 개인정보가 불필요하게 되었을 때에는 지체없이 해당 개인정보를 파기합니다.&lt;/p&gt;

&lt;p&gt;정보주체로부터 동의받은 개인정보 보유기간이 경과하거나 처리목적이 달성되었음에도 불구하고 다른 법령에 따라 개인정보를 계속 보존하여야 하는 경우에는, 해당 개인정보를 별도의 데이터베이스(DB)로 옮기거나 보관장소를 달리하여 보존합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;법령 근거 :&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보존하는 개인정보 항목 : 계좌정보, 거래날짜&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;개인정보 파기의 절차 및 방법은 다음과 같습니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파기절차
Neph은(는) 파기 사유가 발생한 개인정보를 선정하고, &amp;lt; Neph &amp;gt; 의 개인정보 보호책임자의 승인을 받아 개인정보를 파기합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;파기방법
전자적 파일 형태의 정보는 기록을 재생할 수 없는 기술적 방법을 사용합니다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;*제6조(개인정보의 안전성 확보 조치)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Neph 은(는) 개인정보의 안전성 확보를 위해 다음과 같은 조치를 취하고 있습니다. 1. 개인정보의 암호화
이용자의 개인정보는 비밀번호는 암호화 되어 저장 및 관리되고 있어, 본인만이 알 수 있으며 중요한 데이터는 파일 및 전송 데이터를 암호화 하거나 파일 잠금 기능을 사용하는 등의 별도 보안기능을 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제7조(개인정보 자동 수집 장치의 설치•운영 및 거부에 관한 사항)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Neph 은(는) 정보주체의 이용정보를 저장하고 수시로 불러오는 ‘쿠키(cookie)’를 사용하지 않습니다.&lt;strong&gt;제8조 (개인정보 보호책임자)&lt;/strong&gt; 1. Neph 은(는) 개인정보 처리에 관한 업무를 총괄해서 책임지고, 개인정보 처리와 관련한 정보주체의 불만처리 및 피해구제 등을 위하여 아래와 같이 개인정보 보호책임자를 지정하고 있습니다.▶ 개인정보 보호책임자성명 :천수현직책 :개발자직급 :대표연락처 :01098875779, neph3779@gmail.com,※ 개인정보 보호 담당부서로 연결됩니다.▶ 개인정보 보호 담당부서부서명 :담당자 :연락처 :, , 2. 정보주체께서는 Neph 의 서비스(또는 사업)을 이용하시면서 발생한 모든 개인정보 보호 관련 문의, 불만처리, 피해구제 등에 관한 사항을 개인정보 보호책임자 및 담당부서로 문의하실 수 있습니다. Neph 은(는) 정보주체의 문의에 대해 지체 없이 답변 및 처리해드릴 것입니다.&lt;strong&gt;제9조(개인정보 열람청구)
정보주체는 개인정보 보호법 제35조에 따른 개인정보의 열람 청구를 아래의 부서에 할 수 있습니다.
Neph 은(는) 정보주체의 개인정보 열람청구가 신속하게 처리되도록 노력하겠습니다.&lt;/strong&gt;▶ 개인정보 열람청구 접수·처리 부서부서명 :담당자 :연락처 : , ,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제10조(권익침해 구제방법)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;정보주체는 개인정보침해로 인한 구제를 받기 위하여 개인정보분쟁조정위원회, 한국인터넷진흥원 개인정보침해신고센터 등에 분쟁해결이나 상담 등을 신청할 수 있습니다. 이 밖에 기타 개인정보침해의 신고, 상담에 대하여는 아래의 기관에 문의하시기 바랍니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개인정보분쟁조정위원회 : (국번없이) 1833-6972 (www.kopico.go.kr)&lt;/li&gt;
  &lt;li&gt;개인정보침해신고센터 : (국번없이) 118 (privacy.kisa.or.kr)&lt;/li&gt;
  &lt;li&gt;대검찰청 : (국번없이) 1301 (www.spo.go.kr)&lt;/li&gt;
  &lt;li&gt;경찰청 : (국번없이) 182 (ecrm.cyber.go.kr)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「개인정보보호법」제35조(개인정보의 열람), 제36조(개인정보의 정정·삭제), 제37조(개인정보의 처리정지 등)의 규정에 의한 요구에 대 하여 공공기관의 장이 행한 처분 또는 부작위로 인하여 권리 또는 이익의 침해를 받은 자는 행정심판법이 정하는 바에 따라 행정심판을 청구할 수 있습니다.&lt;/p&gt;

&lt;p&gt;행정심판에 대해 자세한 사항은 중앙행정심판위원회(www.simpan.go.kr) 홈페이지를 참고하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;제11조(개인정보 처리방침 변경)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;이 개인정보처리방침은 2021년 1월 1부터 적용됩니다. 2. 이전의 개인정보 처리방침은 아래에서 확인하실 수 있습니다.예시 ) - 20XX. X. X ~ 20XX. X. X 적용 (클릭)예시 ) - 20XX. X. X ~ 20XX. X. X 적용 (클릭)예시 ) - 20XX. X. X ~ 20XX. X. X 적용 (클릭)*&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EC%82%B4%EA%B9%8C%20%EB%A7%90%EA%B9%8C/private-policy/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EC%82%B4%EA%B9%8C%20%EB%A7%90%EA%B9%8C/private-policy/</guid>
        
        <category>살까말까</category>
        
        <category>개인앱</category>
        
        
        <category>살까 말까</category>
        
      </item>
    
      <item>
        <title>Storyboard에서 TableView Cell 터치시 DetailView로 이동하는 방법</title>
        <description>&lt;h2 id=&quot;storyboard--tableview--segue-활용하기&quot;&gt;Storyboard + TableView + Segue 활용하기&lt;/h2&gt;

&lt;p&gt;스토리보드로 작업 시 Segue를 버튼으로 연결하여 다른 ViewController를 띄우는 것과 다르게 TableView Cell 터치시 DetailView로 이동하는 작업은 단순 Segue 연결만으로 해결할 수 없었다.&lt;/p&gt;

&lt;p&gt;didSelectRowAt에서 간단히 push를 통해 DetailView를 띄워줄 수도 있지만 스토리보드의 장점인 flow의 가시성을 활용하기 위해 Segue로 연결하면 좋겠다 생각이 들어 방법을 찾아보았고, 이를 정리해두는 글이다.&lt;/p&gt;

&lt;h3 id=&quot;적용방법&quot;&gt;적용방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ListViewController 자체에서 Segue를 DetailViewController로 연결한 뒤, 코드로 cell 선택시 Segue가 동작하도록 설정&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;performSegue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ShowDetail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;다음과 같이 cell이 선택됐을때 performSegue를 호출해주면 된다. (데이터를 넘겨야한다면 이 지점에서 진행)&lt;/p&gt;

    &lt;p&gt;Segue의 identifier는 별도로 지정을 해주어야하며 Xcode의 Inspector 영역에서 지정해줄 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cell에서 Segue를 DetailViewController로 연결&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;상황에 맞게 두 방법 중 하나를 선택해서 사용하면 될 것 같다.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/TouchUpCellToMoveDetailViewForStoryboard/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/TouchUpCellToMoveDetailViewForStoryboard/</guid>
        
        <category>TableViewCell</category>
        
        <category>Touch cell to move detailView</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>간단한 Cell Touch 이벤트의 전달하기 (Delegate 대신 클로저 전달)</title>
        <description>&lt;h2 id=&quot;간단한-cell-touch-이벤트는-클로저-전달로&quot;&gt;간단한 Cell Touch 이벤트는 클로저 전달로&lt;/h2&gt;

&lt;p&gt;이벤트를 전달하기 위해 대부분 Delegate Pattern을 사용해왔었다.&lt;/p&gt;

&lt;p&gt;Delegate가 훌륭한 패턴이긴 하지만 손이 많이 가기 때문에 (protocol 제작, 이를 반영하는 작업 필요)&lt;/p&gt;

&lt;p&gt;간단한 작업 정도는 클로저를 전달하여 사용하는 것도 괜찮다는 생각이 들어 이를 정리해보았다.&lt;/p&gt;

&lt;h3 id=&quot;기존-delegate-pattern&quot;&gt;기존 Delegate Pattern&lt;/h3&gt;

&lt;p&gt;Cell에서 일어난 터치 이벤트를 ListViewController가 받아서 처리하는 것이기 때문에&lt;/p&gt;

&lt;p&gt;ListViewController가 ListCellDelegate를 채택하며 (ListViewController가 ListViewCell의 일을 대신 처리해주는 대리자)&lt;/p&gt;

&lt;p&gt;ListViewCell은 listViewCellDelegate를 weak var로 가지고 있으면서 필요할때 이벤트의 처리를 부탁한다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListCellDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListCellDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// cell에서 터치 이벤트가 발생했을때 이를 처리하는 코드&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;listCellDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListCellDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 나(Cell)의 이벤트를 받아 처리해줄 대리자(ListCellDelegate를 채택한 ListViewController)&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cellDidTouchUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ListViewController에서 해야하는 일을 delegate가 대신 해줌&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listCellDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;클로저를-전달하는-방법&quot;&gt;클로저를 전달하는 방법&lt;/h3&gt;

&lt;p&gt;cell에서 처리할 수 없는 경우에 이를 클로저 형태로 만들어 놓은뒤 클로저의 동작을 외부(ListViewController)에서 주입해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITalbeViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// cell의 터치 이벤트를 클로저로 지정&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())?&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cellDidTouchUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 외부(ListViewController)에서 넣어줌&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 간단한 경우에는 클로저를 전달하는 방식이 Delegate를 사용하는것보다 코드가 간결해지는 것을 알 수 있다.&lt;/p&gt;

</description>
        <pubDate>Wed, 03 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/AddTargetRatherThanDelegate/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/AddTargetRatherThanDelegate/</guid>
        
        <category>cell touch event</category>
        
        <category>addTarget</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[#5] 관계 데이터 모델</title>
        <description>&lt;h2 id=&quot;관계-데이터-모델의-개념&quot;&gt;관계 데이터 모델의 개념&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델의 기본 개념&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념적 구조를 논리적 구조로 표현하는 논리적 데이터 모델&lt;/li&gt;
  &lt;li&gt;하나의 개체에 대한 데이터를 하나의 릴레이션에 저장&lt;/li&gt;
  &lt;li&gt;Relataion은 “관계를 맺다”라는 의미가 아닌 Table의 이름을 Relation이라 말하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011224352.png&quot; alt=&quot;image-20211011224352851&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[고객 릴레이션]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델의 기본 용어&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;릴레이션(relation)
    &lt;ul&gt;
      &lt;li&gt;하나의 개체에 관한 데이터를 2차원 테이블의 구조로 저장한 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성(attribute)
    &lt;ul&gt;
      &lt;li&gt;릴레이션의 열&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;파일의 field&lt;/strong&gt;에 대응하는 개념&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;튜플(tuple)
    &lt;ul&gt;
      &lt;li&gt;릴레이션의 행&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;파일의 record&lt;/strong&gt;에 대응하는 개념&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델의 기본 용어&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;도메인(domain)
    &lt;ul&gt;
      &lt;li&gt;하나의 속성이 가질 수 있는 모든 값의 집합&lt;/li&gt;
      &lt;li&gt;일반적으로 속성의 데이터 타입으로 정의&lt;/li&gt;
      &lt;li&gt;잘못된 연산 시도를 예방해줌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;널(null)
    &lt;ul&gt;
      &lt;li&gt;속성 값을 아직 모르거나 해당되는 값이 없음을 표현&lt;/li&gt;
      &lt;li&gt;일반적으로 표시하기 위해 공백을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;차수(degree)
    &lt;ul&gt;
      &lt;li&gt;속성의 개수(열의 수)&lt;/li&gt;
      &lt;li&gt;일반적으로 자주 변하지 않음 (정적인 특징)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;카디널리티(cardinality)
    &lt;ul&gt;
      &lt;li&gt;튜플의 개수(행의 수)&lt;/li&gt;
      &lt;li&gt;일반적으로 자주 변함 (동적인 특징)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객 릴레이션&lt;/code&gt;의 차수 : 6&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객 릴레이션&lt;/code&gt;의 카디널리티: 4&lt;/p&gt;

&lt;h3 id=&quot;릴레이션의-구성&quot;&gt;릴레이션의 구성&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011225919.png&quot; alt=&quot;image-20211011225919947&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;릴레이션 스키마 (relation schema)
    &lt;ul&gt;
      &lt;li&gt;릴레이션의 논리적 구조&lt;/li&gt;
      &lt;li&gt;릴레이션의 이름과 릴레이션에 포함된 모든 속성 이름으로 정의
        &lt;ul&gt;
          &lt;li&gt;i.e., 고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;릴레이션 인스턴스 (relation instance)
    &lt;ul&gt;
      &lt;li&gt;어느 한 시점에 릴레이션에 존재하는 튜플들의 집합&lt;/li&gt;
      &lt;li&gt;실체화된 값&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스의 구성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011230044.png&quot; alt=&quot;image-20211011230044519&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 스키마 (database schema)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 전체 구조&lt;/li&gt;
      &lt;li&gt;데이터베이스를 구성하는 &lt;strong&gt;릴레이션 스키마의 모음&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 인스턴스 (database instance)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스를 구성하는 &lt;strong&gt;릴레이션 인스턴스의 모음&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;릴레이션의 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;튜플의 유일성
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에는 동일한 튜플이 존재할 수 없다.&lt;/li&gt;
      &lt;li&gt;튜플들을 유일하게 구별하기 위해 선정되는 속성을 키(key)라고 부른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;튜플의 무순서성
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에서 튜플 사이의 순서는 무의미하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성의 무순서성
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에서 속성 사이의 순서는 무의미하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성의 원자성
    &lt;ul&gt;
      &lt;li&gt;속성 값으로 원자 값(의미의 분해가 되지 않는 하나의 값)만 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;다중 값을 가질 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;키key&quot;&gt;키(key)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;릴레이션에서 튜플들을 유일하게 구별하는 속성 또는 속성들의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키의 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유일성 (uniqueness)
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에서 모든 튜플은 서로 다른 키 값을 가져야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최소성 (minimality)
    &lt;ul&gt;
      &lt;li&gt;꼭 필요한 최소한의 속성들로만 키를 구성함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키의 종류&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;슈퍼키 (super key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;유일성을 만족하는 속성 또는 속성들의 집합&lt;/li&gt;
      &lt;li&gt;유일성; 하나의 릴레이션에서 키로 지정된 속성 값은 튜플마다 달라야 한다는 의미&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객아이디&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객아이디, 고객이름)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객이름, 주소)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;속성들의 집합또한 슈퍼키에 포함되는 개념이므로 불필요한 속성까지 확인하게 되어 비효율적인 경우가 존재
        &lt;ul&gt;
          &lt;li&gt;이를 해결하기 위해 후보키의 개념이 필요&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;후보키 (candidate key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;유일성과 최소성을 만족하는 속성 또는 속성들의 집합&lt;/li&gt;
      &lt;li&gt;최소성; 꼭 필요한 속성들로만 키를 구성한다는 의미&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객아이디&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객이름, 주소)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본키 (primary key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;후보키 중에서 기본적으로 사용하기 위해 선택한 키&lt;/li&gt;
      &lt;li&gt;속성 이름에 밑줄을 그어 표현&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객아이디&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대체키 (alternate key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;기본키로 선택되지 못한 후보키&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객이름, 주소)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011231708.png&quot; alt=&quot;image-20211011231708335&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;외래키 (foreign key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;다른 릴레이션의 기본키(대체키)를 참조하는 속성 또는 속성들의 집합&lt;/li&gt;
      &lt;li&gt;릴레이션들 간의 관계를 표현 (관계 구현의 핵심으로 동작)&lt;/li&gt;
      &lt;li&gt;하나의 릴레이션에 외래키가 여러 개 존재할 수 있다.&lt;/li&gt;
      &lt;li&gt;외래키를 기본키로 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;외래키 속성과 그것이 참조하는 기본키 속성의 이름은 달라도 되지만, 도메인은 같아야 한다.&lt;/li&gt;
      &lt;li&gt;같은 릴레이션의 기본키를 참조하는 외래키도 정의할 수 있다.&lt;/li&gt;
      &lt;li&gt;널 값을 가질 수 있다.&lt;/li&gt;
      &lt;li&gt;외래키를 가진 릴레이션: 참조하는 릴레이션, 반대는 참조되는 릴레이션&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011232248.png&quot; alt=&quot;image-20211011232248686&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011232327.png&quot; alt=&quot;image-20211011232327493&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011232510.png&quot; alt=&quot;image-20211011232510254&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;기본키를 선택할 때 고려하면 도움이 되는 기준들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;널 값을 가질 수 있는 속성이 포함된 후보키는 기본키로 부적합하다.
    &lt;ul&gt;
      &lt;li&gt;기본키가 널 값인 튜플은 다른 튜플들과 구별되지 않으므로 부적합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;값이 자주 변경될 수 있는 속성이 포함된 후보키는 기본키로 부적합하다.
    &lt;ul&gt;
      &lt;li&gt;기본키의 값이 바뀔때마다 그 값이 기본키로 적합한지 검사해야하므로 부적합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단순한 후보키를 기본키로 선택한다.
    &lt;ul&gt;
      &lt;li&gt;자릿수가 적은 정수, 단순 문자열 속성, 키를 구성하는 속성의 개수가 적은 후보키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관계-데이터-모델의-제약&quot;&gt;관계 데이터 모델의 제약&lt;/h2&gt;

&lt;h3 id=&quot;무결성-제약조건&quot;&gt;무결성 제약조건&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 무결성을 보장하고 일관된 상태로 유지하기 위한 규칙&lt;/li&gt;
  &lt;li&gt;무결성: 데이터를 결함이 없는 상태, 즉 정확하고 유효하게 유지하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 무결성 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본키를 구성하는 모든 속성은 널 값을 가질 수 없는 규칙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;참조 무결성 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외래키는 참조할 수 없는 값을 가질 수 없는 규칙&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011234448.png&quot; alt=&quot;image-20211011234448721&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;참조 무결성 제약조건 위배 예시&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;주의할 점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외래키 속성이 널 값을 가진다고 해서 참조 무결성 제약조건을 위배한 것은 아님
    &lt;ul&gt;
      &lt;li&gt;i.e., 추천인이라는 외래키 속성이 존재할 때 추천인을 입력하지 않았으면 null이지만 이게 참조 무결성 제약조건 위배는 아니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 11 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/5-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A8-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/5-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A8-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#4] 데이터 모델링</title>
        <description>&lt;h2 id=&quot;데이터-모델링과-데이터-모델의-개념&quot;&gt;데이터 모델링과 데이터 모델의 개념&lt;/h2&gt;

&lt;h3 id=&quot;데이터-모델링&quot;&gt;데이터 모델링&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;현실 세계에 존재하는 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환과정 (가장 중요한 작업)&lt;/li&gt;
  &lt;li&gt;데이터베이스 설계의 핵심과정&lt;/li&gt;
  &lt;li&gt;추상화 수행
    &lt;ul&gt;
      &lt;li&gt;어떤 관점을 통해 추출한 것&lt;/li&gt;
      &lt;li&gt;어떤 특정 상황에 필요한 부분만 빼내는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2단계 데이터 모델링&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념적 데이터 모델링
    &lt;ul&gt;
      &lt;li&gt;현실 세계의 중요 데이터를 추출하여 개념 세계로 옮기는 작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논리적 데이터 모델링
    &lt;ul&gt;
      &lt;li&gt;개념 세계의 데이터를 데이터베이스에 저장하는 구조로 표현하는 작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-모델-data-model&quot;&gt;데이터 모델 (data model)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 모델링의 결과물을 표현하는 도구&lt;/li&gt;
  &lt;li&gt;개념적 데이터 모델
    &lt;ul&gt;
      &lt;li&gt;사람의 머리로 이해할 수 있도록 현실 세계를 개념적 모델링하여 데이터베이스의 개념적 구조로 표현하는 도구&lt;/li&gt;
      &lt;li&gt;개체-관계 모델&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논리적 데이터 모델
    &lt;ul&gt;
      &lt;li&gt;개념적 구조를 논리적 모델링하여 데이터베이스의 논리적 구조로 표현하는 도구&lt;/li&gt;
      &lt;li&gt;관계 데이터 모델&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 모델의 구성요소&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;연산 (operation)
    &lt;ul&gt;
      &lt;li&gt;개체 인스턴스 처리 작업 명세&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 구조 (data structure)
    &lt;ul&gt;
      &lt;li&gt;개체 타입과 이들 간의 관계 명세&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제약조건 (constraint)
    &lt;ul&gt;
      &lt;li&gt;데이터의 논리적 제약 명세&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개체---관계-모델&quot;&gt;개체 - 관계 모델&lt;/h2&gt;

&lt;h3 id=&quot;개체---관계-모델-1&quot;&gt;개체 - 관계 모델&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개체와 개체 간의 관계를 이용해 현실 세계를 개념적 구조로 표현&lt;/li&gt;
  &lt;li&gt;핵심요소: 개체, 속성, 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 - 관계 다이어그램 (E-R diagram)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 - 관계 모델을 이용해 현실 세계를 개념적으로 모델링한 결과물을 그림으로 표현한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 (entity)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;저장할 가치가 있는 중요 데이터를 가지고 있고 다른 것과 구별되는 사람, 사물, 개념, 사건 등
    &lt;ul&gt;
      &lt;li&gt;i.e., 서점에 필요한 개체: 고객, 책&lt;/li&gt;
      &lt;li&gt;i.e., 학교에 필요한 개체: 학과, 과목, 학생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 사각형으로 표현하고 사각형 안에 이름을 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008093939.png&quot; alt=&quot;image-20211008093939217&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;속성 (attribute)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;개체나 관계&lt;/strong&gt;가 가지고 있는 고유의 특성&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 타원으로 표현하고 타원 안에 이름을 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008094924.png&quot; alt=&quot;image-20211008094924510&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개체 타입&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체를 고유의 이름과 속성들로 정의한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 인스턴스&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체를 구성하고 있는 속성이 실제 값을 가짐으로써 실체화된 개체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 집합&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특정 개체 타입에 대한 개체 인스턴스들을 모아놓은 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008095151.png&quot; alt=&quot;image-20211008095151056&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;속성의 분류&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008095354.png&quot; alt=&quot;image-20211008095354541&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단일 값 속성과 다중 값 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단일 값 속성
    &lt;ul&gt;
      &lt;li&gt;값을 하나만 가질 수 있는 속성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다중 값 속성
    &lt;ul&gt;
      &lt;li&gt;값을 여러 개 가질 수 있는 속성&lt;/li&gt;
      &lt;li&gt;E-R 다이어그램에서 이중타원으로 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008095808.png&quot; alt=&quot;image-20211008095808493&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단순 속성과 복합 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순 속성
    &lt;ul&gt;
      &lt;li&gt;의미를 더는 분해할 수 없는 속성&lt;/li&gt;
      &lt;li&gt;i.e., 고객 개체의 아이디&lt;/li&gt;
      &lt;li&gt;i.e., 책 개체의 이름 및 가격&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;복합 속성
    &lt;ul&gt;
      &lt;li&gt;의미를 분해할 수 있는 속성&lt;/li&gt;
      &lt;li&gt;i.e., 고객 개체의 주소 속성
        &lt;ul&gt;
          &lt;li&gt;도, 시, 동, 우편번호 등으로 의미를 세분화할 수 있음&lt;/li&gt;
          &lt;li&gt;특정 범위 제한 검색이 의미 있음 (어떤 시에 사는 사람 검색 등)&lt;/li&gt;
          &lt;li&gt;상황에 따라서는 단순속성이 될수도 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008100103.png&quot; alt=&quot;image-20211008100103624&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;유도 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 다른 속성의 값에서 유도되어 결정되는 속성&lt;/li&gt;
  &lt;li&gt;값이 별도로 저장되지 않음
    &lt;ul&gt;
      &lt;li&gt;i.e., 책 개체의 가격과 할인율 속성으로 계산되는 판매가격 속성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 점선 타원으로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008100413.png&quot; alt=&quot;image-20211008100413593&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;널 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;널 값이 허용되는 속성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;널(null) 값&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;속성 값이 그 개체에 “해당되지 않는” (N/A; not applicable) 경우
    &lt;ul&gt;
      &lt;li&gt;i.e., 학생 개체의 병역 기간 속성 (여학생의 경우 N/A)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성 값을 “알 수 없는” (unknown) 경우
    &lt;ul&gt;
      &lt;li&gt;그 값이 존재하지만 “누락” (missing)인 경우
        &lt;ul&gt;
          &lt;li&gt;i.e., 이름 속성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;그 값이 존재하고 있는지 조차 알 수 없어 “모르는” (not known) 경우
        &lt;ul&gt;
          &lt;li&gt;i.e., 재직중인 회사&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 개체 인스턴스를 식별하는데 사용되는 속성&lt;/li&gt;
  &lt;li&gt;둘 이상의 속성들로 구성되기도 함&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 밑줄로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008100943.png&quot; alt=&quot;image-20211008100943357&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체와 개체가 맺고 있는 의미 있는 연관성&lt;/li&gt;
  &lt;li&gt;개체 집합들 사이의 대응 관계, 즉 매핑을 의미&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 마름모로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008101846.png&quot; alt=&quot;image-20211008101846886&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;관계의 유형 : 매핑 카디널리티 기준&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일대일 (1:1) 관계&lt;/li&gt;
  &lt;li&gt;일대다 (1:n) 관계&lt;/li&gt;
  &lt;li&gt;다대다 (n:m) 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;매핑-카디널리티&quot;&gt;매핑 카디널리티&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;관계를 맺는 두 개체 집합에서, 각 개체 인스턴스가 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;일대일 (1:1) 관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 &lt;strong&gt;하나&lt;/strong&gt;와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 &lt;strong&gt;하나&lt;/strong&gt;와 관계를 맺을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;일대다 (1:n) 관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 &lt;strong&gt;여러 개&lt;/strong&gt;와 관계를 맺을 수 있지만, 개체 B의 각 개체 인스턴스는 개체 A의 개체 인스턴스 &lt;strong&gt;하나&lt;/strong&gt;와 관계를 맺을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다대다 (n:m) 관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 &lt;strong&gt;여러 개&lt;/strong&gt;와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 &lt;strong&gt;여러개&lt;/strong&gt;와 관계를 맺을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;관계의-참여-특성&quot;&gt;관계의 참여 특성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;필수적 참여 (전체 참여)
    &lt;ul&gt;
      &lt;li&gt;모든 개체 인스턴스가 관계에 반드시 참여해야 되는 것을 의미&lt;/li&gt;
      &lt;li&gt;i.e., 고객 - 책 (모든 고객은 반드시 책을 구매해야 하도록 구성한 경우 고객은 책과 “구매” 관계를 가져야 함)&lt;/li&gt;
      &lt;li&gt;i.e., 교수 - 단과대학 (교수는 반드시 특정 단과대학과 “소속” 관계를 가져야 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;선택적 참여 (부분 참여)
    &lt;ul&gt;
      &lt;li&gt;개체 인스턴스 중 일부만 관계에 참여해도 되는 것을 의미&lt;/li&gt;
      &lt;li&gt;i.e., 학생 - 과목 (휴학 등의 사유로 “수강”의 관계가 없을 수 있음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008131514.png&quot; alt=&quot;image-20211008131514926&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;고객은 반드시 “구매” 관계를 맺어야 하지만 책은 그렇지 않아도 됨. 따라서 고객과 구매 사이에만 이중선을 그은 모습&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;관계의-종속성&quot;&gt;관계의 종속성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;약한 개체
    &lt;ul&gt;
      &lt;li&gt;다른 개체의 존재 여부에 의존적인 개체&lt;/li&gt;
      &lt;li&gt;자기 자신의 속성으로만 키를 명세할 수 없는 개체 타입 (유니크한 키 없음)&lt;/li&gt;
      &lt;li&gt;부분키(partial key) 를 통해 약한 개체집합 내에서 서로 구별할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;강한 개체
    &lt;ul&gt;
      &lt;li&gt;다른 개체의 존재 여부를 결정하는 개체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;강한 개체와 약한 개체는 일반적으로 일대다의 관계가 성립됨&lt;/li&gt;
      &lt;li&gt;약한 개체는 강한 개체와의 관계에 필수적으로 참여함&lt;/li&gt;
      &lt;li&gt;약한 개체는 강한 개체의 키를 포함하여 키를 구성함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 약한 개체는 이중 사각형으로 표현하고, 약한 개체가 강한 개체와 맺는 관계는 이중 마름모로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계 인스턴스들이 유지해야 할 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 집합간 매핑 카디널리티&lt;/li&gt;
  &lt;li&gt;전체 참여&lt;/li&gt;
  &lt;li&gt;관계의 종속성&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;삽입/삭제/변경 연산 시 제약 조건을 반드시 검토해야함&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;논리적-데이터-모델&quot;&gt;논리적 데이터 모델&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;논리적 데이터 모델의 개념과 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 때 표현하는 논리적 구조
    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 논리적 구조 = 데이터베이스 스키마(schema)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자가 생각하는 데이터베이스의 모습 또는 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 많이 사용되는 데이터 모델&lt;/li&gt;
  &lt;li&gt;데이터베이스의 논리적 구조가 2차원 테이블 형태&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 10 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/4-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/4-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#3] 데이터베이스 시스템</title>
        <description>&lt;h2 id=&quot;데이터베이스-시스템의-정의&quot;&gt;데이터베이스 시스템의 정의&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에 데이터를 저장하고, 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;용어 정리&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스
    &lt;ul&gt;
      &lt;li&gt;데이터를 저장해두는 곳&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 관리 시스템(DBMS)
    &lt;ul&gt;
      &lt;li&gt;데이터가 일관되고 무결한 상태로 유지되도록 관리하는 역할을 하는 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 시스템
    &lt;ul&gt;
      &lt;li&gt;데이터베이스와 데이터베이스 관리 시스템을 이용해 조직에 필요한 정보를 제공해주는 &lt;strong&gt;전체 시스템&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007165402.png&quot; alt=&quot;image-20211007165402614&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;데이터베이스의-구조&quot;&gt;데이터베이스의 구조&lt;/h2&gt;

&lt;h3 id=&quot;스키마와-인스턴스&quot;&gt;스키마와 인스턴스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스키마 (schema)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스에 저장되는 데이터 구조와 제약조건을 정의한 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스 (instance)
    &lt;ul&gt;
      &lt;li&gt;스키마에 따라 데이터베이스에 실제로 저장된 값&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007170440.png&quot; alt=&quot;image-20211007170440740&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3단계-데이터베이스-구조&quot;&gt;3단계 데이터베이스 구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ANSI/SPARC에서 제안&lt;/li&gt;
  &lt;li&gt;데이터베이스를 쉽게 이해하고 이용할 수 있도록 하나의 데이터베이스를 관점에 따라 세 단계로 나눈 것
    &lt;ul&gt;
      &lt;li&gt;외부 단계 : 개별 사용자 관점&lt;/li&gt;
      &lt;li&gt;개념 단계 : 조직 전체의 관점&lt;/li&gt;
      &lt;li&gt;내부 단계 : 물리적인 저장 장치의 관점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;외부 단계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 개별 사용자 관점에서 이해하고 표현하는 단계&lt;/li&gt;
  &lt;li&gt;데이터베이스 하나에 외부 스키마가 여러 개 존재할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;외부 스키마 (external schema)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부 단계에서 사용자에게 필요한 데이터베이스를 정의한 것&lt;/li&gt;
  &lt;li&gt;각 사용자가 생각하는 데이터베이스의 모습, 즉 논리적 구조로 사용자마다 다름&lt;/li&gt;
  &lt;li&gt;서브 스키마 (sub schema)라고도 함&lt;/li&gt;
  &lt;li&gt;i.e., Classnet DB
    &lt;ul&gt;
      &lt;li&gt;학교 DB(통합된 하나의 DB)를 사용하는 응용 프로그램은 여러개가 존재&lt;/li&gt;
      &lt;li&gt;프로그램마다 각각의 스키마가 존재 (이것이 외부 스키마)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개념 단계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 조직 전체의 관점에서 이해하고 표현하는 단계&lt;/li&gt;
  &lt;li&gt;데이터베이스 하나에 개념 스키마는 하나만 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개념 스키마 (conceptual schema)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념 단계에서 데이터베이스 전체의 논리적 구조를 정의한 것&lt;/li&gt;
  &lt;li&gt;조직 전체의 관점에서 생각하는 데이터베이스의 모습&lt;/li&gt;
  &lt;li&gt;i.e., 학교 DB
    &lt;ul&gt;
      &lt;li&gt;학교 DB는 통합되어있음&lt;/li&gt;
      &lt;li&gt;학교 DB 전체(개념 스키마)는 보안 등의 이유로 외부에 공개하지 않음&lt;/li&gt;
      &lt;li&gt;사용자별 맞춤으로 외부에 일부를 공개하는 것 = 외부 스키마&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;내부 단계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 저장 장치의 관점에서 이해하고 표현하는 단계&lt;/li&gt;
  &lt;li&gt;데이터베이스 하나에 내부 스키마는 하나만 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;내부 스키마 (internal schema)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체 데이터베이스가 저장 장치(Hard Disk 등)에 실제로 저장되는 방법을 정의한 것&lt;/li&gt;
  &lt;li&gt;레코드 구조, 필드 크기, 레코드 접근 경로 등 물리적 저장 구조를 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;정리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007172113.png&quot; alt=&quot;image-20211007172113438&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3단계 데이터베이스 구조의 사상/매핑 (대응관계)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스키마 사이의 대응관계
    &lt;ul&gt;
      &lt;li&gt;외부 - 개념 매핑
        &lt;ul&gt;
          &lt;li&gt;외부 스키마와 개념 스키마의 대응 관계&lt;/li&gt;
          &lt;li&gt;응용 인터페이스 (application interface)라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;개념 - 내부 매핑
        &lt;ul&gt;
          &lt;li&gt;개념  스키마와 내부 스키마의 대응 관계&lt;/li&gt;
          &lt;li&gt;저장 인터페이스 (storage interface)라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;미리 정의된 매핑 정보를 이용하여 사용자가 원하는 데이터에 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데이터베이스를 3단계 구조로 나누고, 단계별로 스키마를 유지하며, 스키마 사이의 대응관계를 정의하여 &lt;strong&gt;데이터 독립성&lt;/strong&gt;을 실현&lt;/p&gt;

&lt;h3 id=&quot;데이터-독립성&quot;&gt;데이터 독립성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하위 스키마를 변경하더라도 상위 스키마가 영향을 받지 않는 특성&lt;/li&gt;
  &lt;li&gt;논리적 데이터 독립성
    &lt;ul&gt;
      &lt;li&gt;개념 스키마가 변경되어도 외부 스키마는 영향을 받지 않음&lt;/li&gt;
      &lt;li&gt;개념 스키마가 변경되면 관련된 외부/개념 매핑만 정확하게 수정해주면 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;물리적 데이터 독립성
    &lt;ul&gt;
      &lt;li&gt;내부 스키마가 변경되어도 개념 스키마는 영향을 받지 않음&lt;/li&gt;
      &lt;li&gt;내부 스키마가 변경되면 개념/내부 매핑만 정확하게 수정해주면 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 사전 (data dictionary)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시스템 카탈로그 (system catalog)라고도 함&lt;/li&gt;
  &lt;li&gt;데이터베이스에 저장되는 데이터에 관한 정보, 즉 메타 데이터를 유지하는 데이터베이스
    &lt;ul&gt;
      &lt;li&gt;메타 데이터: 데이터에 대한 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스키마, 매핑 정보, 다양한 제약조건 등을 저장&lt;/li&gt;
  &lt;li&gt;데이터베이스 관리 시스템이 스스로 생성하고 유지함&lt;/li&gt;
  &lt;li&gt;일반 사용자도 접근 가능하지만 저장 내용의 검색만 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 디렉토리 (data directory)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 사전에 있는 데이터에 실제로 접근하는데 필요한 위치정보가 저장된 데이터베이스&lt;/li&gt;
  &lt;li&gt;데이터 사전과 마찬가지로 시스템을 위한 데이터베이스지만 사용자가 접근할 수 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;사용자 데이터베이스 (user database)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 실제로 이용하는 데이터가 저장되어 있는 일반 데이터베이스&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-사용자&quot;&gt;데이터베이스 사용자&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 사용자&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 이용하기 위해 접근하는 모든 사람&lt;/li&gt;
  &lt;li&gt;이용 목적에 따라 데이터베이스 관리자, 최종 사용자(일반 사용자), 응용 프로그래머로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007202349.png&quot; alt=&quot;image-20211007202349492&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리자(DBA: Database Administrator)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 시스템을 운영 및 관리하는 사람&lt;/li&gt;
  &lt;li&gt;주로 데이터 정의어와 데이터 제어어를 이용&lt;/li&gt;
  &lt;li&gt;주요 업무
    &lt;ul&gt;
      &lt;li&gt;데이터베이스 구성요소 선정
        &lt;ul&gt;
          &lt;li&gt;사용자의 요구사항을 분석하여 데이터베이스를 구성할 데이터 결정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터베이스 스키마 정의
        &lt;ul&gt;
          &lt;li&gt;선정된 데이터베이스의 구성 요소를 토대로 스키마를 설계, 이를 관리 시스템에 반영&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;물리적 저장 구조와 접근 방법 결정&lt;/li&gt;
      &lt;li&gt;무결성 유지를 위한 제약조건 정의&lt;/li&gt;
      &lt;li&gt;보안 및 접근 권한 결정&lt;/li&gt;
      &lt;li&gt;백업 및 회복 기법 정의&lt;/li&gt;
      &lt;li&gt;시스템 데이터베이스 관리&lt;/li&gt;
      &lt;li&gt;시스템 성능 감시 및 성능 분석 (성능 개선: DB tuning)
        &lt;ul&gt;
          &lt;li&gt;병목현상이 발생하지 않는지 확인, 시스템 자원의 활용도 분석&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터베이스 재구성
        &lt;ul&gt;
          &lt;li&gt;사용자의 요구 사항이나 사용 형태가 달라지면 그에 맞게 재구성이 필요&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;최종 사용자(end user)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에 접근하여 데이터를 조작 (삽입/삭제/수정/검색)하는 사람&lt;/li&gt;
  &lt;li&gt;직접 DB에 접근하며 SQL 등 직접 접근이 가능한 API 사용&lt;/li&gt;
  &lt;li&gt;주로 데이터 조작어(DML) 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;응용 프로그래머 (application programmer)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 언어를 삽입하여 응용 프로그램을 작성하는 사람&lt;/li&gt;
  &lt;li&gt;주로 데이터 조작어(DML)를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터-언어&quot;&gt;데이터 언어&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터 언어&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자와 데이터베이스 관리 시스템 간의 통신 수단&lt;/li&gt;
  &lt;li&gt;사용 목적에 따라 데이터 정의어, 데이터 조작어, 데이터 제어어로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007205450.png&quot; alt=&quot;image-20211007205450109&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-정의어-ddl-data-definition-language&quot;&gt;데이터 정의어 (DDL: Data Definition Language)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스키마의 정의, 수정, 삭제를 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-조작어-dml-data-manipulation-language&quot;&gt;데이터 조작어 (DML: Data Manipulation Language)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 삽입/삭제/수정/검색 등의 요청을 위해 사용&lt;/li&gt;
  &lt;li&gt;사용자가 실제 데이터 값을 활용하기 위해 사용&lt;/li&gt;
  &lt;li&gt;절차적 조작어와 비절차적 조작어로 구분됨
    &lt;ul&gt;
      &lt;li&gt;절차적 조작어: 사용자 본인이 얻고자 하는 데이터와 그 데이터의 얻으려면 어떻게 처리해야 하는지까지 작성한다&lt;/li&gt;
      &lt;li&gt;비절차적 조작어: 사용자 본인이 얻고자 하는 데이터만 작성한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-제어어-dcl-data-control-language&quot;&gt;데이터 제어어 (DCL: Data Control Language)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;내부적으로 필요한 규칙이나 기법을 정의하기 위해 사용&lt;/li&gt;
  &lt;li&gt;사용 목적
    &lt;ul&gt;
      &lt;li&gt;무결성: 정확하고 유효한 데이터만 유지&lt;/li&gt;
      &lt;li&gt;보안: 허가받지 않은 사용자의 데이터 접근 차단, 허가된 사용자에게 권한 부여&lt;/li&gt;
      &lt;li&gt;회복: 장애가 발생해도 데이터 일관성 유지&lt;/li&gt;
      &lt;li&gt;동시성 제어: 동시 공유 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-구성&quot;&gt;데이터베이스 관리 시스템의 구성&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 관리와 사용자의 데이터 처리 요구 수행&lt;/li&gt;
  &lt;li&gt;주요 구성 요소
    &lt;ul&gt;
      &lt;li&gt;질의 처리기&lt;/li&gt;
      &lt;li&gt;저장 데이터  관리자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질의-처리기&quot;&gt;질의 처리기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자의 데이터 처리 요구를 해석하여 처리하는 역할&lt;/li&gt;
  &lt;li&gt;주요 구성 요소
    &lt;ul&gt;
      &lt;li&gt;DDL compiler
        &lt;ul&gt;
          &lt;li&gt;DDL로 작성된 스키마의 정의를 해석하고 저장 데이터 관리자의 도움을 받아 새로운 데이터베이스를 구축, 스키마의 정의를 데이터 사전에 저장&lt;/li&gt;
          &lt;li&gt;데이터 정의어로 작성도니 기존 스키마의 삭제나 수정 요청 처리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DML precompiler
        &lt;ul&gt;
          &lt;li&gt;응용 프로그램 내의 DML을 추출하여 DML compiler에게 전달&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DML compiler
        &lt;ul&gt;
          &lt;li&gt;DML로 작성된 데이터의 처리를 런타임 데이터베이스 처리기가 이해할 수 있도록 해석&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;런타임 데이터베이스 처리기 (run-time database processor)
        &lt;ul&gt;
          &lt;li&gt;전달받은 데이터 처리 요구를 데이터베이스에 실제로 반영&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;트랜잭션 관리자 (transaction manager)
        &lt;ul&gt;
          &lt;li&gt;데이터베이스에 접근하는 과정에서 사용자의 접근 권한 유효성, 무결성 유지를 위한 제약조건 위배 여부 확인&lt;/li&gt;
          &lt;li&gt;회복, 병행 수행 관련 작업 진행&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007210532.png&quot; alt=&quot;image-20211007210532898&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/3-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/3-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#2] 데이터베이스 관리 시스템</title>
        <description>&lt;h2 id=&quot;데이터베이스-관리-시스템의-등장-배경&quot;&gt;데이터베이스 관리 시스템의 등장 배경&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;파일 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 파일로 관리하기 위해 파일을 생성/삭제/수정/검색하는 기능을 제공하는 소프트웨어&lt;/li&gt;
  &lt;li&gt;응용 프로그램마다 필요한 데이터를 별도의 파일로 관리함&lt;/li&gt;
  &lt;li&gt;여러 사용자/프로그램이 공유하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파일 시스템의 문제점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 내용의 데이터가 여러 파일에 중복 저장된다 &lt;strong&gt;(데이터 중복성)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;저장공간의 낭비 + 데이터 일관성(consistency)과 데이터 무결성(integrity) 유지 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응용 프로그램이 데이터 파일에 종속적이다 &lt;strong&gt;(데이터 종속성)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;사용하는 파일의 구조를 변경하면 응용프로그램도 함께 변경해야 함 (데이터 구조에 맞게 코드를 변경해야 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 파일에 대한 동시 공유, 보안, 회복 기능이 부족하다
    &lt;ul&gt;
      &lt;li&gt;공유, 보안 회복 기능을 가지고 있는 응용 프로그램을 개발하기 쉽지 않다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-정의&quot;&gt;데이터베이스 관리 시스템의 정의&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리 시스템 (DBMS: Database Management System)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일 시스템의 문제를 해결하기 위해 제시된 소프트웨어
    &lt;ul&gt;
      &lt;li&gt;조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 이에 대한 관리를 집중적으로 담당&lt;/li&gt;
      &lt;li&gt;데이터베이스에 들어 있는 데이터를 삽입/삭제/수정/검색하고, 모든 응용 프로그램이 데이터베이스를 공유할 수 있도록 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리 시스템에서의 데이터 관리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007154931.png&quot; alt=&quot;image-20211007154931965&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터는 DB에 통합되어 저장된다.&lt;/li&gt;
  &lt;li&gt;서로 다른 응용 프로그램들이 동시에 데이터베이스를 사용하더라도 문제가 발생하지 않도록 DBMS가 이를 처리해준다&lt;/li&gt;
  &lt;li&gt;사용자는 File이 아닌 DBMS를 통해 데이터를 관리 조작한다&lt;/li&gt;
  &lt;li&gt;데이터베이스의 구조나 접근 방법 등이 변경되어도 문제가 없는 &lt;strong&gt;데이터 독립성&lt;/strong&gt;이 확보된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DBMS의 주요 기능&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정의 기능
    &lt;ul&gt;
      &lt;li&gt;데이터베이스 구조를 정의하거나 수정할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;조작 기능
    &lt;ul&gt;
      &lt;li&gt;데이터를 삽입/삭제/수정/검색하는 연산을 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제어 기능
    &lt;ul&gt;
      &lt;li&gt;데이터를 항상 정확하고 안전하게 유지할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-장단점&quot;&gt;데이터베이스 관리 시스템의 장단점&lt;/h2&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 중복을 통제할 수 있다&lt;/li&gt;
  &lt;li&gt;데이터 독립성이 확보된다&lt;/li&gt;
  &lt;li&gt;데이터를 동시 공유할 수 있다&lt;/li&gt;
  &lt;li&gt;데이터 보안이 향상된다&lt;/li&gt;
  &lt;li&gt;데이터 무결성을 유지할 수 있다
    &lt;ul&gt;
      &lt;li&gt;데이터 무결성은 저장된 값의 정확성을 의미&lt;/li&gt;
      &lt;li&gt;데이터에 대한 연산 수행시마다 유효성을 검사하여 무결성을 유지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;표준화할 수 있다&lt;/li&gt;
  &lt;li&gt;장애 발생 시 회복이 가능하다&lt;/li&gt;
  &lt;li&gt;응용 프로그램 개발 비용이 줄어든다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;시스템이 사용하는 비용(리소스 자원 등)이 많이 든다&lt;/li&gt;
  &lt;li&gt;백업과 회복 방법이 복잡하다&lt;/li&gt;
  &lt;li&gt;중앙 집중 관리로 인한 취약점이 존재한다 (Single Point Of Failure(SPF/SPOF))
    &lt;ul&gt;
      &lt;li&gt;해결법: DB를 여러개로 분산 시키기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-발전-과정&quot;&gt;데이터베이스 관리 시스템의 발전 과정&lt;/h2&gt;

&lt;h3 id=&quot;1세대-네트워크-dbms-계층-dbms&quot;&gt;1세대: 네트워크 DBMS, 계층 DBMS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007161131.png&quot; alt=&quot;image-20211007161131756&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 DBMS
    &lt;ul&gt;
      &lt;li&gt;데이터베이스를 그래프 형태로 구성&lt;/li&gt;
      &lt;li&gt;간선을 이용해 데이터 간의 관계를 나타내기 때문에 데이터베이스의 구조가 복잡하고 변경하기 어려움&lt;/li&gt;
      &lt;li&gt;i.e., Integrated Data Store&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계층 DBMS
    &lt;ul&gt;
      &lt;li&gt;데이터베이스를 트리 형태로 구성&lt;/li&gt;
      &lt;li&gt;현실 세계의 모습을 트리 형태로 표현하기 어렵고 구조 변경이 어려움&lt;/li&gt;
      &lt;li&gt;i.e., Information MAnagement System&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2세대--관계-dbms&quot;&gt;2세대:  관계 DBMS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;관계 DBMS
    &lt;ul&gt;
      &lt;li&gt;1980년 초부터 계속해서 사용되어 온 DBMS&lt;/li&gt;
      &lt;li&gt;데이터베이스를 테이블 형태로 구성&lt;/li&gt;
      &lt;li&gt;데이터베이스를 단순하고 이해하기 쉬운 구조로 구성한다는 장점이 존재하기에 현재도 주류&lt;/li&gt;
      &lt;li&gt;i.e., MySQL, Oracle, MS SQL Server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3세대-객체지향객체관계-dbms&quot;&gt;3세대: 객체지향/객체관계 DBMS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;객체지향 DBMS
    &lt;ul&gt;
      &lt;li&gt;객체를 이용해 데이터베이스를 구성&lt;/li&gt;
      &lt;li&gt;개념이 어렵고 복잡하여 제대로 사용하기 어렵다는 단점이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체관계 DBMS
    &lt;ul&gt;
      &lt;li&gt;객체지향 DBMS를 개선한 것&lt;/li&gt;
      &lt;li&gt;그럼에도 불구하고 사용률이 낮음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4세대-이후-nosqlnewsql-dbms&quot;&gt;4세대 이후: NoSQL/NewSQL DBMS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NoSQL DBMS
    &lt;ul&gt;
      &lt;li&gt;Not Only SQL의 뜻&lt;/li&gt;
      &lt;li&gt;데이터 구조를 미리 정해두지 않아 유연한 활용이 가능함 (비정형 데이터를 처리하는데 적합)&lt;/li&gt;
      &lt;li&gt;확장성이 뛰어나 여러 대의 서버 컴퓨터에 데이터를 분산하여 저장하고 처리하는 환경에서 주로 사용&lt;/li&gt;
      &lt;li&gt;기존의 장점이던 안정성과 일관성 유지를 위한 복잡한 기능을 포기한 DBMS&lt;/li&gt;
      &lt;li&gt;장점이 분명하지만 관계 DBMS를 넘어 주류 DBMS가 되기에는 부족
        &lt;ul&gt;
          &lt;li&gt;아직 기업에서 처리하는 데이터 중 정형 데이터의 비율이 높음&lt;/li&gt;
          &lt;li&gt;기존 데이터를 옮기는 비용 측면의 문제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;i.e., MongoDB, Cassandra, HBase&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007164838.png&quot; alt=&quot;image-20211007164838687&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;발전 과정&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 08 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/2-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%85%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/2-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%85%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#1] 데이터베이스 기본 개념</title>
        <description>&lt;h2 id=&quot;데이터베이스의-필요성&quot;&gt;데이터베이스의 필요성&lt;/h2&gt;

&lt;h3 id=&quot;데이터와-정보&quot;&gt;데이터와 정보&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;현실 세계에서 단순히 관찰하거나 측정하여 수집한 사실이나 값&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정보&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;의사 결정에 유용하게 활용될 수 있도록 데이터를 처리한 결과물&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007122656.png&quot; alt=&quot;image-20211007122656910&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정보처리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;데이터에서 정보를 추출하는 과정, 방법&lt;/p&gt;

&lt;p&gt;주문 내역 데이터를 통해 제품별 총 판매액, 분기별 총 판매액과 같은 정보를 추출할 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 정보는 판매 전략 수립 등에 활용될 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;정보시스템과-데이터베이스&quot;&gt;정보시스템과 데이터베이스&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;정보 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;조직 운영에 필요한 데이터를 수집하여 저장해두었다가 의사 결정이 필요할 때 처리하여 유용한 정보를 만들어주는 수단&lt;/p&gt;

&lt;p&gt;데이터베이스는 정보 시스템의 핵심적인 요소로 동작한다.&lt;/p&gt;

&lt;p&gt;데이터베이스는 현실세계의 데이터를 처리, 가공할 때 정보 시스템 내에서 데이터를 저장하고 있다가 필요할 때 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정보시스템의 예&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기업의 경영 관리에 필요한 의사 결정용 정보 시스템인 &lt;strong&gt;경영 정보 시스템 (Management Information System)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;복합적이고 광범위한 의사 결정을 위해 사용되는 정보 시스템인 &lt;strong&gt;의사 결정 지원 시스템(Decision Support System)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스의-정의&quot;&gt;데이터베이스의 정의&lt;/h2&gt;

&lt;h3 id=&quot;데이터베이스의-정의-1&quot;&gt;데이터베이스의 정의&lt;/h3&gt;

&lt;p&gt;특정 조직의 여러 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;공유&lt;/code&gt;하여 사용할 수 있도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;통합&lt;/code&gt;해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;저장&lt;/code&gt;한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;운영&lt;/code&gt; 데이터의 집합&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공유 데이터
    &lt;ul&gt;
      &lt;li&gt;특정 조직의 여러 사용자가 함께 소유하고 이용할 수 있는 공용 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;통합 데이터
    &lt;ul&gt;
      &lt;li&gt;최소의 중복과 통제 가능한 중복만 허용하는 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;저장 데이터
    &lt;ul&gt;
      &lt;li&gt;컴퓨터가 접근할 수 있는 매체에 저장된 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;운영 데이터
    &lt;ul&gt;
      &lt;li&gt;조직의 주요 기능을 수행하기 위해 지속적으로 꼭 필요한 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터베이스의-특징&quot;&gt;데이터베이스의 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;실시간 접근 (real-time accessibility)
    &lt;ul&gt;
      &lt;li&gt;사용자의 데이터 요구에 실시간으로 응답 (즉각성)&lt;/li&gt;
      &lt;li&gt;반대되는 개념이 Batch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계속 변화(continuous evolution)
    &lt;ul&gt;
      &lt;li&gt;데이터의 계속적인 삽입, 삭제, 수정을 통해 정확한 데이터를 유지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동시 공유 (concurrent sharing)
    &lt;ul&gt;
      &lt;li&gt;서로 다른 데이터의 동시 사용뿐만 아니라 같은 데이터의 동시 사용도 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;내용 기반 참조(content reference)
    &lt;ul&gt;
      &lt;li&gt;데이터가 저장된 주소, 위치가 아닌 내용으로 참조&lt;/li&gt;
      &lt;li&gt;i.e., 재고량이 1000개 이상인 제품의 이름을 검색하시오&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터와-데이터베이스&quot;&gt;데이터와 데이터베이스&lt;/h2&gt;

&lt;h3 id=&quot;데이터의-분류&quot;&gt;데이터의 분류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정형 데이터
    &lt;ul&gt;
      &lt;li&gt;구조화된 데이터로, 미리 정해진 구조에 따라 저장된 데이터&lt;/li&gt;
      &lt;li&gt;i.e., 엑셀의 스프레드시트, C의 구조체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반정형 데이터
    &lt;ul&gt;
      &lt;li&gt;구조에 따라 저장된 데이터지만 구조를 미리 알 수 없고 파싱과정을 통해서 구조를 파악할 수 있는 데이터&lt;/li&gt;
      &lt;li&gt;i.e., HTML, XML, JSON&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비정형 데이터
    &lt;ul&gt;
      &lt;li&gt;정해진 구조가 없이 저장된 데이터&lt;/li&gt;
      &lt;li&gt;i.e., sns의 글&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 07 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/1-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB-%E1%84%80%E1%85%A2%E1%84%82%E1%85%A7%E1%86%B7/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/1-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB-%E1%84%80%E1%85%A2%E1%84%82%E1%85%A7%E1%86%B7/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[Core] HTTPMethod.swift, Notification.swift 분석</title>
        <description>&lt;h2 id=&quot;httpmethod&quot;&gt;HTTPMethod&lt;/h2&gt;

&lt;p&gt;HTTPMethod는 구조체로 이루어져있다.&lt;/p&gt;

&lt;p&gt;RawRepresentable, Equatable, Hashable을 채택하고 있으며 rawValue가 String 타입이기 때문에 HTTPMethod를 String 요구자리에 가져다 써도 문제가 없다.&lt;/p&gt;

&lt;p&gt;Hashable의 경우 Set&amp;lt;HTTPMethod&amp;gt;를 사용하는 부분이 있으므로 채택해주어야 하며, Equatable은 사용자 편의를 위해 채택한 것으로 보인다.&lt;/p&gt;

&lt;h3 id=&quot;enum이-아닌-struct인-이유&quot;&gt;enum이 아닌 struct인 이유&lt;/h3&gt;

&lt;p&gt;RawRepresentable 프로토콜의 요구사항인 rawValue를 처리하기엔 enum에 비해 struct가 용이하기에 struct를 택한 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;지원-methods&quot;&gt;지원 Methods&lt;/h3&gt;

&lt;p&gt;Alamofire에서 지원하는 HTTPMethod는 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CONNECT&lt;/li&gt;
  &lt;li&gt;DELETE&lt;/li&gt;
  &lt;li&gt;GET&lt;/li&gt;
  &lt;li&gt;HEAD&lt;/li&gt;
  &lt;li&gt;OPTIONS&lt;/li&gt;
  &lt;li&gt;PATCH&lt;/li&gt;
  &lt;li&gt;POST&lt;/li&gt;
  &lt;li&gt;PUT&lt;/li&gt;
  &lt;li&gt;TRACE&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notifications&quot;&gt;Notifications&lt;/h2&gt;

&lt;p&gt;Alamofire는 다양한 notification을 EventMonitor 객체를 통해 지원한다.&lt;/p&gt;

&lt;h3 id=&quot;지원-notifications&quot;&gt;지원 Notifications&lt;/h3&gt;

&lt;p&gt;Almofire에서 지원하는 Notification은 아래와 같다.&lt;/p&gt;

&lt;h4 id=&quot;request를-담고-있는-notification들&quot;&gt;Request를 담고 있는 Notification들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;didResumeNotification&lt;/li&gt;
  &lt;li&gt;didSuspendNotification&lt;/li&gt;
  &lt;li&gt;didCancelNotification&lt;/li&gt;
  &lt;li&gt;didFinishNotification&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;urlsessiontask를-담고-있는-notification들&quot;&gt;URLSessionTask를 담고 있는 Notification들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;didResumeTaskNotification&lt;/li&gt;
  &lt;li&gt;didSuspendTaskNotification&lt;/li&gt;
  &lt;li&gt;didCancelTaskNotification&lt;/li&gt;
  &lt;li&gt;didCompleteTaskNotification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notification, EventMonitor 파트는 자세한 구현 내용을 알기보다는 어떤 상황에 어떤 Notification이 오는지만 알고 활용해도 충분할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPMethod.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPMethod.swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/Notifications.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/Notifications.swift&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire%20%EB%B6%84%EC%84%9D/HTTPMethodAndNotification/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire%20%EB%B6%84%EC%84%9D/HTTPMethodAndNotification/</guid>
        
        <category>Alamofire</category>
        
        <category>HTTPMethod</category>
        
        <category>Notification</category>
        
        
        <category>Alamofire 분석</category>
        
      </item>
    
      <item>
        <title>[Core] HTTPHeaders.swift 분석</title>
        <description>&lt;h2 id=&quot;httpheaders&quot;&gt;HTTPHeaders&lt;/h2&gt;

&lt;h3 id=&quot;httpheaders는-struct&quot;&gt;HTTPHeaders는 struct&lt;/h3&gt;

&lt;p&gt;HTTPHeaders는 struct 타입이다. 내부에서 reference 타입을 다루지 않기 때문에 ARC로 인한 성능저하를 우려하지 않아도 된다.&lt;/p&gt;

&lt;h3 id=&quot;http-header를-담고-있는-배열이-있다&quot;&gt;HTTP header를 담고 있는 배열이 있다.&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;headers라는 private으로 선언된 HTTPHeader의 배열이 존재한다.&lt;/p&gt;

&lt;p&gt;HTTPHeader는 Alamofire에서 제공하는 struct이다.&lt;/p&gt;

&lt;h3 id=&quot;세-종류의-init&quot;&gt;세 종류의 init&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빈 instance를 생성하는 이니셜라이저, HTTPHeader 배열을 받아 headers 초기화하는 이니셜라이저, header를 key와 value가  String 딕셔너리를 받아 headers를 초기화하는 이니셜라이저가 있다.&lt;/p&gt;

&lt;h3 id=&quot;header의-추가-삭제-정렬&quot;&gt;header의 추가, 삭제, 정렬&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replaceSubrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeaders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;add, update를 통해 기본적인 header의 추가가 가능하다. HTTPHeader 타입을 통해서 추가할수도 있고 key value String 쌍을 가지고도 가능하다. sort는 header를 알파벳 소문자순으로 정렬해주는 기능을 한다.&lt;/p&gt;

&lt;h3 id=&quot;header의-value-값&quot;&gt;header의 value 값&lt;/h3&gt;

&lt;p&gt;headers에 담긴 원소는 두가지 방법을 통해 접근할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public func value(for name: String) -&amp;gt; String?&lt;/code&gt;을 이용해 key값을 String으로 넣어주면 value를 String?으로 받아볼 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public subscript(_ name: String) -&amp;gt; String?&lt;/code&gt; subscript가 구현되어 있으므로 대괄호를 통해 딕셔너리에 접근하듯 접근할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;추가로 dictionary라는 연산프로퍼티가 존재하며 headers를 통해 Dictionary 타입을 만들어 리턴한다.&lt;/p&gt;

&lt;h3 id=&quot;httpheaders가-추가로-conform하는-프로토콜들&quot;&gt;HTTPHeaders가 추가로 conform하는 프로토콜들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ExpressibleByDictionaryLiteral
HTTPHeaders type의 instance는 그 자체로 dictionary로 취급될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ExpressibleByArrayLiteral
HTTPHeaders type의 instance는 그 자체로 arrary로 취급될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sequence&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Collection
Sequence, Collection 프로토콜을 conform하고 있다. Collection conform을 통해 subscript가 구현되어 있으므로 index를 통해 접근할 수 있으며 startIndex, endIndex, Index(after:)를 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CustomStringConvertible
설명보다 코드를 보는게 이해가 더 빠를 것 같아 코드를 첨부&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추가-extension들&quot;&gt;추가 extension들&lt;/h3&gt;

&lt;p&gt;파일의 하단에 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLRequest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPURLResponse&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLSessionConfiguration&lt;/code&gt;의 extension을 통해 headers라는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPHeaders&lt;/code&gt; type의 변수를 연산 프로퍼티로 가지게 했음을 알 수 있다. 이를 통해 해당 타입의 프로퍼티로 headers를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;이 글에 설명된 것 외에도 HTTPHeader struct, type property인 default도 구현되어있다. 
&lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPHeaders.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPHeaders.swift&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire%20%EB%B6%84%EC%84%9D/HTTPHeaders/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire%20%EB%B6%84%EC%84%9D/HTTPHeaders/</guid>
        
        <category>Alamofire</category>
        
        <category>HTTPHeaders</category>
        
        
        <category>Alamofire 분석</category>
        
      </item>
    
  </channel>
</rss>
