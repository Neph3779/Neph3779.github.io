<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neph's Blog</title>
    <description>Write code with my soul.</description>
    <link>https://neph3779.github.io/</link>
    <atom:link href="https://neph3779.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 12 Oct 2021 03:13:36 +0900</pubDate>
    <lastBuildDate>Tue, 12 Oct 2021 03:13:36 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>[#5] 관계 데이터 모델</title>
        <description>&lt;h2 id=&quot;관계-데이터-모델의-개념&quot;&gt;관계 데이터 모델의 개념&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델의 기본 개념&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념적 구조를 논리적 구조로 표현하는 논리적 데이터 모델&lt;/li&gt;
  &lt;li&gt;하나의 개체에 대한 데이터를 하나의 릴레이션에 저장&lt;/li&gt;
  &lt;li&gt;Relataion은 “관계를 맺다”라는 의미가 아닌 Table의 이름을 Relation이라 말하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011224352.png&quot; alt=&quot;image-20211011224352851&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[고객 릴레이션]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델의 기본 용어&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;릴레이션(relation)
    &lt;ul&gt;
      &lt;li&gt;하나의 개체에 관한 데이터를 2차원 테이블의 구조로 저장한 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성(attribute)
    &lt;ul&gt;
      &lt;li&gt;릴레이션의 열&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;파일의 field&lt;/strong&gt;에 대응하는 개념&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;튜플(tuple)
    &lt;ul&gt;
      &lt;li&gt;릴레이션의 행&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;파일의 record&lt;/strong&gt;에 대응하는 개념&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델의 기본 용어&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;도메인(domain)
    &lt;ul&gt;
      &lt;li&gt;하나의 속성이 가질 수 있는 모든 값의 집합&lt;/li&gt;
      &lt;li&gt;일반적으로 속성의 데이터 타입으로 정의&lt;/li&gt;
      &lt;li&gt;잘못된 연산 시도를 예방해줌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;널(null)
    &lt;ul&gt;
      &lt;li&gt;속성 값을 아직 모르거나 해당되는 값이 없음을 표현&lt;/li&gt;
      &lt;li&gt;일반적으로 표시하기 위해 공백을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;차수(degree)
    &lt;ul&gt;
      &lt;li&gt;속성의 개수(열의 수)&lt;/li&gt;
      &lt;li&gt;일반적으로 자주 변하지 않음 (정적인 특징)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;카디널리티(cardinality)
    &lt;ul&gt;
      &lt;li&gt;튜플의 개수(행의 수)&lt;/li&gt;
      &lt;li&gt;일반적으로 자주 변함 (동적인 특징)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객 릴레이션&lt;/code&gt;의 차수 : 6&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객 릴레이션&lt;/code&gt;의 카디널리티: 4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;릴레이션의 구성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011225919.png&quot; alt=&quot;image-20211011225919947&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;릴레이션 스키마 (relation schema)
    &lt;ul&gt;
      &lt;li&gt;릴레이션의 논리적 구조&lt;/li&gt;
      &lt;li&gt;릴레이션의 이름과 릴레이션에 포함된 모든 속성 이름으로 정의
        &lt;ul&gt;
          &lt;li&gt;i.e., 고객(고객아이디, 고객이름, 나이, 등급, 직업, 적립금)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;릴레이션 인스턴스 (relation instance)
    &lt;ul&gt;
      &lt;li&gt;어느 한 시점에 릴레이션에 존재하는 튜플들의 집합&lt;/li&gt;
      &lt;li&gt;실체화된 값&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스의 구성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011230044.png&quot; alt=&quot;image-20211011230044519&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 스키마 (database schema)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 전체 구조&lt;/li&gt;
      &lt;li&gt;데이터베이스를 구성하는 &lt;strong&gt;릴레이션 스키마의 모음&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 인스턴스 (database instance)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스를 구성하는 &lt;strong&gt;릴레이션 인스턴스의 모음&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;릴레이션의 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;튜플의 유일성
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에는 동일한 튜플이 존재할 수 없다.&lt;/li&gt;
      &lt;li&gt;튜플들을 유일하게 구별하기 위해 선정되는 속성을 키(key)라고 부른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;튜플의 무순서성
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에서 튜플 사이의 순서는 무의미하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성의 무순서성
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에서 속성 사이의 순서는 무의미하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성의 원자성
    &lt;ul&gt;
      &lt;li&gt;속성 값으로 원자 값(의미의 분해가 되지 않는 하나의 값)만 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;다중 값을 가질 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키(key)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;릴레이션에서 튜플들을 유일하게 구별하는 속성 또는 속성들의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키의 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유일성 (uniqueness)
    &lt;ul&gt;
      &lt;li&gt;하나의 릴레이션에서 모든 튜플은 서로 다른 키 값을 가져야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;최소성 (minimality)
    &lt;ul&gt;
      &lt;li&gt;꼭 필요한 최소한의 속성들로만 키를 구성함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키의 종류&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;슈퍼키 (super key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;유일성을 만족하는 속성 또는 속성들의 집합&lt;/li&gt;
      &lt;li&gt;유일성; 하나의 릴레이션에서 키로 지정된 속성 값은 튜플마다 달라야 한다는 의미&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객아이디&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객아이디, 고객이름)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객이름, 주소)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;속성들의 집합또한 슈퍼키에 포함되는 개념이므로 불필요한 속성까지 확인하게 되어 비효율적인 경우가 존재
        &lt;ul&gt;
          &lt;li&gt;이를 해결하기 위해 후보키의 개념이 필요&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;후보키 (candidate key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;유일성과 최소성을 만족하는 속성 또는 속성들의 집합&lt;/li&gt;
      &lt;li&gt;최소성; 꼭 필요한 속성들로만 키를 구성한다는 의미&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객아이디&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객이름, 주소)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본키 (primary key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;후보키 중에서 기본적으로 사용하기 위해 선택한 키&lt;/li&gt;
      &lt;li&gt;속성 이름에 밑줄을 그어 표현&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;고객아이디&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대체키 (alternate key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;기본키로 선택되지 못한 후보키&lt;/li&gt;
      &lt;li&gt;i.e., 고객 릴레이션의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(고객이름, 주소)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011231708.png&quot; alt=&quot;image-20211011231708335&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;외래키 (foreign key)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;다른 릴레이션의 기본키(대체키)를 참조하는 속성 또는 속성들의 집합&lt;/li&gt;
      &lt;li&gt;릴레이션들 간의 관계를 표현 (관계 구현의 핵심으로 동작)&lt;/li&gt;
      &lt;li&gt;하나의 릴레이션에 외래키가 여러 개 존재할 수 있다.&lt;/li&gt;
      &lt;li&gt;외래키를 기본키로 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;외래키 속성과 그것이 참조하는 기본키 속성의 이름은 달라도 되지만, 도메인은 같아야 한다.&lt;/li&gt;
      &lt;li&gt;같은 릴레이션의 기본키를 참조하는 외래키도 정의할 수 있다.&lt;/li&gt;
      &lt;li&gt;널 값을 가질 수 있다.&lt;/li&gt;
      &lt;li&gt;외래키를 가진 릴레이션: 참조하는 릴레이션, 반대는 참조되는 릴레이션&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011232248.png&quot; alt=&quot;image-20211011232248686&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011232327.png&quot; alt=&quot;image-20211011232327493&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011232510.png&quot; alt=&quot;image-20211011232510254&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;기본키를 선택할 때 고려하면 도움이 되는 기준들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;널 값을 가질 수 있는 속성이 포함된 후보키는 기본키로 부적합하다.
    &lt;ul&gt;
      &lt;li&gt;기본키가 널 값인 튜플은 다른 튜플들과 구별되지 않으므로 부적합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;값이 자주 변경될 수 있는 속성이 포함된 후보키는 기본키로 부적합하다.
    &lt;ul&gt;
      &lt;li&gt;기본키의 값이 바뀔때마다 그 값이 기본키로 적합한지 검사해야하므로 부적합&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단순한 후보키를 기본키로 선택한다.
    &lt;ul&gt;
      &lt;li&gt;자릿수가 적은 정수, 단순 문자열 속성, 키를 구성하는 속성의 개수가 적은 후보키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관계-데이터-모델의-제약&quot;&gt;관계 데이터 모델의 제약&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;무결성 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 무결성을 보장하고 일관된 상태로 유지하기 위한 규칙&lt;/li&gt;
  &lt;li&gt;무결성: 데이터를 결함이 없는 상태, 즉 정확하고 유효하게 유지하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 무결성 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본키를 구성하는 모든 속성은 널 값을 가질 수 없는 규칙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;참조 무결성 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외래키는 참조할 수 없는 값을 가질 수 없는 규칙&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211011234448.png&quot; alt=&quot;image-20211011234448721&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;참조 무결성 제약조건 위배 예시&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;주의할 점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외래키 속성이 널 값을 가진다고 해서 참조 무결성 제약조건을 위배한 것은 아님
    &lt;ul&gt;
      &lt;li&gt;i.e., 추천인이라는 외래키 속성이 존재할 때 추천인을 입력하지 않았으면 null이지만 이게 참조 무결성 제약조건 위배는 아니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 11 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/5-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A8-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/5-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%80%E1%85%A8-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#4] 데이터 모델링</title>
        <description>&lt;h2 id=&quot;데이터-모델링과-데이터-모델의-개념&quot;&gt;데이터 모델링과 데이터 모델의 개념&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터 모델링&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현실 세계에 존재하는 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환과정 (가장 중요한 작업)&lt;/li&gt;
  &lt;li&gt;데이터베이스 설계의 핵심과정&lt;/li&gt;
  &lt;li&gt;추상화 수행
    &lt;ul&gt;
      &lt;li&gt;어떤 관점을 통해 추출한 것&lt;/li&gt;
      &lt;li&gt;어떤 특정 상황에 필요한 부분만 빼내는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2단계 데이터 모델링&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념적 데이터 모델링
    &lt;ul&gt;
      &lt;li&gt;현실 세계의 중요 데이터를 추출하여 개념 세계로 옮기는 작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논리적 데이터 모델링
    &lt;ul&gt;
      &lt;li&gt;개념 세계의 데이터를 데이터베이스에 저장하는 구조로 표현하는 작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 모델 (data model)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 모델링의 결과물을 표현하는 도구&lt;/li&gt;
  &lt;li&gt;개념적 데이터 모델
    &lt;ul&gt;
      &lt;li&gt;사람의 머리로 이해할 수 있도록 현실 세계를 개념적 모델링하여 데이터베이스의 개념적 구조로 표현하는 도구&lt;/li&gt;
      &lt;li&gt;개체-관계 모델&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논리적 데이터 모델
    &lt;ul&gt;
      &lt;li&gt;개념적 구조를 논리적 모델링하여 데이터베이스의 논리적 구조로 표현하는 도구&lt;/li&gt;
      &lt;li&gt;관계 데이터 모델&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 모델의 구성요소&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;연산 (operation)
    &lt;ul&gt;
      &lt;li&gt;개체 인스턴스 처리 작업 명세&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 구조 (data structure)
    &lt;ul&gt;
      &lt;li&gt;개체 타입과 이들 간의 관계 명세&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제약조건 (constraint)
    &lt;ul&gt;
      &lt;li&gt;데이터의 논리적 제약 명세&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개체---관계-모델&quot;&gt;개체 - 관계 모델&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;개체 - 관계 모델&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체와 개체 간의 관계를 이용해 현실 세계를 개념적 구조로 표현&lt;/li&gt;
  &lt;li&gt;핵심요소: 개체, 속성, 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 - 관계 다이어그램 (E-R diagram)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 - 관계 모델을 이용해 현실 세계를 개념적으로 모델링한 결과물을 그림으로 표현한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 (entity)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;저장할 가치가 있는 중요 데이터를 가지고 있고 다른 것과 구별되는 사람, 사물, 개념, 사건 등
    &lt;ul&gt;
      &lt;li&gt;i.e., 서점에 필요한 개체: 고객, 책&lt;/li&gt;
      &lt;li&gt;i.e., 학교에 필요한 개체: 학과, 과목, 학생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 사각형으로 표현하고 사각형 안에 이름을 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008093939.png&quot; alt=&quot;image-20211008093939217&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;속성 (attribute)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;개체나 관계&lt;/strong&gt;가 가지고 있는 고유의 특성&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 타원으로 표현하고 타원 안에 이름을 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008094924.png&quot; alt=&quot;image-20211008094924510&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개체 타입&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체를 고유의 이름과 속성들로 정의한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 인스턴스&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체를 구성하고 있는 속성이 실제 값을 가짐으로써 실체화된 개체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개체 집합&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특정 개체 타입에 대한 개체 인스턴스들을 모아놓은 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008095151.png&quot; alt=&quot;image-20211008095151056&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;속성의 분류&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008095354.png&quot; alt=&quot;image-20211008095354541&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단일 값 속성과 다중 값 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단일 값 속성
    &lt;ul&gt;
      &lt;li&gt;값을 하나만 가질 수 있는 속성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다중 값 속성
    &lt;ul&gt;
      &lt;li&gt;값을 여러 개 가질 수 있는 속성&lt;/li&gt;
      &lt;li&gt;E-R 다이어그램에서 이중타원으로 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008095808.png&quot; alt=&quot;image-20211008095808493&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단순 속성과 복합 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순 속성
    &lt;ul&gt;
      &lt;li&gt;의미를 더는 분해할 수 없는 속성&lt;/li&gt;
      &lt;li&gt;i.e., 고객 개체의 아이디&lt;/li&gt;
      &lt;li&gt;i.e., 책 개체의 이름 및 가격&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;복합 속성
    &lt;ul&gt;
      &lt;li&gt;의미를 분해할 수 있는 속성&lt;/li&gt;
      &lt;li&gt;i.e., 고객 개체의 주소 속성
        &lt;ul&gt;
          &lt;li&gt;도, 시, 동, 우편번호 등으로 의미를 세분화할 수 있음&lt;/li&gt;
          &lt;li&gt;특정 범위 제한 검색이 의미 있음 (어떤 시에 사는 사람 검색 등)&lt;/li&gt;
          &lt;li&gt;상황에 따라서는 단순속성이 될수도 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008100103.png&quot; alt=&quot;image-20211008100103624&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;유도 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 다른 속성의 값에서 유도되어 결정되는 속성&lt;/li&gt;
  &lt;li&gt;값이 별도로 저장되지 않음
    &lt;ul&gt;
      &lt;li&gt;i.e., 책 개체의 가격과 할인율 속성으로 계산되는 판매가격 속성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 점선 타원으로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008100413.png&quot; alt=&quot;image-20211008100413593&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;널 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;널 값이 허용되는 속성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;널(null) 값&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;속성 값이 그 개체에 “해당되지 않는” (N/A; not applicable) 경우
    &lt;ul&gt;
      &lt;li&gt;i.e., 학생 개체의 병역 기간 속성 (여학생의 경우 N/A)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성 값을 “알 수 없는” (unknown) 경우
    &lt;ul&gt;
      &lt;li&gt;그 값이 존재하지만 “누락” (missing)인 경우
        &lt;ul&gt;
          &lt;li&gt;i.e., 이름 속성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;그 값이 존재하고 있는지 조차 알 수 없어 “모르는” (not known) 경우
        &lt;ul&gt;
          &lt;li&gt;i.e., 재직중인 회사&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;키 속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 개체 인스턴스를 식별하는데 사용되는 속성&lt;/li&gt;
  &lt;li&gt;둘 이상의 속성들로 구성되기도 함&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 밑줄로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008100943.png&quot; alt=&quot;image-20211008100943357&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체와 개체가 맺고 있는 의미 있는 연관성&lt;/li&gt;
  &lt;li&gt;개체 집합들 사이의 대응 관계, 즉 매핑을 의미&lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 마름모로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008101846.png&quot; alt=&quot;image-20211008101846886&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;관계의 유형 : 매핑 카디널리티 기준&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일대일 (1:1) 관계&lt;/li&gt;
  &lt;li&gt;일대다 (1:n) 관계&lt;/li&gt;
  &lt;li&gt;다대다 (n:m) 관계&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;매핑 카디널리티&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;관계를 맺는 두 개체 집합에서, 각 개체 인스턴스가 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;일대일 (1:1) 관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 &lt;strong&gt;하나&lt;/strong&gt;와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 &lt;strong&gt;하나&lt;/strong&gt;와 관계를 맺을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;일대다 (1:n) 관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 &lt;strong&gt;여러 개&lt;/strong&gt;와 관계를 맺을 수 있지만, 개체 B의 각 개체 인스턴스는 개체 A의 개체 인스턴스 &lt;strong&gt;하나&lt;/strong&gt;와 관계를 맺을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;다대다 (n:m) 관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 &lt;strong&gt;여러 개&lt;/strong&gt;와 관계를 맺을 수 있고, 개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 &lt;strong&gt;여러개&lt;/strong&gt;와 관계를 맺을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계의 참여 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필수적 참여 (전체 참여)
    &lt;ul&gt;
      &lt;li&gt;모든 개체 인스턴스가 관계에 반드시 참여해야 되는 것을 의미&lt;/li&gt;
      &lt;li&gt;i.e., 고객 - 책 (모든 고객은 반드시 책을 구매해야 하도록 구성한 경우 고객은 책과 “구매” 관계를 가져야 함)&lt;/li&gt;
      &lt;li&gt;i.e., 교수 - 단과대학 (교수는 반드시 특정 단과대학과 “소속” 관계를 가져야 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;선택적 참여 (부분 참여)
    &lt;ul&gt;
      &lt;li&gt;개체 인스턴스 중 일부만 관계에 참여해도 되는 것을 의미&lt;/li&gt;
      &lt;li&gt;i.e., 학생 - 과목 (휴학 등의 사유로 “수강”의 관계가 없을 수 있음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211008131514.png&quot; alt=&quot;image-20211008131514926&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;고객은 반드시 “구매” 관계를 맺어야 하지만 책은 그렇지 않아도 됨. 따라서 고객과 구매 사이에만 이중선을 그은 모습&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;관계의 종속성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;약한 개체
    &lt;ul&gt;
      &lt;li&gt;다른 개체의 존재 여부에 의존적인 개체&lt;/li&gt;
      &lt;li&gt;자기 자신의 속성으로만 키를 명세할 수 없는 개체 타입 (유니크한 키 없음)&lt;/li&gt;
      &lt;li&gt;부분키(partial key) 를 통해 약한 개체집합 내에서 서로 구별할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;강한 개체
    &lt;ul&gt;
      &lt;li&gt;다른 개체의 존재 여부를 결정하는 개체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;강한 개체와 약한 개체는 일반적으로 일대다의 관계가 성립됨&lt;/li&gt;
      &lt;li&gt;약한 개체는 강한 개체와의 관계에 필수적으로 참여함&lt;/li&gt;
      &lt;li&gt;약한 개체는 강한 개체의 키를 포함하여 키를 구성함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E-R 다이어그램에서 약한 개체는 이중 사각형으로 표현하고, 약한 개체가 강한 개체와 맺는 관계는 이중 마름모로 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계 인스턴스들이 유지해야 할 제약조건&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개체 집합간 매핑 카디널리티&lt;/li&gt;
  &lt;li&gt;전체 참여&lt;/li&gt;
  &lt;li&gt;관계의 종속성&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;삽입/삭제/변경 연산 시 제약 조건을 반드시 검토해야함&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;논리적-데이터-모델&quot;&gt;논리적 데이터 모델&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;논리적 데이터 모델의 개념과 특성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 때 표현하는 논리적 구조
    &lt;ul&gt;
      &lt;li&gt;데이터베이스의 논리적 구조 = 데이터베이스 스키마(schema)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자가 생각하는 데이터베이스의 모습 또는 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;관계 데이터 모델&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 많이 사용되는 데이터 모델&lt;/li&gt;
  &lt;li&gt;데이터베이스의 논리적 구조가 2차원 테이블 형태&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 10 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/4-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/4-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%86%E1%85%A9%E1%84%83%E1%85%A6%E1%86%AF%E1%84%85%E1%85%B5%E1%86%BC/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#3] 데이터베이스 시스템</title>
        <description>&lt;h2 id=&quot;데이터베이스-시스템의-정의&quot;&gt;데이터베이스 시스템의 정의&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에 데이터를 저장하고, 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;용어 정리&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스
    &lt;ul&gt;
      &lt;li&gt;데이터를 저장해두는 곳&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 관리 시스템(DBMS)
    &lt;ul&gt;
      &lt;li&gt;데이터가 일관되고 무결한 상태로 유지되도록 관리하는 역할을 하는 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스 시스템
    &lt;ul&gt;
      &lt;li&gt;데이터베이스와 데이터베이스 관리 시스템을 이용해 조직에 필요한 정보를 제공해주는 &lt;strong&gt;전체 시스템&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007165402.png&quot; alt=&quot;image-20211007165402614&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;데이터베이스의-구조&quot;&gt;데이터베이스의 구조&lt;/h2&gt;

&lt;h3 id=&quot;스키마와-인스턴스&quot;&gt;스키마와 인스턴스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스키마 (schema)
    &lt;ul&gt;
      &lt;li&gt;데이터베이스에 저장되는 데이터 구조와 제약조건을 정의한 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스 (instance)
    &lt;ul&gt;
      &lt;li&gt;스키마에 따라 데이터베이스에 실제로 저장된 값&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007170440.png&quot; alt=&quot;image-20211007170440740&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3단계-데이터베이스-구조&quot;&gt;3단계 데이터베이스 구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ANSI/SPARC에서 제안&lt;/li&gt;
  &lt;li&gt;데이터베이스를 쉽게 이해하고 이용할 수 있도록 하나의 데이터베이스를 관점에 따라 세 단계로 나눈 것
    &lt;ul&gt;
      &lt;li&gt;외부 단계 : 개별 사용자 관점&lt;/li&gt;
      &lt;li&gt;개념 단계 : 조직 전체의 관점&lt;/li&gt;
      &lt;li&gt;내부 단계 : 물리적인 저장 장치의 관점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;외부 단계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 개별 사용자 관점에서 이해하고 표현하는 단계&lt;/li&gt;
  &lt;li&gt;데이터베이스 하나에 외부 스키마가 여러 개 존재할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;외부 스키마 (external schema)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부 단계에서 사용자에게 필요한 데이터베이스를 정의한 것&lt;/li&gt;
  &lt;li&gt;각 사용자가 생각하는 데이터베이스의 모습, 즉 논리적 구조로 사용자마다 다름&lt;/li&gt;
  &lt;li&gt;서브 스키마 (sub schema)라고도 함&lt;/li&gt;
  &lt;li&gt;i.e., Classnet DB
    &lt;ul&gt;
      &lt;li&gt;학교 DB(통합된 하나의 DB)를 사용하는 응용 프로그램은 여러개가 존재&lt;/li&gt;
      &lt;li&gt;프로그램마다 각각의 스키마가 존재 (이것이 외부 스키마)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개념 단계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 조직 전체의 관점에서 이해하고 표현하는 단계&lt;/li&gt;
  &lt;li&gt;데이터베이스 하나에 개념 스키마는 하나만 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;개념 스키마 (conceptual schema)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념 단계에서 데이터베이스 전체의 논리적 구조를 정의한 것&lt;/li&gt;
  &lt;li&gt;조직 전체의 관점에서 생각하는 데이터베이스의 모습&lt;/li&gt;
  &lt;li&gt;i.e., 학교 DB
    &lt;ul&gt;
      &lt;li&gt;학교 DB는 통합되어있음&lt;/li&gt;
      &lt;li&gt;학교 DB 전체(개념 스키마)는 보안 등의 이유로 외부에 공개하지 않음&lt;/li&gt;
      &lt;li&gt;사용자별 맞춤으로 외부에 일부를 공개하는 것 = 외부 스키마&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;내부 단계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 저장 장치의 관점에서 이해하고 표현하는 단계&lt;/li&gt;
  &lt;li&gt;데이터베이스 하나에 내부 스키마는 하나만 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;내부 스키마 (internal schema)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체 데이터베이스가 저장 장치(Hard Disk 등)에 실제로 저장되는 방법을 정의한 것&lt;/li&gt;
  &lt;li&gt;레코드 구조, 필드 크기, 레코드 접근 경로 등 물리적 저장 구조를 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;정리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007172113.png&quot; alt=&quot;image-20211007172113438&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3단계 데이터베이스 구조의 사상/매핑 (대응관계)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스키마 사이의 대응관계
    &lt;ul&gt;
      &lt;li&gt;외부 - 개념 매핑
        &lt;ul&gt;
          &lt;li&gt;외부 스키마와 개념 스키마의 대응 관계&lt;/li&gt;
          &lt;li&gt;응용 인터페이스 (application interface)라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;개념 - 내부 매핑
        &lt;ul&gt;
          &lt;li&gt;개념  스키마와 내부 스키마의 대응 관계&lt;/li&gt;
          &lt;li&gt;저장 인터페이스 (storage interface)라고도 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;미리 정의된 매핑 정보를 이용하여 사용자가 원하는 데이터에 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데이터베이스를 3단계 구조로 나누고, 단계별로 스키마를 유지하며, 스키마 사이의 대응관계를 정의하여 &lt;strong&gt;데이터 독립성&lt;/strong&gt;을 실현&lt;/p&gt;

&lt;h3 id=&quot;데이터-독립성&quot;&gt;데이터 독립성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하위 스키마를 변경하더라도 상위 스키마가 영향을 받지 않는 특성&lt;/li&gt;
  &lt;li&gt;논리적 데이터 독립성
    &lt;ul&gt;
      &lt;li&gt;개념 스키마가 변경되어도 외부 스키마는 영향을 받지 않음&lt;/li&gt;
      &lt;li&gt;개념 스키마가 변경되면 관련된 외부/개념 매핑만 정확하게 수정해주면 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;물리적 데이터 독립성
    &lt;ul&gt;
      &lt;li&gt;내부 스키마가 변경되어도 개념 스키마는 영향을 받지 않음&lt;/li&gt;
      &lt;li&gt;내부 스키마가 변경되면 개념/내부 매핑만 정확하게 수정해주면 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 사전 (data dictionary)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시스템 카탈로그 (system catalog)라고도 함&lt;/li&gt;
  &lt;li&gt;데이터베이스에 저장되는 데이터에 관한 정보, 즉 메타 데이터를 유지하는 데이터베이스
    &lt;ul&gt;
      &lt;li&gt;메타 데이터: 데이터에 대한 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스키마, 매핑 정보, 다양한 제약조건 등을 저장&lt;/li&gt;
  &lt;li&gt;데이터베이스 관리 시스템이 스스로 생성하고 유지함&lt;/li&gt;
  &lt;li&gt;일반 사용자도 접근 가능하지만 저장 내용의 검색만 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 디렉토리 (data directory)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 사전에 있는 데이터에 실제로 접근하는데 필요한 위치정보가 저장된 데이터베이스&lt;/li&gt;
  &lt;li&gt;데이터 사전과 마찬가지로 시스템을 위한 데이터베이스지만 사용자가 접근할 수 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;사용자 데이터베이스 (user database)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자가 실제로 이용하는 데이터가 저장되어 있는 일반 데이터베이스&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-사용자&quot;&gt;데이터베이스 사용자&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 사용자&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 이용하기 위해 접근하는 모든 사람&lt;/li&gt;
  &lt;li&gt;이용 목적에 따라 데이터베이스 관리자, 최종 사용자(일반 사용자), 응용 프로그래머로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007202349.png&quot; alt=&quot;image-20211007202349492&quot; style=&quot;zoom:33%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리자(DBA: Database Administrator)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 시스템을 운영 및 관리하는 사람&lt;/li&gt;
  &lt;li&gt;주로 데이터 정의어와 데이터 제어어를 이용&lt;/li&gt;
  &lt;li&gt;주요 업무
    &lt;ul&gt;
      &lt;li&gt;데이터베이스 구성요소 선정
        &lt;ul&gt;
          &lt;li&gt;사용자의 요구사항을 분석하여 데이터베이스를 구성할 데이터 결정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터베이스 스키마 정의
        &lt;ul&gt;
          &lt;li&gt;선정된 데이터베이스의 구성 요소를 토대로 스키마를 설계, 이를 관리 시스템에 반영&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;물리적 저장 구조와 접근 방법 결정&lt;/li&gt;
      &lt;li&gt;무결성 유지를 위한 제약조건 정의&lt;/li&gt;
      &lt;li&gt;보안 및 접근 권한 결정&lt;/li&gt;
      &lt;li&gt;백업 및 회복 기법 정의&lt;/li&gt;
      &lt;li&gt;시스템 데이터베이스 관리&lt;/li&gt;
      &lt;li&gt;시스템 성능 감시 및 성능 분석 (성능 개선: DB tuning)
        &lt;ul&gt;
          &lt;li&gt;병목현상이 발생하지 않는지 확인, 시스템 자원의 활용도 분석&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터베이스 재구성
        &lt;ul&gt;
          &lt;li&gt;사용자의 요구 사항이나 사용 형태가 달라지면 그에 맞게 재구성이 필요&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;최종 사용자(end user)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에 접근하여 데이터를 조작 (삽입/삭제/수정/검색)하는 사람&lt;/li&gt;
  &lt;li&gt;직접 DB에 접근하며 SQL 등 직접 접근이 가능한 API 사용&lt;/li&gt;
  &lt;li&gt;주로 데이터 조작어(DML) 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;응용 프로그래머 (application programmer)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 언어를 삽입하여 응용 프로그램을 작성하는 사람&lt;/li&gt;
  &lt;li&gt;주로 데이터 조작어(DML)를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터-언어&quot;&gt;데이터 언어&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터 언어&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자와 데이터베이스 관리 시스템 간의 통신 수단&lt;/li&gt;
  &lt;li&gt;사용 목적에 따라 데이터 정의어, 데이터 조작어, 데이터 제어어로 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007205450.png&quot; alt=&quot;image-20211007205450109&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-정의어-ddl-data-definition-language&quot;&gt;데이터 정의어 (DDL: Data Definition Language)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스키마의 정의, 수정, 삭제를 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-조작어-dml-data-manipulation-language&quot;&gt;데이터 조작어 (DML: Data Manipulation Language)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 삽입/삭제/수정/검색 등의 요청을 위해 사용&lt;/li&gt;
  &lt;li&gt;사용자가 실제 데이터 값을 활용하기 위해 사용&lt;/li&gt;
  &lt;li&gt;절차적 조작어와 비절차적 조작어로 구분됨
    &lt;ul&gt;
      &lt;li&gt;절차적 조작어: 사용자 본인이 얻고자 하는 데이터와 그 데이터의 얻으려면 어떻게 처리해야 하는지까지 작성한다&lt;/li&gt;
      &lt;li&gt;비절차적 조작어: 사용자 본인이 얻고자 하는 데이터만 작성한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터-제어어-dcl-data-control-language&quot;&gt;데이터 제어어 (DCL: Data Control Language)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;내부적으로 필요한 규칙이나 기법을 정의하기 위해 사용&lt;/li&gt;
  &lt;li&gt;사용 목적
    &lt;ul&gt;
      &lt;li&gt;무결성: 정확하고 유효한 데이터만 유지&lt;/li&gt;
      &lt;li&gt;보안: 허가받지 않은 사용자의 데이터 접근 차단, 허가된 사용자에게 권한 부여&lt;/li&gt;
      &lt;li&gt;회복: 장애가 발생해도 데이터 일관성 유지&lt;/li&gt;
      &lt;li&gt;동시성 제어: 동시 공유 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-구성&quot;&gt;데이터베이스 관리 시스템의 구성&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 관리와 사용자의 데이터 처리 요구 수행&lt;/li&gt;
  &lt;li&gt;주요 구성 요소
    &lt;ul&gt;
      &lt;li&gt;질의 처리기&lt;/li&gt;
      &lt;li&gt;저장 데이터  관리자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;질의-처리기&quot;&gt;질의 처리기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자의 데이터 처리 요구를 해석하여 처리하는 역할&lt;/li&gt;
  &lt;li&gt;주요 구성 요소
    &lt;ul&gt;
      &lt;li&gt;DDL compiler
        &lt;ul&gt;
          &lt;li&gt;DDL로 작성된 스키마의 정의를 해석하고 저장 데이터 관리자의 도움을 받아 새로운 데이터베이스를 구축, 스키마의 정의를 데이터 사전에 저장&lt;/li&gt;
          &lt;li&gt;데이터 정의어로 작성도니 기존 스키마의 삭제나 수정 요청 처리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DML precompiler
        &lt;ul&gt;
          &lt;li&gt;응용 프로그램 내의 DML을 추출하여 DML compiler에게 전달&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DML compiler
        &lt;ul&gt;
          &lt;li&gt;DML로 작성된 데이터의 처리를 런타임 데이터베이스 처리기가 이해할 수 있도록 해석&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;런타임 데이터베이스 처리기 (run-time database processor)
        &lt;ul&gt;
          &lt;li&gt;전달받은 데이터 처리 요구를 데이터베이스에 실제로 반영&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;트랜잭션 관리자 (transaction manager)
        &lt;ul&gt;
          &lt;li&gt;데이터베이스에 접근하는 과정에서 사용자의 접근 권한 유효성, 무결성 유지를 위한 제약조건 위배 여부 확인&lt;/li&gt;
          &lt;li&gt;회복, 병행 수행 관련 작업 진행&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007210532.png&quot; alt=&quot;image-20211007210532898&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/3-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/3-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#2] 데이터베이스 관리 시스템</title>
        <description>&lt;h2 id=&quot;데이터베이스-관리-시스템의-등장-배경&quot;&gt;데이터베이스 관리 시스템의 등장 배경&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;파일 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 파일로 관리하기 위해 파일을 생성/삭제/수정/검색하는 기능을 제공하는 소프트웨어&lt;/li&gt;
  &lt;li&gt;응용 프로그램마다 필요한 데이터를 별도의 파일로 관리함&lt;/li&gt;
  &lt;li&gt;여러 사용자/프로그램이 공유하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;파일 시스템의 문제점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 내용의 데이터가 여러 파일에 중복 저장된다 &lt;strong&gt;(데이터 중복성)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;저장공간의 낭비 + 데이터 일관성(consistency)과 데이터 무결성(integrity) 유지 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응용 프로그램이 데이터 파일에 종속적이다 &lt;strong&gt;(데이터 종속성)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;사용하는 파일의 구조를 변경하면 응용프로그램도 함께 변경해야 함 (데이터 구조에 맞게 코드를 변경해야 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 파일에 대한 동시 공유, 보안, 회복 기능이 부족하다
    &lt;ul&gt;
      &lt;li&gt;공유, 보안 회복 기능을 가지고 있는 응용 프로그램을 개발하기 쉽지 않다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-정의&quot;&gt;데이터베이스 관리 시스템의 정의&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리 시스템 (DBMS: Database Management System)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일 시스템의 문제를 해결하기 위해 제시된 소프트웨어
    &lt;ul&gt;
      &lt;li&gt;조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 이에 대한 관리를 집중적으로 담당&lt;/li&gt;
      &lt;li&gt;데이터베이스에 들어 있는 데이터를 삽입/삭제/수정/검색하고, 모든 응용 프로그램이 데이터베이스를 공유할 수 있도록 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 관리 시스템에서의 데이터 관리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007154931.png&quot; alt=&quot;image-20211007154931965&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터는 DB에 통합되어 저장된다.&lt;/li&gt;
  &lt;li&gt;서로 다른 응용 프로그램들이 동시에 데이터베이스를 사용하더라도 문제가 발생하지 않도록 DBMS가 이를 처리해준다&lt;/li&gt;
  &lt;li&gt;사용자는 File이 아닌 DBMS를 통해 데이터를 관리 조작한다&lt;/li&gt;
  &lt;li&gt;데이터베이스의 구조나 접근 방법 등이 변경되어도 문제가 없는 &lt;strong&gt;데이터 독립성&lt;/strong&gt;이 확보된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DBMS의 주요 기능&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정의 기능
    &lt;ul&gt;
      &lt;li&gt;데이터베이스 구조를 정의하거나 수정할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;조작 기능
    &lt;ul&gt;
      &lt;li&gt;데이터를 삽입/삭제/수정/검색하는 연산을 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제어 기능
    &lt;ul&gt;
      &lt;li&gt;데이터를 항상 정확하고 안전하게 유지할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-장단점&quot;&gt;데이터베이스 관리 시스템의 장단점&lt;/h2&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 중복을 통제할 수 있다&lt;/li&gt;
  &lt;li&gt;데이터 독립성이 확보된다&lt;/li&gt;
  &lt;li&gt;데이터를 동시 공유할 수 있다&lt;/li&gt;
  &lt;li&gt;데이터 보안이 향상된다&lt;/li&gt;
  &lt;li&gt;데이터 무결성을 유지할 수 있다
    &lt;ul&gt;
      &lt;li&gt;데이터 무결성은 저장된 값의 정확성을 의미&lt;/li&gt;
      &lt;li&gt;데이터에 대한 연산 수행시마다 유효성을 검사하여 무결성을 유지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;표준화할 수 있다&lt;/li&gt;
  &lt;li&gt;장애 발생 시 회복이 가능하다&lt;/li&gt;
  &lt;li&gt;응용 프로그램 개발 비용이 줄어든다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;시스템이 사용하는 비용(리소스 자원 등)이 많이 든다&lt;/li&gt;
  &lt;li&gt;백업과 회복 방법이 복잡하다&lt;/li&gt;
  &lt;li&gt;중앙 집중 관리로 인한 취약점이 존재한다 (Single Point Of Failure(SPF/SPOF))
    &lt;ul&gt;
      &lt;li&gt;해결법: DB를 여러개로 분산 시키기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스-관리-시스템의-발전-과정&quot;&gt;데이터베이스 관리 시스템의 발전 과정&lt;/h2&gt;

&lt;h3 id=&quot;1세대-네트워크-dbms-계층-dbms&quot;&gt;1세대: 네트워크 DBMS, 계층 DBMS&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007161131.png&quot; alt=&quot;image-20211007161131756&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 DBMS
    &lt;ul&gt;
      &lt;li&gt;데이터베이스를 그래프 형태로 구성&lt;/li&gt;
      &lt;li&gt;간선을 이용해 데이터 간의 관계를 나타내기 때문에 데이터베이스의 구조가 복잡하고 변경하기 어려움&lt;/li&gt;
      &lt;li&gt;i.e., Integrated Data Store&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계층 DBMS
    &lt;ul&gt;
      &lt;li&gt;데이터베이스를 트리 형태로 구성&lt;/li&gt;
      &lt;li&gt;현실 세계의 모습을 트리 형태로 표현하기 어렵고 구조 변경이 어려움&lt;/li&gt;
      &lt;li&gt;i.e., Information MAnagement System&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2세대--관계-dbms&quot;&gt;2세대:  관계 DBMS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;관계 DBMS
    &lt;ul&gt;
      &lt;li&gt;1980년 초부터 계속해서 사용되어 온 DBMS&lt;/li&gt;
      &lt;li&gt;데이터베이스를 테이블 형태로 구성&lt;/li&gt;
      &lt;li&gt;데이터베이스를 단순하고 이해하기 쉬운 구조로 구성한다는 장점이 존재하기에 현재도 주류&lt;/li&gt;
      &lt;li&gt;i.e., MySQL, Oracle, MS SQL Server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3세대-객체지향객체관계-dbms&quot;&gt;3세대: 객체지향/객체관계 DBMS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;객체지향 DBMS
    &lt;ul&gt;
      &lt;li&gt;객체를 이용해 데이터베이스를 구성&lt;/li&gt;
      &lt;li&gt;개념이 어렵고 복잡하여 제대로 사용하기 어렵다는 단점이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체관계 DBMS
    &lt;ul&gt;
      &lt;li&gt;객체지향 DBMS를 개선한 것&lt;/li&gt;
      &lt;li&gt;그럼에도 불구하고 사용률이 낮음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4세대-이후-nosqlnewsql-dbms&quot;&gt;4세대 이후: NoSQL/NewSQL DBMS&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NoSQL DBMS
    &lt;ul&gt;
      &lt;li&gt;Not Only SQL의 뜻&lt;/li&gt;
      &lt;li&gt;데이터 구조를 미리 정해두지 않아 유연한 활용이 가능함 (비정형 데이터를 처리하는데 적합)&lt;/li&gt;
      &lt;li&gt;확장성이 뛰어나 여러 대의 서버 컴퓨터에 데이터를 분산하여 저장하고 처리하는 환경에서 주로 사용&lt;/li&gt;
      &lt;li&gt;기존의 장점이던 안정성과 일관성 유지를 위한 복잡한 기능을 포기한 DBMS&lt;/li&gt;
      &lt;li&gt;장점이 분명하지만 관계 DBMS를 넘어 주류 DBMS가 되기에는 부족
        &lt;ul&gt;
          &lt;li&gt;아직 기업에서 처리하는 데이터 중 정형 데이터의 비율이 높음&lt;/li&gt;
          &lt;li&gt;기존 데이터를 옮기는 비용 측면의 문제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;i.e., MongoDB, Cassandra, HBase&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007164838.png&quot; alt=&quot;image-20211007164838687&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;발전 과정&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 08 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/2-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%85%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/2-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%AA%E1%86%AB%E1%84%85%E1%85%B5-%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>[#1] 데이터베이스 기본 개념</title>
        <description>&lt;h2 id=&quot;데이터베이스의-필요성&quot;&gt;데이터베이스의 필요성&lt;/h2&gt;

&lt;h3 id=&quot;데이터와-정보&quot;&gt;데이터와 정보&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;현실 세계에서 단순히 관찰하거나 측정하여 수집한 사실이나 값&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정보&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;의사 결정에 유용하게 활용될 수 있도록 데이터를 처리한 결과물&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20211007122656.png&quot; alt=&quot;image-20211007122656910&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정보처리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;데이터에서 정보를 추출하는 과정, 방법&lt;/p&gt;

&lt;p&gt;주문 내역 데이터를 통해 제품별 총 판매액, 분기별 총 판매액과 같은 정보를 추출할 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 정보는 판매 전략 수립 등에 활용될 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;정보시스템과-데이터베이스&quot;&gt;정보시스템과 데이터베이스&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;정보 시스템&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;조직 운영에 필요한 데이터를 수집하여 저장해두었다가 의사 결정이 필요할 때 처리하여 유용한 정보를 만들어주는 수단&lt;/p&gt;

&lt;p&gt;데이터베이스는 정보 시스템의 핵심적인 요소로 동작한다.&lt;/p&gt;

&lt;p&gt;데이터베이스는 현실세계의 데이터를 처리, 가공할 때 정보 시스템 내에서 데이터를 저장하고 있다가 필요할 때 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정보시스템의 예&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기업의 경영 관리에 필요한 의사 결정용 정보 시스템인 &lt;strong&gt;경영 정보 시스템 (Management Information System)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;복합적이고 광범위한 의사 결정을 위해 사용되는 정보 시스템인 &lt;strong&gt;의사 결정 지원 시스템(Decision Support System)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터베이스의-정의&quot;&gt;데이터베이스의 정의&lt;/h2&gt;

&lt;h3 id=&quot;데이터베이스의-정의-1&quot;&gt;데이터베이스의 정의&lt;/h3&gt;

&lt;p&gt;특정 조직의 여러 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;공유&lt;/code&gt;하여 사용할 수 있도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;통합&lt;/code&gt;해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;저장&lt;/code&gt;한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;운영&lt;/code&gt; 데이터의 집합&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공유 데이터
    &lt;ul&gt;
      &lt;li&gt;특정 조직의 여러 사용자가 함께 소유하고 이용할 수 있는 공용 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;통합 데이터
    &lt;ul&gt;
      &lt;li&gt;최소의 중복과 통제 가능한 중복만 허용하는 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;저장 데이터
    &lt;ul&gt;
      &lt;li&gt;컴퓨터가 접근할 수 있는 매체에 저장된 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;운영 데이터
    &lt;ul&gt;
      &lt;li&gt;조직의 주요 기능을 수행하기 위해 지속적으로 꼭 필요한 데이터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;데이터베이스의-특징&quot;&gt;데이터베이스의 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;실시간 접근 (real-time accessibility)
    &lt;ul&gt;
      &lt;li&gt;사용자의 데이터 요구에 실시간으로 응답 (즉각성)&lt;/li&gt;
      &lt;li&gt;반대되는 개념이 Batch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계속 변화(continuous evolution)
    &lt;ul&gt;
      &lt;li&gt;데이터의 계속적인 삽입, 삭제, 수정을 통해 정확한 데이터를 유지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동시 공유 (concurrent sharing)
    &lt;ul&gt;
      &lt;li&gt;서로 다른 데이터의 동시 사용뿐만 아니라 같은 데이터의 동시 사용도 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;내용 기반 참조(content reference)
    &lt;ul&gt;
      &lt;li&gt;데이터가 저장된 주소, 위치가 아닌 내용으로 참조&lt;/li&gt;
      &lt;li&gt;i.e., 재고량이 1000개 이상인 제품의 이름을 검색하시오&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터와-데이터베이스&quot;&gt;데이터와 데이터베이스&lt;/h2&gt;

&lt;h3 id=&quot;데이터의-분류&quot;&gt;데이터의 분류&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;정형 데이터
    &lt;ul&gt;
      &lt;li&gt;구조화된 데이터로, 미리 정해진 구조에 따라 저장된 데이터&lt;/li&gt;
      &lt;li&gt;i.e., 엑셀의 스프레드시트, C의 구조체&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반정형 데이터
    &lt;ul&gt;
      &lt;li&gt;구조에 따라 저장된 데이터지만 구조를 미리 알 수 없고 파싱과정을 통해서 구조를 파악할 수 있는 데이터&lt;/li&gt;
      &lt;li&gt;i.e., HTML, XML, JSON&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비정형 데이터
    &lt;ul&gt;
      &lt;li&gt;정해진 구조가 없이 저장된 데이터&lt;/li&gt;
      &lt;li&gt;i.e., sns의 글&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 07 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/1-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB-%E1%84%80%E1%85%A2%E1%84%82%E1%85%A7%E1%86%B7/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/1-%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB-%E1%84%80%E1%85%A2%E1%84%82%E1%85%A7%E1%86%B7/</guid>
        
        <category>데이터베이스</category>
        
        
        <category>데이터베이스</category>
        
      </item>
    
      <item>
        <title>야곰 스타터 캠프 후기 (2기)</title>
        <description>&lt;h1 id=&quot;야곰-ios-스타터캠프-후기&quot;&gt;야곰 iOS 스타터캠프 후기&lt;/h1&gt;

&lt;h3 id=&quot;캠프의-전반적인-진행과정&quot;&gt;캠프의 전반적인 진행과정&lt;/h3&gt;

&lt;p&gt;캠프는 첫 주(적응 기간, 교육 기간)를 제외하고는 모두 팀/개인 프로젝트를 진행합니다. 이 외에도 평소에 공부하기 어려운 주제들을 가지고 같이 토의해보고 야곰이 내주는 질문 목록들을 해결해보는 시간인 활동학습이 주 2회 진행됩니다.&lt;/p&gt;

&lt;p&gt;프로젝트의 코드는 코드 리뷰를 받게됩니다. Github의 Pull Request로 코드 리뷰를 요청하면 리뷰어는 평균 1.5일의 시간을 거쳐 코드를 리뷰해줍니다. 제가 야곰 스타터캠프에 참여하게 된 결정적인 이유가 바로 이 코드리뷰입니다. 제가 받았던 리뷰 중 가장 인상깊었던 리뷰의 링크를 첨부해놓으니 코드리뷰가 어떤식으로 이루어지는지 궁금하신 분들이 보시면 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yagom-academy/ios-exposition-universelle/pull/66&quot;&gt;코드리뷰 링크&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;다양한-강연들&quot;&gt;다양한 강연들&lt;/h3&gt;

&lt;p&gt;스타터 캠프에서 단순히 활동학습, 프로젝트만 진행하는건 아닙니다. 다양한 주제들을 가지고 외부 인사들을 초청하여 이야기를 들을 수 있는 기회가 있습니다. 코딩테스트의 준비과정, 이력서를 쓰는 팁 등 실질적으로 도움이 되는 세션들을 마련해줍니다. iOS계에서 워낙 발이 넓은 야곰이라 만약 모시고 싶은 분이 있어 요청하면 모시고 와서 캠퍼들 대상으로 강연을 해주시는 경우도 있습니다. (최근에는 캠퍼의 요청으로 전수열님께서 오셔서 TDD 강의 + 기타 질의응답을 해주신 적이 있습니다.)&lt;/p&gt;

&lt;p&gt;캠프에 대한 설명은 여기까지이고 이 밑은 QnA 형식으로 예상되는 질문과 그에 대한 답변을 남겨보겠습니다.&lt;/p&gt;

&lt;p&gt;(제 주관이 아주 많이 포함된 답변이니 참고용으로만 생각해주세요)&lt;/p&gt;

&lt;h2 id=&quot;qna&quot;&gt;QnA&lt;/h2&gt;

&lt;p&gt;Q1: 코딩을 처음하는데 캠프에 참여해도 될까요?&lt;/p&gt;

&lt;p&gt;A1: 넵! 대신 공부를 많이 해오면 해올수록 따라가기 수월할겁니다. 캠프에서 진행되는 모든 내용을 100% 소화한다는 것은 누구에게나 절대 불가능한 일이지만 개인 능력에 따라 소화량이 정말 많이 달라집니다. 6개월동안 진행되는 캠프가 워낙 빡세서 조금 여유있게 마음의 준비를 하며 쉬는 것도 좋지만.. 캠프에 참여하기 전 1~2달 가량 집중해서 공부한 뒤 캠프에 참여한다면 더 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q2: 전 코딩 꽤 해봤는데 (컴공 졸업, 재학생) 도움이 될까요?&lt;/p&gt;

&lt;p&gt;A2: 전 컴공 2학년 수료 후 휴학한 뒤 캠프에 참여했습니다. 개인적으로 캠프에서 가장 많이 뽑아먹을 수 있는 타겟층이 바로 코딩은 좀 해봤는데 어떤 한 기술스택을 심도있게 공부해보지 않은 사람들이라 생각합니다. 코테 준비만 하면서 알고리즘 코드는 많이 짜봤지만 클린코드, 아키텍쳐 등에 대한 심도있는 이해를 가져볼 기회가 없던 사람들에게 정말 강추합니다! (제가 코딩이 적성에도 맞고 머리도 꽤 된다고 자부하는데도 캠프 정말 정말 빡셌습니다. 혹시라도 캠프가 너무 쉬울까봐의 걱정은 진짜 안해도 됩니다. 캠프에서 제한된 지식만을 얻어가길 강요하지도 않고 공부는 본인이 하기 나름이며, 코드의 완성도를 위한 투자도 본인이 결정할 몫이므로..)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q3: 하루에 시간 얼마나 써야하나요?&lt;/p&gt;

&lt;p&gt;A3: 본인 하기 나름이지만 하루종일 쓰는게 대부분입니다. 학교에 다니거나 직장에 다니면서 따라가는건 솔직히 불가능할 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q4: 이거 하면 취업 잘 되나요?&lt;/p&gt;

&lt;p&gt;A4: 개인 역량에 따라 다릅니다. 캠프 끝나자마자 바로 어딘가에 취업하는 경우도 있고 캠프 중간에 취업하는 경우도 있고 그렇습니다. 제 경우에는 캠프 종료 3주전에 한 스타트업의 iOS 단독작업을 제의받아 입사하기로 했었으나 차질이 생겨 중간에 그만두고  현재는 취업 준비중입니다. (산업기능요원 취업 준비중)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q5: 캠프비가 비싼데 돈값 하나요?&lt;/p&gt;

&lt;p&gt;A5: 네 전 한다고 봅니다. iOS를 이렇게 심도있게 공부할 수 있는 기회도 드물고, 혼자 공부하면서 코드리뷰를 받기란 더더욱 어렵습니다. 이외에도 캠퍼, 리뷰어들에게 모르는 내용을 언제든지 물어보면서 학습할 수 있다는 장점이 있고 기한이 있는 프로젝트라는 강제성(팀 프로젝트의 경우 이 강제성이 책임감으로 인해 더 높아짐) 또한 늘어지기 쉬운 공부 과정에서 엄청난 장점이라 생각합니다. 그냥 딱 봤을 때 캠프비가 비싸보이는건 맞지만 어차피 취업하면 금방 복구 가능한 금액이고, 혼자 공부하면서 겪을 수많은 시행착오를 줄여주는 점, 공부를 밀도있게 함으로써 취업 준비 기간을 확실하게 줄여주는 점, 캠프를 통해 많은 인맥을 쌓을 수 있다는 점(한 다리도 아니고 반 다리 건너면 다 안다는 iOS 직군).. 충분히 돈값 한다 생각합니다. 가장 민감한 주제이니만큼 제 주관이 많이 반영되어 있으니 참고 바랍니다. 그냥 솔직하게 느끼는 점을 써봤습니다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;캠프를 통해 정말 많은 것을 배웠습니다. 아직 저는 졸업이 2년 남은 상황이지만 캠프에 참여하는 대부분은 취업을 준비하는 졸업생, 4학년 막학기 재학생이 대부분입니다. 캠퍼들과 함께 스터디도 진행하며 다양한 공부도 해보았고 (&lt;a href=&quot;https://github.com/i-study-OS&quot;&gt;운영체제 스터디 링크&lt;/a&gt;, &lt;a href=&quot;https://github.com/iOS-Interview-Study&quot;&gt;면접 준비 스터디 링크&lt;/a&gt;) 캠퍼의 추천을 통해 단독으로 iOS 개발 일을 잠깐이지만 진행해보기도 했습니다. 스타터 캠프에 참여한 것이 인생에서 가장 잘한 선택 중 하나로 뽑힐만큼 좋은 경험이었습니다. 위에 적어놓은 QnA 이외에도 질문이 있다면 채팅을 걸어주세요 (우하단 채널톡 버튼)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.yagom-academy.kr/&quot;&gt;야곰 스타터캠프 지원 링크&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Aug 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/%EC%9D%BC%EC%83%81/YagomCampReview/</link>
        <guid isPermaLink="true">https://neph3779.github.io/%EC%9D%BC%EC%83%81/YagomCampReview/</guid>
        
        <category>Yagom</category>
        
        <category>StarterCamp</category>
        
        <category>부트캠프 후기</category>
        
        <category>부트캠프</category>
        
        
        <category>일상</category>
        
      </item>
    
      <item>
        <title>[Core] HTTPMethod.swift, Notification.swift 분석</title>
        <description>&lt;h2 id=&quot;httpmethod&quot;&gt;HTTPMethod&lt;/h2&gt;

&lt;p&gt;HTTPMethod는 구조체로 이루어져있다.&lt;/p&gt;

&lt;p&gt;RawRepresentable, Equatable, Hashable을 채택하고 있으며 rawValue가 String 타입이기 때문에 HTTPMethod를 String 요구자리에 가져다 써도 문제가 없다.&lt;/p&gt;

&lt;p&gt;Hashable의 경우 Set&amp;lt;HTTPMethod&amp;gt;를 사용하는 부분이 있으므로 채택해주어야 하며, Equatable은 사용자 편의를 위해 채택한 것으로 보인다.&lt;/p&gt;

&lt;h3 id=&quot;enum이-아닌-struct인-이유&quot;&gt;enum이 아닌 struct인 이유&lt;/h3&gt;

&lt;p&gt;RawRepresentable 프로토콜의 요구사항인 rawValue를 처리하기엔 enum에 비해 struct가 용이하기에 struct를 택한 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;지원-methods&quot;&gt;지원 Methods&lt;/h3&gt;

&lt;p&gt;Alamofire에서 지원하는 HTTPMethod는 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CONNECT&lt;/li&gt;
  &lt;li&gt;DELETE&lt;/li&gt;
  &lt;li&gt;GET&lt;/li&gt;
  &lt;li&gt;HEAD&lt;/li&gt;
  &lt;li&gt;OPTIONS&lt;/li&gt;
  &lt;li&gt;PATCH&lt;/li&gt;
  &lt;li&gt;POST&lt;/li&gt;
  &lt;li&gt;PUT&lt;/li&gt;
  &lt;li&gt;TRACE&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notifications&quot;&gt;Notifications&lt;/h2&gt;

&lt;p&gt;Alamofire는 다양한 notification을 EventMonitor 객체를 통해 지원한다.&lt;/p&gt;

&lt;h3 id=&quot;지원-notifications&quot;&gt;지원 Notifications&lt;/h3&gt;

&lt;p&gt;Almofire에서 지원하는 Notification은 아래와 같다.&lt;/p&gt;

&lt;h4 id=&quot;request를-담고-있는-notification들&quot;&gt;Request를 담고 있는 Notification들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;didResumeNotification&lt;/li&gt;
  &lt;li&gt;didSuspendNotification&lt;/li&gt;
  &lt;li&gt;didCancelNotification&lt;/li&gt;
  &lt;li&gt;didFinishNotification&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;urlsessiontask를-담고-있는-notification들&quot;&gt;URLSessionTask를 담고 있는 Notification들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;didResumeTaskNotification&lt;/li&gt;
  &lt;li&gt;didSuspendTaskNotification&lt;/li&gt;
  &lt;li&gt;didCancelTaskNotification&lt;/li&gt;
  &lt;li&gt;didCompleteTaskNotification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notification, EventMonitor 파트는 자세한 구현 내용을 알기보다는 어떤 상황에 어떤 Notification이 오는지만 알고 활용해도 충분할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPMethod.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPMethod.swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/Notifications.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/Notifications.swift&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/HTTPMethodAndNotification/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/HTTPMethodAndNotification/</guid>
        
        <category>Alamofire</category>
        
        <category>HTTPMethod</category>
        
        <category>Notification</category>
        
        
        <category>Alamofire</category>
        
        <category>분석</category>
        
      </item>
    
      <item>
        <title>[Core] HTTPHeaders.swift 분석</title>
        <description>&lt;h2 id=&quot;httpheaders&quot;&gt;HTTPHeaders&lt;/h2&gt;

&lt;h3 id=&quot;httpheaders는-struct&quot;&gt;HTTPHeaders는 struct&lt;/h3&gt;

&lt;p&gt;HTTPHeaders는 struct 타입이다. 내부에서 reference 타입을 다루지 않기 때문에 ARC로 인한 성능저하를 우려하지 않아도 된다.&lt;/p&gt;

&lt;h3 id=&quot;http-header를-담고-있는-배열이-있다&quot;&gt;HTTP header를 담고 있는 배열이 있다.&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;headers라는 private으로 선언된 HTTPHeader의 배열이 존재한다.&lt;/p&gt;

&lt;p&gt;HTTPHeader는 Alamofire에서 제공하는 struct이다.&lt;/p&gt;

&lt;h3 id=&quot;세-종류의-init&quot;&gt;세 종류의 init&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빈 instance를 생성하는 이니셜라이저, HTTPHeader 배열을 받아 headers 초기화하는 이니셜라이저, header를 key와 value가  String 딕셔너리를 받아 headers를 초기화하는 이니셜라이저가 있다.&lt;/p&gt;

&lt;h3 id=&quot;header의-추가-삭제-정렬&quot;&gt;header의 추가, 삭제, 정렬&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replaceSubrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeaders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;add, update를 통해 기본적인 header의 추가가 가능하다. HTTPHeader 타입을 통해서 추가할수도 있고 key value String 쌍을 가지고도 가능하다. sort는 header를 알파벳 소문자순으로 정렬해주는 기능을 한다.&lt;/p&gt;

&lt;h3 id=&quot;header의-value-값&quot;&gt;header의 value 값&lt;/h3&gt;

&lt;p&gt;headers에 담긴 원소는 두가지 방법을 통해 접근할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public func value(for name: String) -&amp;gt; String?&lt;/code&gt;을 이용해 key값을 String으로 넣어주면 value를 String?으로 받아볼 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public subscript(_ name: String) -&amp;gt; String?&lt;/code&gt; subscript가 구현되어 있으므로 대괄호를 통해 딕셔너리에 접근하듯 접근할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;추가로 dictionary라는 연산프로퍼티가 존재하며 headers를 통해 Dictionary 타입을 만들어 리턴한다.&lt;/p&gt;

&lt;h3 id=&quot;httpheaders가-추가로-conform하는-프로토콜들&quot;&gt;HTTPHeaders가 추가로 conform하는 프로토콜들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ExpressibleByDictionaryLiteral
HTTPHeaders type의 instance는 그 자체로 dictionary로 취급될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ExpressibleByArrayLiteral
HTTPHeaders type의 instance는 그 자체로 arrary로 취급될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sequence&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Collection
Sequence, Collection 프로토콜을 conform하고 있다. Collection conform을 통해 subscript가 구현되어 있으므로 index를 통해 접근할 수 있으며 startIndex, endIndex, Index(after:)를 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CustomStringConvertible
설명보다 코드를 보는게 이해가 더 빠를 것 같아 코드를 첨부&lt;/p&gt;

    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추가-extension들&quot;&gt;추가 extension들&lt;/h3&gt;

&lt;p&gt;파일의 하단에 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLRequest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPURLResponse&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLSessionConfiguration&lt;/code&gt;의 extension을 통해 headers라는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPHeaders&lt;/code&gt; type의 변수를 연산 프로퍼티로 가지게 했음을 알 수 있다. 이를 통해 해당 타입의 프로퍼티로 headers를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;이 글에 설명된 것 외에도 HTTPHeader struct, type property인 default도 구현되어있다. 
&lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPHeaders.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/HTTPHeaders.swift&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/HTTPHeaders/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/HTTPHeaders/</guid>
        
        <category>Alamofire</category>
        
        <category>HTTPHeaders</category>
        
        
        <category>Alamofire</category>
        
        <category>분석</category>
        
      </item>
    
      <item>
        <title>[Core] AFError.swift 분석</title>
        <description>&lt;h2 id=&quot;aferror&quot;&gt;AFError&lt;/h2&gt;

&lt;p&gt;Alamofire의 Error들은 AFError.swift라는 하나의 파일 내에서 관리된다.&lt;/p&gt;

&lt;p&gt;가장 큰 틀인 AFError(enum type) 안에 여러 enum, struct가 nested되어있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AFError - Nested Enum - Case&lt;/code&gt; 구조로 이루어져있으며 Nested Enum에서 어떤 작업이 실패했는지를, Case에서 그 이유를 설명하는 구조로 이루어져있다.&lt;/p&gt;

&lt;h4 id=&quot;계층-구조-error-example&quot;&gt;계층 구조 Error Example&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AFError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MultipartEncodingFailureReason&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bodyPartURLInvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;/// Multipart form encoding failed.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multipartEncodingFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MultipartEncodingFailureReason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nested Enum에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MultipartEncodingFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParameterEncodingFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResponseValidationFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerTrustFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLRequestValidationFailureReason&lt;/code&gt; 이 있다. 네이밍이 매우 직관적이어서 사용자 입장에서 편할 것 같다.&lt;/p&gt;

&lt;p&gt;간혹 struct가 nested 되어있는 경우가 있는데, 이는 swift enum의 특성상 stored property를 저장할 수 없기 때문인 것으로 보인다.&lt;/p&gt;

&lt;h4 id=&quot;nested-enum-example&quot;&gt;Nested Enum Example&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnexpectedInputStreamLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// The expected byte count to read.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytesExpected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt64&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// The actual byte count read.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt64&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다양한 연산  프로퍼티는 AFError, nested Enum 등 여러 활용용도에 맞추어 extension으로 각각 분리되어있다.&lt;/p&gt;

&lt;h4 id=&quot;extension을-통한-연산-프로퍼티-제공-example&quot;&gt;Extension을 통한 연산 프로퍼티 제공 Example&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AFError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParameterEncodingFailureReason&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;underlyingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jsonEncodingFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;customEncodingFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;missingURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;소스코드 전문은 &lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/AFError.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/AFError.swift&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/AFError/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/AFError/</guid>
        
        <category>Alamofire</category>
        
        <category>AFError</category>
        
        
        <category>Alamofire</category>
        
        <category>분석</category>
        
      </item>
    
      <item>
        <title>왜 UI작업은 main thread에서 해야할까?</title>
        <description>&lt;h2 id=&quot;uikit은-nonatomic&quot;&gt;UIKit은 Nonatomic&lt;/h2&gt;

&lt;p&gt;UIKit이 만약 atomic이었다면 thread safe를 보장해주는 block 메커니즘이 필요하다. 이는 성능의 저하를 야기하게 된다. 게다가 UIKit은 거대한 프레임워크이기 때문에 thread safe하게 디자인하는 것은 현실적으로 불가능하다.&lt;/p&gt;

&lt;p&gt;불가능함을 설명하는 몇가지 상황들&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만약 뷰의 속성을 비동기적으로 변경하였다면, 이 변경사항들을 모았다가 동시에 처리할지, 그때그때 스레드별로 처리할지 정할 수 없다.&lt;/li&gt;
  &lt;li&gt;스레드별로 view에 대한 서로 다른 처리를 지시했을 때 어떤 명령을 먼저 처리할지에 관한 문제를 해결할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;runloop와-view-drawing-cycle&quot;&gt;Runloop와 View Drawing Cycle&lt;/h2&gt;

&lt;p&gt;UIApplication은 main thread에서 Main Run Loop라 불리는 런루프를 생성한다. 앱 내에서 발생하는 대부분의 이벤트를 관장한다. 이 Main Run Loop를 통해 스크린의 내용이 refresh될 수 있다.&lt;/p&gt;

&lt;p&gt;view의 변경은 즉시 일어나지 않는다. 이번 RunLoop의 마지막에 redraw하여 view가 변하게 되는데, 이러한 변경을 View Drawing Cycle이라 부른다.&lt;/p&gt;

&lt;p&gt;이러한 Run Loop는 thread마다 가지고있기 때문에 만약 background thread에서 view의 변경이 가능하다면 view가 동시에 변해야하는 상황(화면의 회전 등)에서 view들이 동시에 변하지 않는 문제가 발생할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;rendering-process&quot;&gt;Rendering Process&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725181859.jpeg&quot; alt=&quot;1*soHoOFPSdKlbR9D1KvbUhw&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uikit&quot;&gt;UIKit&lt;/h3&gt;

&lt;p&gt;모든 종류의 컴포넌트들을 가지고 있으며 유저 이벤트를 핸들한다. 하지만 랜더링과 관련된 코드는 들고있지 않다.&lt;/p&gt;

&lt;h3 id=&quot;core-animation&quot;&gt;Core Animation&lt;/h3&gt;

&lt;p&gt;draw의 책임을 지고 있다. 모든 view를 display하고 animate한다.&lt;/p&gt;

&lt;h3 id=&quot;opengl-es&quot;&gt;OpenGL ES&lt;/h3&gt;

&lt;p&gt;2D, 3D 랜더링을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;core-graphics&quot;&gt;Core Graphics&lt;/h3&gt;

&lt;p&gt;2D 랜더링을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;graphics-hardware&quot;&gt;Graphics Hardware&lt;/h3&gt;

&lt;p&gt;GPU가 있는 영역이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725182122.jpeg&quot; alt=&quot;1*MHtDsFMpROhOF7yVwYVvCA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코어 애니메이션은 위의 파이프라인 방식을 통해 랜더링을 진행하며 이는 4단계로 나뉜다.&lt;/p&gt;

&lt;h3 id=&quot;1-commit-transaction&quot;&gt;1. Commit Transaction&lt;/h3&gt;

&lt;p&gt;view를 레이아웃하고 이미지를 디코딩하여 Render Server에 이를 전달한다.&lt;/p&gt;

&lt;h3 id=&quot;2-render-server&quot;&gt;2. Render Server&lt;/h3&gt;

&lt;p&gt;Commit Transaction으로부터 받은 package를 분석하고 deserialize하여 rendering tree에 보낸다. 이후에 drawing instruction들을 생성하고 VSync Signal을 기다렸다가 화면을 랜더링하기 위해 OpenGL을 호출한다.&lt;/p&gt;

&lt;h3 id=&quot;3-gpu&quot;&gt;3. GPU&lt;/h3&gt;

&lt;p&gt;VSync Signal이 떨어지면 OpenGL을 사용하여 랜더링을 시작한다. 랜더링이 끝난뒤에는 buffer로 내용을 전달한다.&lt;/p&gt;

&lt;h3 id=&quot;4-display&quot;&gt;4. Display&lt;/h3&gt;

&lt;p&gt;Buffer로부터 데이터를 받아서 화면에 띄워준다.&lt;/p&gt;

&lt;p&gt;위의 파이프라인 과정이 1초당 60번 (60Hz 주사율 기준) 이루어지게 된다. 만약 백그라운드 스레드를 활용해서 view를 변경한다면 여러 스레드에서 위의 파이프라인을 시작하는 trigger를 당기게 된다. 위의 파이프라인은 굉장히 비싼 작업이기 때문에 (GPU의 메모리 낭비 극심) 빈번한 context switching은 막는 것이 좋다.&lt;/p&gt;

&lt;h2 id=&quot;개선할-수-있는-방법은-없을까&quot;&gt;개선할 수 있는 방법은 없을까?&lt;/h2&gt;

&lt;p&gt;Texture, ComponenetKit 을 이용해서 일정부분을 해결할 수 있다고 한다.&lt;/p&gt;

&lt;p&gt;Texture의 Node는 thread safe함과 동시에 UIView를 가지고 있으므로 main thread가 아니어도 UI 작업을 처리해줄 수 있다.&lt;/p&gt;

&lt;p&gt;ComponentKit도 마찬가지로 thread safe를 보장한다.&lt;/p&gt;

&lt;h3 id=&quot;참고링크&quot;&gt;참고링크&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@duwei199714/ios-why-the-ui-need-to-be-updated-on-main-thread-fd0fef070e7f&quot;&gt;https://medium.com/@duwei199714/ios-why-the-ui-need-to-be-updated-on-main-thread-fd0fef070e7f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhyUIOnlyInMainThread/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhyUIOnlyInMainThread/</guid>
        
        <category>main thread</category>
        
        <category>UI</category>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
