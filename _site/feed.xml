<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neph's Blog</title>
    <description>Write code with my soul.</description>
    <link>https://neph3779.github.io/</link>
    <atom:link href="https://neph3779.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 29 Jul 2021 18:22:32 +0900</pubDate>
    <lastBuildDate>Thu, 29 Jul 2021 18:22:32 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>[Core] HTTPHeaders.swift 분석</title>
        <description>&lt;h2 id=&quot;httpheaders&quot;&gt;HTTPHeaders&lt;/h2&gt;

&lt;h3 id=&quot;httpheaders는-struct&quot;&gt;HTTPHeaders는 struct&lt;/h3&gt;

&lt;p&gt;HTTPHeaders는 struct 타입이다. 내부에서 reference 타입을 다루지 않기 때문에 ARC로 인한 성능저하를 우려하지 않아도 된다.&lt;/p&gt;

&lt;h3 id=&quot;http-header를-담고-있는-배열이-있다&quot;&gt;HTTP header를 담고 있는 배열이 있다.&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;headers라는 private으로 선언된 HTTPHeader의 배열이 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;세-종류의-init&quot;&gt;세 종류의 init&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빈 instance를 생성하는 이니셜라이저, HTTPHeader 배열을 받아 headers 초기화하는 이니셜라이저, header를 key와 value가  String 딕셔너리를 받아 headers를 초기화하는 이니셜라이저가 있다.&lt;/p&gt;

&lt;h3 id=&quot;header의-추가-삭제-정렬&quot;&gt;header의 추가, 삭제, 정렬&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replaceSubrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HTTPHeaders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/HTTPHeaders/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/HTTPHeaders/</guid>
        
        <category>Alamofire</category>
        
        <category>AFError</category>
        
        
        <category>Alamofire</category>
        
        <category>분석</category>
        
      </item>
    
      <item>
        <title>[Core] AFError.swift 분석</title>
        <description>&lt;h2 id=&quot;aferror&quot;&gt;AFError&lt;/h2&gt;

&lt;p&gt;Alamofire의 Error들은 AFError.swift라는 하나의 파일 내에서 관리된다.&lt;/p&gt;

&lt;p&gt;가장 큰 틀인 AFError(enum type) 안에 여러 enum, struct가 nested되어있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AFError - Nested Enum - Case&lt;/code&gt; 구조로 이루어져있으며 Nested Enum에서 어떤 작업이 실패했는지를, Case에서 그 이유를 설명하는 구조로 이루어져있다.&lt;/p&gt;

&lt;h4 id=&quot;계층-구조-error-example&quot;&gt;계층 구조 Error Example&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AFError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MultipartEncodingFailureReason&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bodyPartURLInvalid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;/// Multipart form encoding failed.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multipartEncodingFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MultipartEncodingFailureReason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nested Enum에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MultipartEncodingFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParameterEncodingFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResponseValidationFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServerTrustFailureReason&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLRequestValidationFailureReason&lt;/code&gt; 이 있다. 네이밍이 매우 직관적이어서 사용자 입장에서 편할 것 같다.&lt;/p&gt;

&lt;p&gt;간혹 struct가 nested 되어있는 경우가 있는데, 이는 swift enum의 특성상 stored property를 저장할 수 없기 때문인 것으로 보인다.&lt;/p&gt;

&lt;h4 id=&quot;nested-enum-example&quot;&gt;Nested Enum Example&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnexpectedInputStreamLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// The expected byte count to read.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytesExpected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt64&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// The actual byte count read.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt64&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다양한 연산  프로퍼티는 AFError, nested Enum 등 여러 활용용도에 맞추어 extension으로 각각 분리되어있다.&lt;/p&gt;

&lt;h4 id=&quot;extension을-통한-연산-프로퍼티-제공-example&quot;&gt;Extension을 통한 연산 프로퍼티 제공 Example&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AFError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParameterEncodingFailureReason&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;underlyingError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jsonEncodingFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;customEncodingFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;missingURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;소스코드 전문은 &lt;a href=&quot;https://github.com/Alamofire/Alamofire/blob/master/Source/AFError.swift&quot;&gt;https://github.com/Alamofire/Alamofire/blob/master/Source/AFError.swift&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/AFError/</link>
        <guid isPermaLink="true">https://neph3779.github.io/alamofire/%EB%B6%84%EC%84%9D/AFError/</guid>
        
        <category>Alamofire</category>
        
        <category>AFError</category>
        
        
        <category>Alamofire</category>
        
        <category>분석</category>
        
      </item>
    
      <item>
        <title>왜 UI작업은 main thread에서 해야할까?</title>
        <description>&lt;h2 id=&quot;uikit은-nonatomic&quot;&gt;UIKit은 Nonatomic&lt;/h2&gt;

&lt;p&gt;UIKit이 만약 atomic이었다면 thread safe를 보장해주는 block 메커니즘이 필요하다. 이는 성능의 저하를 야기하게 된다. 게다가 UIKit은 거대한 프레임워크이기 때문에 thread safe하게 디자인하는 것은 현실적으로 불가능하다.&lt;/p&gt;

&lt;p&gt;불가능함을 설명하는 몇가지 상황들&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만약 뷰의 속성을 비동기적으로 변경하였다면, 이 변경사항들을 모았다가 동시에 처리할지, 그때그때 스레드별로 처리할지 정할 수 없다.&lt;/li&gt;
  &lt;li&gt;스레드별로 view에 대한 서로 다른 처리를 지시했을 때 어떤 명령을 먼저 처리할지에 관한 문제를 해결할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;runloop와-view-drawing-cycle&quot;&gt;Runloop와 View Drawing Cycle&lt;/h2&gt;

&lt;p&gt;UIApplication은 main thread에서 Main Run Loop라 불리는 런루프를 생성한다. 앱 내에서 발생하는 대부분의 이벤트를 관장한다. 이 Main Run Loop를 통해 스크린의 내용이 refresh될 수 있다.&lt;/p&gt;

&lt;p&gt;view의 변경은 즉시 일어나지 않는다. 이번 RunLoop의 마지막에 redraw하여 view가 변하게 되는데, 이러한 변경을 View Drawing Cycle이라 부른다.&lt;/p&gt;

&lt;p&gt;이러한 Run Loop는 thread마다 가지고있기 때문에 만약 background thread에서 view의 변경이 가능하다면 view가 동시에 변해야하는 상황(화면의 회전 등)에서 view들이 동시에 변하지 않는 문제가 발생할 것이다.&lt;/p&gt;

&lt;h2 id=&quot;rendering-process&quot;&gt;Rendering Process&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725181859.jpeg&quot; alt=&quot;1*soHoOFPSdKlbR9D1KvbUhw&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uikit&quot;&gt;UIKit&lt;/h3&gt;

&lt;p&gt;모든 종류의 컴포넌트들을 가지고 있으며 유저 이벤트를 핸들한다. 하지만 랜더링과 관련된 코드는 들고있지 않다.&lt;/p&gt;

&lt;h3 id=&quot;core-animation&quot;&gt;Core Animation&lt;/h3&gt;

&lt;p&gt;draw의 책임을 지고 있다. 모든 view를 display하고 animate한다.&lt;/p&gt;

&lt;h3 id=&quot;opengl-es&quot;&gt;OpenGL ES&lt;/h3&gt;

&lt;p&gt;2D, 3D 랜더링을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;core-graphics&quot;&gt;Core Graphics&lt;/h3&gt;

&lt;p&gt;2D 랜더링을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;graphics-hardware&quot;&gt;Graphics Hardware&lt;/h3&gt;

&lt;p&gt;GPU가 있는 영역이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725182122.jpeg&quot; alt=&quot;1*MHtDsFMpROhOF7yVwYVvCA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코어 애니메이션은 위의 파이프라인 방식을 통해 랜더링을 진행하며 이는 4단계로 나뉜다.&lt;/p&gt;

&lt;h3 id=&quot;1-commit-transaction&quot;&gt;1. Commit Transaction&lt;/h3&gt;

&lt;p&gt;view를 레이아웃하고 이미지를 디코딩하여 Render Server에 이를 전달한다.&lt;/p&gt;

&lt;h3 id=&quot;2-render-server&quot;&gt;2. Render Server&lt;/h3&gt;

&lt;p&gt;Commit Transaction으로부터 받은 package를 분석하고 deserialize하여 rendering tree에 보낸다. 이후에 drawing instruction들을 생성하고 VSync Signal을 기다렸다가 화면을 랜더링하기 위해 OpenGL을 호출한다.&lt;/p&gt;

&lt;h3 id=&quot;3-gpu&quot;&gt;3. GPU&lt;/h3&gt;

&lt;p&gt;VSync Signal이 떨어지면 OpenGL을 사용하여 랜더링을 시작한다. 랜더링이 끝난뒤에는 buffer로 내용을 전달한다.&lt;/p&gt;

&lt;h3 id=&quot;4-display&quot;&gt;4. Display&lt;/h3&gt;

&lt;p&gt;Buffer로부터 데이터를 받아서 화면에 띄워준다.&lt;/p&gt;

&lt;p&gt;위의 파이프라인 과정이 1초당 60번 (60Hz 주사율 기준) 이루어지게 된다. 만약 백그라운드 스레드를 활용해서 view를 변경한다면 여러 스레드에서 위의 파이프라인을 시작하는 trigger를 당기게 된다. 위의 파이프라인은 굉장히 비싼 작업이기 때문에 (GPU의 메모리 낭비 극심) 빈번한 context switching은 막는 것이 좋다.&lt;/p&gt;

&lt;h2 id=&quot;개선할-수-있는-방법은-없을까&quot;&gt;개선할 수 있는 방법은 없을까?&lt;/h2&gt;

&lt;p&gt;Texture, ComponenetKit 을 이용해서 일정부분을 해결할 수 있다고 한다.&lt;/p&gt;

&lt;p&gt;Texture의 Node는 thread safe함과 동시에 UIView를 가지고 있으므로 main thread가 아니어도 UI 작업을 처리해줄 수 있다.&lt;/p&gt;

&lt;p&gt;ComponentKit도 마찬가지로 thread safe를 보장한다.&lt;/p&gt;

&lt;h3 id=&quot;참고링크&quot;&gt;참고링크&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@duwei199714/ios-why-the-ui-need-to-be-updated-on-main-thread-fd0fef070e7f&quot;&gt;https://medium.com/@duwei199714/ios-why-the-ui-need-to-be-updated-on-main-thread-fd0fef070e7f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhyUIOnlyInMainThread/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhyUIOnlyInMainThread/</guid>
        
        <category>main thread</category>
        
        <category>UI</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>UIApplicationMain은 뭐하는 함수일까?</title>
        <description>&lt;h2 id=&quot;uiapplication&quot;&gt;UIApplication&lt;/h2&gt;

&lt;p&gt;UIApplication의 singleton instance는 앱의 시작시에 생성된다. 이 instance를 제작하는 함수가 바로 UIApplicationMain 함수이다. 이 외에도 App Delegate의 제작과 event cycle의 설정을 담당하는 역할을 가진다.&lt;/p&gt;

&lt;h2 id=&quot;uiapplicationmain&quot;&gt;UIApplicationMain&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                     &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CChar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                     &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;principalClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; 
                     &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegateClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수는 다음과 같이 생겼다. Swift는 C언어 기반의 언어이기 때문에 C의 main함수와 유사한 모양을 띄고 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;argc는 argument value의 수, argv는 argument value이다.&lt;/p&gt;

&lt;p&gt;principalClassName은 UIApplication or 이를 상속받은 하위 클래스의 이름이다. singleton으로 생성될 클래스의 이름을 Stirng으로 받아서 사용한다.&lt;/p&gt;

&lt;p&gt;delegateClassName은 App Delegate 클래스의 이름이다. pincipalClassName에서 UIApplication의 하위 클래스를 넘겨주었다면 여기서도 하위 클래스를 지정해줄 수 있다.&lt;/p&gt;

&lt;p&gt;C의 main 함수처럼 반환값은 무의미하다.&lt;/p&gt;

&lt;p&gt;주요 클래스의 인스턴스를 생성하거나 주어진 클래스나 app delegate을 통해 delegate 인스턴스를 생성한다. 또한 메인 이벤트 루프, 어플리케이션 실행 루프, 프로세스 이벤트의 시작점을 설정한다. info.plist 파일에 NSMainNibFile Key나 값이 유효한 nib 파일 이름이 포함된 로드하려는 특정 nib파일을 지정한다면 이 함수를 통해 nib 파일을 로드된다.&lt;/p&gt;

&lt;h3 id=&quot;참고링크&quot;&gt;참고링크&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain/&lt;a href=&quot;https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain/&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/WhatIsUIApplicationMain/</link>
        <guid isPermaLink="true">https://neph3779.github.io/WhatIsUIApplicationMain/</guid>
        
        
      </item>
    
      <item>
        <title>App thining</title>
        <description>&lt;h2 id=&quot;app-thinning이란&quot;&gt;App Thinning이란?&lt;/h2&gt;

&lt;p&gt;앱을 특정 디바이스에 설치할 때 굳이 들어가지 않아도 되는 파일들을 생략하고 그 디바이스에 맞게 설치하는 최적화 기술을 App Thinning이라고 한다. 앞의 문장에서 알 수 있듯 하나의 앱은 아래와 같이 여러가지 파일들이 섞여있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725190835.png&quot; alt=&quot;?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FccHkki%2FbtqMNwMWH1E%2F9ECfXenzBbiitySkTphFJ0%2Fimg&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;app-slicing&quot;&gt;App Slicing&lt;/h3&gt;

&lt;p&gt;꼭 필요한 것만을 다운 받는 과정을 App Slicing이라고 한다.&lt;/p&gt;

&lt;p&gt;App Slicing을 통해 필요한 것만을 다운받으면 아래와 같은 모양새가 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725190924.png&quot; alt=&quot;?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcyHPmL%2FbtqMTgvf1NB%2F8TDe7i1f9aNbIRTs57JsIk%2Fimg&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;즉, 개발자가 앱의 전체 버전을 App store에 업로드하면 앱 스토어는 각 디바이스의 특성에 맞는 다양한 버전의 조각들 (별도의 .ipa 파일들)을 생성한다. 사용자가 앱을 실제로 설치할 때는 앱의 전체 버전이 아닌 slicing된 조각들 중 사용자에게 가장 적합한 조각이 설치된다. 그리고 이 App Slicing은 앱스토어가 알아서 처리해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725191103.png&quot; alt=&quot;?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcr1BBh%2FbtqMOyQ0RXl%2FmnpwXDMpNO96k7wNCxOP0k%2Fimg&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;on-demand-resource-주문형-리소스&quot;&gt;On Demand Resource (주문형 리소스)&lt;/h3&gt;

&lt;p&gt;유저가 요청할 때 앱스토어로부터 더 많은 리소스를 가져올 수 있는 개념이다. 보통 게임에서 많이 찾아볼 수 있는데 게임 내의 sound를 유저가 선택하여 다운받을 수 있도록 해주는 경우가 많다.&lt;/p&gt;

&lt;p&gt;주문형 리소스는 앱스토어에 IPA파일과는 별도로 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725191517.png&quot; alt=&quot;?scode=mtistory2&amp;amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbOsCEz%2FbtqMX9I76tB%2FLuYzKxGDVccPRsInfkp3kk%2Fimg&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앱의 전체 버전에는 위와 같이 전체 리소스가 올라간다.&lt;/p&gt;

&lt;p&gt;이 중에서 일부만을 유저가 받게하고 나머지는 필요시에만 받도록 하는 것이 ODR이다.&lt;/p&gt;

&lt;h4 id=&quot;odr의-생명주기&quot;&gt;ODR의 생명주기&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210725192612.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;비트코드&quot;&gt;비트코드&lt;/h3&gt;

&lt;p&gt;기계언어로 번역되기 이전 단계의 중간표현(Intermediate Representation)을 비트코드라 한다. 프로젝트 옵션에서 사용여부를 선택할 수 있다(디폴트 on).&lt;/p&gt;

&lt;p&gt;비트코드를 사용하여 앱을 업로드를 하면 애플리케이션을 재컴파일하여 앱 바이너리(app binary)를 생성한다. 즉, 최신 컴파일러용에 맞게 자동으로 앱을 컴파일하고, 특정 아키텍처에 맞게 최적화한다.&lt;/p&gt;

&lt;p&gt;반면 비트코드를 사용하지 않으면,  모든것을 실행할 수 있음 + 모든 환경이라는 조건을 갖춘 바이너리(여러개)를 생성하여 이를 하나로 합친 fat binary가 업로드된다.&lt;/p&gt;

&lt;p&gt;비트코드를 사용하면 필요 경우에 맞게 재컴파일하게 되므로 최적화가 가능한 것이다.&lt;/p&gt;

&lt;p&gt;비트코드 사용시 개발자 입장에서 단점이 생기는데 디버깅할 때 필요한 dysm 파일을 따로 받아야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;비트코드를 통해 애플은 앱을 “재컴파일”하여 유저에게 새로운 바이너리를 제공하기 때문에, XCode에서 내가 올린 바이너리와 실제 사용자가 받는 바이너리가 다르다.&lt;/p&gt;

&lt;p&gt;따라서 개발자가 크래쉬에대한 정보를 보려면, App Store Connect에서 개발자가 올린 앱의 dysm파일을 따로 다운로드하여 크래쉬 분석 툴에 올려줘야한다.&lt;/p&gt;

&lt;h3 id=&quot;참고링크&quot;&gt;참고링크&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f&quot;&gt;https://help.apple.com/xcode/mac/current/#/devbbdc5ce4f&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyunndyblog.tistory.com/151&quot;&gt;https://hyunndyblog.tistory.com/151&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=horajjan&amp;amp;logNo=220585718693&quot;&gt;https://blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=horajjan&amp;amp;logNo=220585718693&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 25 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatIsAppThinning/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatIsAppThinning/</guid>
        
        <category>App thining</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>UIApplicationDelegate 메서드</title>
        <description>&lt;h2 id=&quot;appdelegate이란&quot;&gt;AppDelegate이란?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIApplicationDelegate&lt;/code&gt;의 subclass로 기본 생성되는 AppDelegate는 앱 전반적으로 공유하게 될 자원, 동작을 관리하는 역할을 수행한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIApplication&lt;/code&gt;의 Delegate이라는 이름에 맞게 앱의 기능들 중 일부를 대신하여 처리해준다.&lt;/p&gt;

&lt;h3 id=&quot;app-delegate-객체가-담당하는-일들&quot;&gt;App Delegate 객체가 담당하는 일들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;앱의 데이터 구조를 초기화한다.&lt;/li&gt;
  &lt;li&gt;앱의 scene을 configure한다.&lt;/li&gt;
  &lt;li&gt;앱 외부로부터 들어오는 notification(배터리 부족 notification 등..)들을 관리한다.&lt;/li&gt;
  &lt;li&gt;앱 자신의 이벤트에 답한다. (scene의 이벤트뿐만 아닌 view, view controller를 포함)&lt;/li&gt;
  &lt;li&gt;launch time에 실행, 등록되어야 할 업무를 처리한다. (Apple Push Notification 등)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;appdelegate의-메서드들&quot;&gt;AppDelegate의 메서드들&lt;/h2&gt;

&lt;p&gt;자주 사용하는 App launching, Scene, App LifeCycle 메서드는 링크를 달아놓았고, 그 외의 메서드는 공식문서에서 직접 확인하는 것이 좋을 것 같아 설명만 적어놓았다.&lt;/p&gt;

&lt;h3 id=&quot;app-시작시점과-연관된-메서드&quot;&gt;App 시작시점과 연관된 메서드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623032-application&quot;&gt;application(_:willFinishLaunchingWithOptions:)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622921-application&quot;&gt;application(_:didFinishLaunchingWithOptions:)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplication/launchoptionskey&quot;&gt;UIApplication.LaunchOptionsKey&lt;/a&gt;를 이용하여 앱의 시작시점에 launching option을 확인하는 메서드들이다.&lt;/p&gt;

&lt;p&gt;launch 종료시에 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplication/1622971-didfinishlaunchingnotification&quot;&gt;didFinishLaunchingNotification&lt;/a&gt;이 발송되며 이를 통해 launch 종료 여부를 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;scene관련-메서드&quot;&gt;Scene관련 메서드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/3197905-application&quot;&gt;application(_:configurationForConnecting:options:)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/3197906-application&quot;&gt;application(_:didDiscardSceneSessions:)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;scene이 생성될 때, 사라질 때 불리는 메서드들이다. scene 생성 이전에, 소멸 이후에 해줘야하는 작업들을 처리해줄 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;환경변화에-따른-응답-메서드&quot;&gt;환경변화에 따른 응답 메서드&lt;/h3&gt;

&lt;p&gt;파일의 사용가능 여부에 변화가 일어나는 경우, 메모리가 부족한 경우에 notification을 받게되고 특정 메서드가 실행된다. 위의 상황들에 대처할 수 있는 코드를 적을 수 있는 메서드들이다.&lt;/p&gt;

&lt;h3 id=&quot;앱의-상태를-보전복구하는-메서드&quot;&gt;앱의 상태를 보전/복구하는 메서드&lt;/h3&gt;

&lt;p&gt;앱의 상태를 보전해야할 때, 복구해야할 때 사용하는 메서드들이다.&lt;/p&gt;

&lt;h3 id=&quot;background-data-download-관련-메서드&quot;&gt;Background Data Download 관련 메서드&lt;/h3&gt;

&lt;p&gt;백그라운드 상태에서 다운로드를 진행할 때, 다운로드 진행중의 행동, 종료시 completionHandler 등을 정의할 수 있다.ㅏ&lt;/p&gt;

&lt;h3 id=&quot;remote-notification-등록-관련-메서드&quot;&gt;Remote Notification 등록 관련 메서드&lt;/h3&gt;

&lt;p&gt;외부에서 들어오는 Notification을 담당하는 메서드들이다. Notification을 받은 경우, 등록에 성공한 경우, 등록에 실패한 경우에 따라 다양한 처리를 해줄 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;사용자-액티비티-퀵-액션-관련-메서드&quot;&gt;사용자 액티비티, 퀵 액션 관련 메서드&lt;/h3&gt;

&lt;p&gt;사용자의 액티비티, 퀵 액션과 관련하여 여러 처리를 해줄 수 있는 메서드이다. 사용자 액티비티는 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsuseractivity&quot;&gt;https://developer.apple.com/documentation/foundation/nsuseractivity&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;watch-health-siri-cloud-kit-관련-메서드&quot;&gt;Watch, Health, Siri, Cloud Kit 관련 메서드&lt;/h3&gt;

&lt;p&gt;다양한 Kit들과 연관하여 앱을 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;url-resource-관련-메서드&quot;&gt;URL Resource 관련 메서드&lt;/h3&gt;

&lt;p&gt;URL Resource를 열도록 지시하는 시점에 추가 작업을 해줄 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;geometry-관련-메서드&quot;&gt;Geometry 관련 메서드&lt;/h3&gt;

&lt;p&gt;위치정보 등과 관련한 앱이 사용할 수 있는 메서드들이다.&lt;/p&gt;

&lt;h3 id=&quot;entry-point-스토리보드용&quot;&gt;Entry Point (스토리보드용)&lt;/h3&gt;

&lt;p&gt;storyboard를 통해 진입할 때 사용하는 main 함수이다.&lt;/p&gt;

&lt;h2 id=&quot;app-life-cycle-관련-메서드&quot;&gt;App Life Cycle 관련 메서드&lt;/h2&gt;

&lt;h3 id=&quot;not-running&quot;&gt;Not Running&lt;/h3&gt;

&lt;p&gt;말 그대로 앱을 실행하지 않은 상태이다. 이 시점에 호출되는 메서드는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623032-application&quot;&gt;application(_:willFinishLaunchingWithOptions:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱 실행을 준비하는 메서드로 필요한 주요 객체들을 생성, 앱 실행 준비가 끝나기 직전에 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622921-application&quot;&gt;application(_:didFinishLaunchingWithOptions:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱 실행을 위한 모든 준비가 끝난 후 화면이 사용자에게 보여지기 직전에 호출되는 메서드로, 초기화 코드를 이곳에 작성한다.&lt;/p&gt;

&lt;p&gt;이 메서드의 return value가 반환된 이후, 다른 app delegate의 메서드가 실행되어 forground state로 진입한다.&lt;/p&gt;

&lt;p&gt;launch option을 사용할 수 있는 마지막 장소이다.&lt;/p&gt;

&lt;p&gt;애플에서는 다음과 같은 당부를 전달한다. (didFinish.. 메서드 대신  willFinish.. 메서드를 이용할 것을 권장한다는 내용)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Important&lt;/p&gt;

  &lt;p&gt;For app initialization, it is highly recommended that you use this method and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application(_:willFinishLaunchingWithOptions:)&lt;/code&gt; method and do not use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;applicationDidFinishLaunching(_:)&lt;/code&gt; method, which is intended only for apps that run on older versions of iOS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623111-applicationwillterminate&quot;&gt;applicationWillTerminate(_:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱이 종료되기 직전에 호출되는 메서드로 app의 task를 clean-up하거나 공유 자원의 free, user data의 저장, timer의 초기화 등의 작업을 위한 코드를 이곳에 작성한다.&lt;/p&gt;

&lt;p&gt;다만 메모리 확보를 위해 suspended 상태에 있는 앱이 종료되는 경우, background 상태에서 사용자에 의해 종료되는 경우, 오류로 인해 앱이 종료되는 경우에 이 메서드는 호출되지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;inactive&quot;&gt;InActive&lt;/h3&gt;

&lt;p&gt;앱이 실행되면서 foreground에 진입하거나 foreground에서 background로 이동하는 시점. 어떠한 이벤트도 받지 않는 상태이며 다음과 같은 메서드들이 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscenedelegate/3197918-scenewillenterforeground&quot;&gt;sceneWillEnterForeground(_:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623076-applicationwillenterforeground&quot;&gt;applicationWillEnterForeground(_:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱이 실행되며 foreground에 진입하기 직전 호출되는 메서드이다.&lt;/p&gt;

&lt;p&gt;전자의 메서드가 호출되는 경우는 UISceneDelegate이 구현되어있는 경우이다. 만약 전자의 메서드가 호출되었다면 후자는 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622950-applicationwillresignactive&quot;&gt;sceneWillResignActive(&lt;em&gt;:)](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197919-scenewillresignactive)
or
[applicationWillResignActive(&lt;/em&gt;:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱이 background로 진입하기 직전 호출되는 메서드이다. 위의 경우와 마찬가지로 UISceneDelegate의 구현여부에 따라 호출될 메서드가 결정된다.&lt;/p&gt;

&lt;p&gt;홈화면으로 이동하는 경우, 화면이 앱 실행 도중 잠기는 경우, 다른 앱으로 이동한 경우 등의 상황에서 앱은 background로 진입하게 되며&lt;/p&gt;

&lt;p&gt;멀티윈도우 상태, 알림센터나 제어센터를 보는 경우 등의 상황에서는 InActive 상태를 유지한채로 있는다.&lt;/p&gt;

&lt;h3 id=&quot;active&quot;&gt;Active&lt;/h3&gt;

&lt;p&gt;앱이 실행중이며 foreground에 있고 이벤트를 받고 있는 상태&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622956-applicationdidbecomeactive&quot;&gt;sceneDidBecomeActive(&lt;em&gt;:)](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197915-scenedidbecomeactive)
or
[applicationDidBecomeActive(&lt;/em&gt;:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위의 메서드에서 content를 refresh하거나 frame rate를 올리는 등의 작업을 실행해줄 수 있다. (실행될 메서드는 UISceneDelegate 구현 여부에 따라 결정됨)&lt;/p&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;앱이 background에 있으며 다른 앱으로 전환되었거나 홈 버튼을 통해 밖으로 나갔을 때의 상태&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscenedelegate/3197917-scenedidenterbackground?language=objc&quot;&gt;sceneDidEnterBackground(_:)&lt;/a&gt;
or
&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground?language=objc&quot;&gt;applicationDidEnterBackground:&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/AppDelegateMethods/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/AppDelegateMethods/</guid>
        
        <category>AppDelegate</category>
        
        <category>UIApplicationDelegate</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>escaping 클로저</title>
        <description>&lt;h2 id=&quot;escaping-closure를-사용하는-방법&quot;&gt;Escaping Closure를 사용하는 방법&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클로저의 타입 앞에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@escaping&lt;/code&gt; 키워드를 붙여주면 해당 클로저는 escaping closure로 사용할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;escaping-vs-non-escaping&quot;&gt;Escaping vs Non-Escaping&lt;/h2&gt;

&lt;p&gt;클로저를 함수 내부에서 사용할 때, 함수가 종료되었더라도 클로저가 사용될 수 있도록 해주는 키워드가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@escaping&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;함수가 종료되었는데 전달인자로 받은 클로저를 실행해야되는 경우로는 아래와 같은 예시들이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;비동기 작업으로 인해 클로저가 나중에 실행되는 경우&lt;/li&gt;
  &lt;li&gt;return 값으로 다시 그 클로저를 반환하는 경우&lt;/li&gt;
  &lt;li&gt;외부 변수에 클로저를 저장해야하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@escaping&lt;/code&gt; 키워드를 사용했지만 클로저를 밖에서 쓰지 않았다고 warning이나 error가 발생하지는 않는다. 다만 성능 개선을 위해서 가능한 경우에는 life cycle 명확한 non-escaping closure를 사용하는 것이 바람직하다.&lt;/p&gt;

&lt;h3 id=&quot;비동기-작업으로-인해-클로저가-나중에-실행되는-경우-예시&quot;&gt;비동기 작업으로 인해 클로저가 나중에 실행되는 경우 예시&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PostingItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MarketItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpenMarketError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decodedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MarketItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decodedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sessionManage.request는 비동기적으로 실행될 메서드이므로 completionHandler는 나중에 실행되게 된다. 이런 경우에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@escaping&lt;/code&gt; 키워드를 붙여주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;return-값으로-클로저를-반환하는-경우-예시&quot;&gt;return 값으로 클로저를 반환하는 경우 예시&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchImageDataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;urlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLSessionDataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;주의할-점&quot;&gt;주의할 점&lt;/h2&gt;

&lt;p&gt;Escaping closure은 함수의 전달인자로 전달하게 되는데 이 말은 클로저의 구현부는 다른 곳에 존재한다는 것이다.&lt;/p&gt;

&lt;p&gt;클로저를 구현할 때 내부에서 사용할 reference는 항상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weak&lt;/code&gt;으로 참조하여 사용해야한다. 이는 retain cycle을 통한 memory leak을 막기 위함이다. 보통 self를 사용하는 경우가 많으므로 클로저의 앞 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt;를 붙여줌으로써 메모리 누수를 막는다.&lt;/p&gt;

&lt;h2 id=&quot;참고한-링크&quot;&gt;참고한 링크&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xiS5gJOIQxI&amp;amp;ab_channel=SeanAllen&quot;&gt;https://www.youtube.com/watch?v=xiS5gJOIQxI&amp;amp;ab_channel=SeanAllen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 15 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatIsEscapingClosure/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatIsEscapingClosure/</guid>
        
        <category>closure</category>
        
        <category>escaping closure</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>App Bundle의 구조와 역할</title>
        <description>&lt;h2 id=&quot;bundle-vs-package&quot;&gt;Bundle vs Package&lt;/h2&gt;

&lt;h3 id=&quot;번들&quot;&gt;번들&lt;/h3&gt;

&lt;p&gt;알려진 것들로 이루어진 디렉토리, 실행 가능한 코드와 그 코드가 사용하는 자원들을 포함하고 있다.&lt;/p&gt;

&lt;p&gt;코드와 자원을 모으는 구조를 제공하여 개발자 경험을 향상시키는 것을 가장 우선시 하는데, 이 구조는 코드나 자원의 예측 가능한 로딩뿐만 아니라 지역화 같은 시스템 차원의 기능도 허용한다.&lt;/p&gt;

&lt;p&gt;번들은 크게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;앱 번들&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프레임워크 번들&lt;/code&gt;,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loadable 번들&lt;/code&gt;로 나눌 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;앱 번들&lt;/code&gt;은 실행될 수 있는 executable과 그 executable을 설명하는 Info.plist 파일 그리고 executable에서 사용되는 launch 이미지를 포함한 asset과 자원, 인터페이스 파일, string 파일, 데이터 파일로 이루어져 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프레임워크 번들&lt;/code&gt;은 dynamic shared library 라 불리는 동적 공유 라이브러리에서 사용되는 코드와 자원을 포함하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loadable 번들&lt;/code&gt;은 앱의 기능성을 확장시켜주는 실행 가능한 코드와 자원을 포함하고 있고 플러그인이 대표적인 예시이다.&lt;/p&gt;

&lt;p&gt;번들의 컨텐츠는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;을 사용해서 접근할 수 있으며 대부분의 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url(forResource:withExtension:)&lt;/code&gt;메서드를 사용하여 특정 자원의 위치를 알아낼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Photo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 앱 번들은 앱에 대한 정보가 담긴 Info.plist 파일을 가지며 bundleURL과 bundleIdentifier를 포함한 몇몇 메타 데이터는  아래와 같이도 접근할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleURL&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 앱의 저장위치&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// identifier&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;패키지&quot;&gt;패키지&lt;/h3&gt;

&lt;p&gt;파인더를 통해 봤을 때 파일처럼 보이는 디렉토리이다. 패키지는 관련있는 자원들을 하나의 유닛으로 압축시키고 연결시키는 작업을 통해 사용자 경험을 향상하기 위해 만들어졌다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리에 .app, .playground, .plugin과 같은 특별한 확장자를 가지고 있는 파일이 있는 경우&lt;/li&gt;
  &lt;li&gt;디렉토리에 document 타입으로 등록된 앱의 확장자가 존재하는 경우&lt;/li&gt;
  &lt;li&gt;디렉토리에 그 자체를 패키지로 보여지게 하는 확장된 attribute가 존재하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 세 가지의 경우에 해당 디렉토리를 패키지라고 생각할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;패키지는 누군가 봉인해둔 하나의 박스라면 번들은 백팩과 같은 느낌이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711145044.svg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출처: https://nshipster.co.kr/bundles-and-packages/&lt;/p&gt;

&lt;h2 id=&quot;app-bundle이란&quot;&gt;App Bundle이란?&lt;/h2&gt;

&lt;p&gt;앱 번들은 개발자가 생성하는 가장 일반적인 유형의 번들로, 어플리케이션의 성공적인 작동에 필요한 모든 것들을 저장한다. 구조는 어플리케이션 플랫폼이 iOS냐 MacOS냐에 따라 다르지만, 사용하는 방법은 동일하다.&lt;/p&gt;

&lt;h2 id=&quot;앱-번들의-구성요소&quot;&gt;앱 번들의 구성요소&lt;/h2&gt;

&lt;p&gt;앱 번들에는 Info.plist, 실행파일, 리소스 파일, 기타 서포트 파일 등이 포함되어있는데 각각 아래와 같은 역할을 수행한다.&lt;/p&gt;

&lt;h3 id=&quot;infoplist&quot;&gt;Info.plist&lt;/h3&gt;

&lt;p&gt;어플리케이션에 대한 구성 정보가 들어있는 구조화된 파일로, 시스템은 이 파일에 의존하여 어플리케이션 및 파일에 대한 관련 정보를 식별한다.&lt;/p&gt;

&lt;h3 id=&quot;실행파일&quot;&gt;실행파일&lt;/h3&gt;

&lt;p&gt;모든 응용 프로그램에 존재하는 실행파일로 어플리케이션의 메인 entry point와 어플리케이션 타겟에 정적으로 연결된 모든 코드가 포함되어 있다.&lt;/p&gt;

&lt;h3 id=&quot;리소스-파일&quot;&gt;리소스 파일&lt;/h3&gt;

&lt;p&gt;리소스는 어플리케이션의 실행 파일 외부에 있는 데이터 파일이다. 리소스는 일반적으로 이미지, 아이콘, 소리, nib파일, 문자열 파일, 설정 파일 및 데이터 파일 등으로 구성된다. 대부분 localized될 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;기타-서포트-파일&quot;&gt;기타 서포트 파일&lt;/h3&gt;

&lt;p&gt;커스텀 데이터 리소스 등이 포함 되어있다.&lt;/p&gt;

&lt;p&gt;iOS의 번들 구조를 이해하면 사용자 지정 파일을 저장할 위치를 결정하는데 도움이 된다. iOS 어플의 번들 구조는 모바일 장치에 적합하게 이루어져 있다. 외부 디렉토리가 거의 없는 평평한 구조를 사용하여 디스크 공간을 절약하고 파일에 대한 접근과정을 간소화한다.&lt;/p&gt;

&lt;h2 id=&quot;참고한-링크&quot;&gt;참고한 링크&lt;/h2&gt;

&lt;p&gt;https://nshipster.co.kr/bundles-and-packages/&lt;/p&gt;

&lt;p&gt;https://melod-it.gitbook.io/sagwa/documentation-archive/bundle-programming-guide/bundle-structures&lt;/p&gt;

&lt;p&gt;https://ios-development.tistory.com/339&lt;/p&gt;

&lt;p&gt;https://hcn1519.github.io/articles/2018-12/bundle&lt;/p&gt;

&lt;p&gt;https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html#//apple_ref/doc/uid/10000123i-CH100-SW1&lt;/p&gt;

&lt;p&gt;https://woongsios.tistory.com/92&lt;/p&gt;

&lt;p&gt;https://developer.apple.com/documentation/foundation/bundle&lt;/p&gt;

&lt;p&gt;https://www.notion.so/App-Bundle-650ff04e917c4ef4980237d4f68f09a3&lt;/p&gt;

&lt;p&gt;https://github.com/jwonyLee/TIL/blob/master/iOS/Interview/AppBundle.md&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatIsAppBundle/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatIsAppBundle/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>UIViewController</title>
        <description>&lt;h2 id=&quot;uiviewcontroller의-역할&quot;&gt;UIViewController의 역할&lt;/h2&gt;

&lt;p&gt;View Controller는 앱 내부 구조의 기반으로 모든 앱은 최소 하나 이상의 뷰컨트롤러를 가진다. 뷰컨트롤러는 UI, 인터페이스, 데이터간의 상호작용을 맡으며 UI간의 전환에도 도움을 준다.&lt;/p&gt;

&lt;h3 id=&quot;view의-계층-관리&quot;&gt;View의 계층 관리&lt;/h3&gt;

&lt;p&gt;각각의 View Controller는 View의 계층을 관리한다. 이 계층의 가장 근원이 되는 것이 root view이며 모든 view controller는 한개의 root view를 가진다.&lt;/p&gt;

&lt;h3 id=&quot;view와-관련된-notification-관리&quot;&gt;View와 관련된 Notification 관리&lt;/h3&gt;

&lt;p&gt;ViewController 객체는 UIView 객체들의 생성, 소멸, 이벤트 발생 등을 관리한다. View는 나타나기 직전, 나타난 후, 사라지기 직전, 사라진 후 4단계에 걸쳐서 UIViewController에게 내용을 전달한다.&lt;/p&gt;

&lt;h3 id=&quot;user-interaction-처리&quot;&gt;User Interaction 처리&lt;/h3&gt;

&lt;p&gt;뷰컨트롤러는 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/Responder.html#//apple_ref/doc/uid/TP40009071-CH1&quot;&gt;responder objects&lt;/a&gt;로서 responder chain으로부터 내려오는 이벤트를 핸들링할 수 있지만 일반적으로 터치 이벤트를 직접 핸들링하지 않고 뷰가 대신 이벤트를 감지하여 델리게이트나 타겟 오브젝트(일반적으로 뷰컨트롤러)에 보고한다.&lt;/p&gt;

&lt;p&gt;따라서 대부분의 뷰컨트롤러에 대한 이벤트는 델리게이트 메서드나 액션 메서드(&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html#//apple_ref/doc/uid/TP40009071-CH3&quot;&gt;action methods&lt;/a&gt;) 로 핸들링된다.&lt;/p&gt;

&lt;h3 id=&quot;viewcontroller의-두-가지-종류&quot;&gt;ViewController의 두 가지 종류&lt;/h3&gt;

&lt;p&gt;View Controller는 두 가지 종류로 구분되는데 하나는 content view controller로 앱의 컨텐츠를 관리하는 기본 타입, 다른 하나는 컨테이너 뷰컨트롤러로 다른 뷰컨트롤러를 관리하는 뷰컨트롤러이다.&lt;/p&gt;

&lt;h3 id=&quot;view-management&quot;&gt;View Management&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711192638.png&quot; alt=&quot;image: ../Art/VCPG_ControllerHierarchy_fig_1-1_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711192908.png&quot; alt=&quot;image: ../Art/VCPG_ContainerViewController_fig_1-2_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;뷰 컨트롤러의 가장 중요한 역할을 뷰 계층을 관리하는 것이다. 뷰컨트롤러는 모든 컨텐트를 감싸는 루트뷰를 갖고 있으며 디스플레이하고 싶은 다른 뷰를 추가할 수 있다. 뷰컨트롤러는 언제나 루트뷰의 레퍼런스를 소유하고 각 뷰는 서브뷰들의 스트롱 레퍼런스(strong references) 를 소유한다.&lt;/p&gt;

&lt;p&gt;뷰컨트롤러의 뷰계층에서 다른 뷰에 접근하려면 아웃렛(&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/Devpedia-CocoaApp/Outlet.html#//apple_ref/doc/uid/TP40009071-CH4&quot;&gt;outlets&lt;/a&gt;) 이 일반적인 방법이다. 뷰컨트롤러는 모든 뷰의 컨텐트를 관리하고 아웃렛은 뷰에 대한 레퍼런스를 저장한다. 아웃렛은 뷰가 스토리보드에 로드될 때 자동으로 실제 뷰 오브젝트에 연결된다.&lt;/p&gt;

&lt;p&gt;컨텐트 뷰컨트롤러는 속한 모든 뷰를 직접 관리한다. 컨테이너 뷰컨트롤러는 직접 소유한 뷰와 차일드 뷰컨트롤러의 루트뷰를 관리한다. 컨테이너는 자식뷰의 컨텐트를 관리하지 않으며 오직 컨테이너의 디자인에 따라 루트뷰의 사이즈와 위치 등을 관리한다. 아래 스플릿 뷰컨트롤러(split view controller) 는 차일드뷰의 사이즈와 포지션을 관리하지만 차일드 뷰컨트롤러는 실제 컨텐츠를 관리한다.&lt;/p&gt;

&lt;h3 id=&quot;data-marshing-데이터-중계&quot;&gt;Data Marshing (데이터 중계)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711194741.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뷰컨트롤러는 관리하는 뷰와 데이터간의 중계자 역할을 수행한다. &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller&quot;&gt;UIViewController&lt;/a&gt; 의 메서드와 프로프터로 앱의 비주얼을 관리할 수 있고 서브클래스의 데이터를 관리할 수 있는 변수를 추가할 수 있다. 커스텀 변수를 추가하는 것은 아래 그림과 같은 관계를 만들어 내는데, 뷰컨트롤러는 데이터와 그것을 나타내는 뷰의 레퍼런스를 소유한다.&lt;/p&gt;

&lt;p&gt;개발자는 뷰컨트롤러와 데이터 오브젝트간의 책임을 명확하게 분리해야 한다. 뷰컨트롤러는 뷰로부터 얻는 인풋을 검증하고 데이터 오브젝트가 필요로 하는 포맷으로 패키징한다. 하지만 실제 데이터를 관리함에 있어서 뷰컨트롤러의 역할은 최소화되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uidocument&quot;&gt;UIDocument&lt;/a&gt; 오브젝트는 데이터를 뷰컨트롤러로부터 분리하여 관리하는 방법중 한가지이다. 그것은 컨트롤러 오브젝트로서 데이터를 영구 저장소로부터 읽고 쓰는 방법을 알고 있다. 서브클래싱하면 데이터를 추출하고 전달하는 로직이나 메서드를 추가할 수 있다. 뷰컨트롤러는 뷰의 업데이트가 용이하도록 데이터의 복사본을 저장하지만 도큐먼트를 원본데이터를 소유한다.&lt;/p&gt;

&lt;h3 id=&quot;resource-관리&quot;&gt;Resource 관리&lt;/h3&gt;

&lt;p&gt;뷰컨트롤러는 자신 위에 올라오는 모든 뷰들을 관리한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didReceiveMemoryWarning&lt;/code&gt; 메서드를 통해서 메모리 워닝이 발생했는지를 체크하고 뷰를 삭제함으로써 메모리 공간을 확보한다.&lt;/p&gt;

&lt;p&gt;View Controller의&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본 데이터의 변경에 대한 응답으로 뷰의 콘텐츠를 업데이트&lt;/li&gt;
  &lt;li&gt;뷰와 사용자 상호 작용에 응답&lt;/li&gt;
  &lt;li&gt;뷰 크기 조정 및 전체 인터페이스의 레이아웃 관리&lt;/li&gt;
  &lt;li&gt;앱에서 다른 뷰 컨트롤러를 포함한 다른 객체와 조정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;adaptivity-관리&quot;&gt;Adaptivity 관리&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711195332.png&quot; alt=&quot;image: ../Art/VCPG_SizeClassChanges_fig_1-4_2x.png&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;뷰컨트롤러는 속한 뷰의 환경에 따라 적응을 한다. iOS앱은 아이패드나 여러가지 아이폰에서 실행이 가능하다. 여러개의 뷰컨트롤러로 개별 기기를 지원하기보다는 하나의 뷰컨트롤러만 가지고 뷰의 사이즈를 조절한다. 뷰컨트롤러의 traits, size class(compact, regular)가 바뀌면 그에 맞게 컨텐츠를 배치해준다.&lt;/p&gt;

&lt;h2 id=&quot;참고한-링크&quot;&gt;참고한 링크&lt;/h2&gt;

&lt;p&gt;https://ahyeonlog.tistory.com/17&lt;/p&gt;

&lt;p&gt;https://sibalja.tistory.com/25&lt;/p&gt;

&lt;p&gt;http://www.appleofeyes.com/role-view-controllers-xcode-%EC%97%91%EC%8A%A4%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%B7%B0%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EC%97%AD%ED%95%A0/&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/WhatDoesViewControllerDo/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/WhatDoesViewControllerDo/</guid>
        
        <category>UIResponder</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>App Life Cycle</title>
        <description>&lt;h2 id=&quot;app-life-cycle&quot;&gt;App Life Cycle&lt;/h2&gt;

&lt;h3 id=&quot;앱의-시작&quot;&gt;앱의 시작&lt;/h3&gt;

&lt;p&gt;iOS는 C언어 기반을 토대로 작동하기 때문에 앱이 시작되면 가장 처음으로 main 함수가 불린다. main 함수는 UIKit framework이 관리하며 UIApplication 객체를 생성한다. 이를 통해 개발자는 앱의 실행에 부분적으로 관여할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;main-run-loop&quot;&gt;Main Run Loop&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711155954.PNG&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이벤트의 처리 과정은 다음과 같이 정리할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;유저가 이벤트를 발생시킨다.&lt;/li&gt;
  &lt;li&gt;시스템을 통해 이벤트가 생성된다.&lt;/li&gt;
  &lt;li&gt;UIKit에 의해 생성된 Port가 이벤트를 이벤트 큐에 삽입한다.&lt;/li&gt;
  &lt;li&gt;이벤트 큐의 이벤트가 하나씩 Main Run Loop에 매핑된다.&lt;/li&gt;
  &lt;li&gt;UIApplication instance는 이벤트를 전달받을 객체를 선정한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;앱의-상태-변화&quot;&gt;앱의 상태 변화&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711160214.PNG&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Neph3779/Blog-Image/forUpload/img/20210711160423.png&quot; alt=&quot;123540849-04b7c100-d77c-11eb-9b13-a08e8daf0ed9&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;not-running&quot;&gt;Not Running&lt;/h3&gt;

&lt;p&gt;말 그대로 앱을 실행하지 않은 상태이다. 이 시점에 호출되는 메서드는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623032-application&quot;&gt;application(_:willFinishLaunchingWithOptions:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱 실행을 준비하는 메서드로 필요한 주요 객체들을 생성, 앱 실행 준비가 끝나기 직전에 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622921-application&quot;&gt;application(_:didFinishLaunchingWithOptions:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱 실행을 위한 모든 준비가 끝난 후 화면이 사용자에게 보여지기 직전에 호출되는 메서드로, 초기화 코드를 이곳에 작성한다.&lt;/p&gt;

&lt;p&gt;이 메서드의 return value가 반환된 이후, 다른 app delegate의 메서드가 실행되어 forground state로 진입한다.&lt;/p&gt;

&lt;p&gt;launch option을 사용할 수 있는 마지막 장소이다.&lt;/p&gt;

&lt;p&gt;애플에서는 다음과 같은 당부를 전달한다. (didFinish.. 메서드 대신  willFinish.. 메서드를 이용할 것을 권장한다는 내용)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Important&lt;/p&gt;

  &lt;p&gt;For app initialization, it is highly recommended that you use this method and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application(_:willFinishLaunchingWithOptions:)&lt;/code&gt; method and do not use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;applicationDidFinishLaunching(_:)&lt;/code&gt; method, which is intended only for apps that run on older versions of iOS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623111-applicationwillterminate&quot;&gt;applicationWillTerminate(_:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱이 종료되기 직전에 호출되는 메서드로 app의 task를 clean-up하거나 공유 자원의 free, user data의 저장, timer의 초기화 등의 작업을 위한 코드를 이곳에 작성한다.&lt;/p&gt;

&lt;p&gt;다만 메모리 확보를 위해 suspended 상태에 있는 앱이 종료되는 경우, background 상태에서 사용자에 의해 종료되는 경우, 오류로 인해 앱이 종료되는 경우에 이 메서드는 호출되지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;inactive&quot;&gt;InActive&lt;/h3&gt;

&lt;p&gt;앱이 실행되면서 foreground에 진입하거나 foreground에서 background로 이동하는 시점. 어떠한 이벤트도 받지 않는 상태이며 다음과 같은 메서드들이 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623076-applicationwillenterforeground&quot;&gt;sceneWillEnterForeground(&lt;em&gt;:)](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197918-scenewillenterforeground) or  [applicationWillEnterForeground(&lt;/em&gt;:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱이 실행되며 foreground에 진입하기 직전 호출되는 메서드이다.&lt;/p&gt;

&lt;p&gt;전자의 메서드가 호출되는 경우는 UISceneDelegate이 구현되어있는 경우이다. 만약 전자의 메서드가 호출되었다면 후자는 호출되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622950-applicationwillresignactive&quot;&gt;sceneWillResignActive(&lt;em&gt;:)](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197919-scenewillresignactive) or  [applicationWillResignActive(&lt;/em&gt;:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱이 background로 진입하기 직전 호출되는 메서드이다. 위의 경우와 마찬가지로 UISceneDelegate의 구현여부에 따라 호출될 메서드가 결정된다.&lt;/p&gt;

&lt;p&gt;홈화면으로 이동하는 경우, 화면이 앱 실행 도중 잠기는 경우, 다른 앱으로 이동한 경우 등의 상황에서 앱은 background로 진입하게 되며&lt;/p&gt;

&lt;p&gt;멀티윈도우 상태, 알림센터나 제어센터를 보는 경우 등의 상황에서는 InActive 상태를 유지한채로 있는다.&lt;/p&gt;

&lt;h3 id=&quot;active&quot;&gt;Active&lt;/h3&gt;

&lt;p&gt;앱이 실행중이며 foreground에 있고 이벤트를 받고 있는 상태&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622956-applicationdidbecomeactive&quot;&gt;sceneDidBecomeActive(&lt;em&gt;:)](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197915-scenedidbecomeactive) or [applicationDidBecomeActive(&lt;/em&gt;:)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위의 메서드에서 content를 refresh하거나 frame rate를 올리는 등의 작업을 실행해줄 수 있다. (실행될 메서드는 UISceneDelegate 구현 여부에 따라 결정됨)&lt;/p&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;앱이 background에 있으며 다른 앱으로 전환되었거나 홈 버튼을 통해 밖으로 나갔을 때의 상태&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscenedelegate/3197917-scenedidenterbackground?language=objc&quot;&gt;sceneDidEnterBackground(_:)&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground?language=objc&quot;&gt;applicationDidEnterBackground:&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;suspended&quot;&gt;Suspended&lt;/h3&gt;

&lt;p&gt;background에서 특별한 작업이 없을 경우 전환되는 상태&lt;/p&gt;

&lt;h2 id=&quot;참고한-링크&quot;&gt;참고한 링크&lt;/h2&gt;

&lt;p&gt;https://hcn1519.github.io/articles/2017-09/ios_app_lifeCycle&lt;/p&gt;

&lt;p&gt;https://fomaios.tistory.com/entry/%EC%95%B1-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0App-LifeCycle-1&lt;/p&gt;

&lt;p&gt;https://nsios.tistory.com/60&lt;/p&gt;

</description>
        <pubDate>Sun, 11 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://neph3779.github.io/ios/AppLifeCycle/</link>
        <guid isPermaLink="true">https://neph3779.github.io/ios/AppLifeCycle/</guid>
        
        <category>app life cycle</category>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
